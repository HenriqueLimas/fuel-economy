!function e(t,n,u){function i(a,s){if(!n[a]){if(!t[a]){var o="function"==typeof require&&require;if(!s&&o)return o(a,!0);if(r)return r(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return i(n?n:e)},c,c.exports,e,t,n,u)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<u.length;a++)i(u[a]);return i}({1:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e){if("string"==typeof e)return(0,l.find)(e);if(Array.isArray(e)){for(var t=arguments.length,n=Array(t>1?t-1:0),u=1;t>u;u++)n[u-1]=arguments[u];return s["default"].apply(void 0,[e].concat(n))}}Object.defineProperty(n,"__esModule",{value:!0});var a=e("../util/html.js"),s=i(a),o=e("./manipulation.js"),l=e("./find.js"),c=e("./styles.js"),f=u(c);r.create=o.create,r.css=f.css,r.addClass=f.addClass,r.removeClass=f.removeClass,r.toggleClass=f.toggleClass,r.containsClass=f.containsClass,r.find=l.find,r.findAll=l.findAll,r.remove=o.remove,n["default"]=r},{"../util/html.js":7,"./find.js":3,"./manipulation.js":4,"./styles.js":5}],2:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return e?(e.find=function(t){return a["default"].find(t,e)},e.findAll=function(t){return a["default"].findAll(t,e)},e.create=function(t){var n=a["default"].create(t);return e.appendChild(n),n},e.css=function(t){return a["default"].css(e,t)},e.addClass=function(t){return a["default"].addClass(e,t)},e.removeClass=function(t){return a["default"].removeClass(e,t)},e.toggleClass=function(t,n){return a["default"].toggleClass(e,t,n)},e.containsClass=function(t){return a["default"].containsClass(e,t)},e.remove=function(){var t=arguments.length<=0||void 0===arguments[0]?e:arguments[0],n=a["default"].remove(t);return e=null,n},e):null}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=i;var r=e("./d.js"),a=u(r)},{"./d.js":1}],3:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return(0,s["default"])(t.querySelector(e))}function r(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return t.querySelectorAll(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.find=i,n.findAll=r;var a=e("./djsfy"),s=u(a)},{"./djsfy":2}],4:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var t=document.createDocumentFragment(),n=t.appendChild(document.createElement("div"));return n.innerHTML=e.trim(),1===n.childNodes.length&&(n=n.lastChild),(0,s["default"])(n.cloneNode(!0))}function r(e){return e.parentNode?e.parentNode.removeChild(e):null}Object.defineProperty(n,"__esModule",{value:!0}),n.create=i,n.remove=r;var a=e("./djsfy.js"),s=u(a)},{"./djsfy.js":2}],5:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!e||8===e.nodeType||3===e.nodeType||!e.style)return null;for(var n in t)if(Object.hasOwnProperty.call(t,n)){var u=y({styleList:e.style,styleToCheck:n});u&&(e.style[u]=t[n])}return(0,h["default"])(e)}function r(e,t){var n=e.getAttribute("class")||"";if(t=p(t)||[],t instanceof Array)for(var u=0,i=t.length;i>u;u++){if(!t[u].trim())throw new SyntaxError("djs.addClass(): Empty strings are not valid class name");d(n,t[u])||(n+=" "+t[u].trim())}return e.setAttribute("class",n.trim()),(0,h["default"])(e)}function a(e,t){if(!e)throw new Error("The element must be not empty.");return c(t),d(e.getAttribute("class"),t)}function s(e,t){var n=l(e);if(t=p(t)||[],!n.length||!t.length)return(0,h["default"])(e);if(t instanceof Array)e:for(var u=0,i=t.length;i>u;u++){var r=t[u];c(r);for(var a=0,s=n.length;s>a;a++)if(r===n[a]){n.splice(a,1);continue e}}return e.setAttribute("class",n.join(" ")),(0,h["default"])(e)}function o(e,t,n){if(!e)throw new Error("The element must be not empty.");c(t);var u=l(e);return d(u,t)?n||s(e,t):n!==!1&&r(e,t),(0,h["default"])(e)}function l(e){return p(e.getAttribute("class"))||[]}function c(e){if(!e)throw new Error("The className provided ('"+e+"') must be not empty.");if(f(e))throw new Error("The className provided ('"+e+"') contains HTML space characters, which are not valid.")}function f(e){return e.match(/\s/)}function d(e,t){e=p(e)||[];for(var n=0,u=e.length;u>n;n++)if(e[n].trim()===t.trim())return!0;return!1}function p(e){return"string"==typeof e&&(e=e.split(" ")),e}function y(e){var t=e.styleList,n=e.styleToCheck;if(n in t)return n;if(n in C)return C[n];for(var u=0,i=O.length;i>u;u++){var r=""+O[u]+n[0].toUpperCase()+n.substring(1);if(r in t)return C[n]=r,C[n]}return!1}Object.defineProperty(n,"__esModule",{value:!0}),n.css=i,n.addClass=r,n.containsClass=a,n.removeClass=s,n.toggleClass=o;var v=e("./djsfy"),h=u(v),j="ms",_="webkit",b="moz",m="o",g="xv",w="khtml",O=[j,_,b,m,g,w],C={"float":"cssFloat"}},{"./djsfy":2}],6:[function(e,t,n){(function(u){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("./djs/d.js"),a=i(r);"object"==typeof n&&"undefined"!=typeof t?t.exports=a["default"]:"function"==typeof define&&define.amd&&define([],function(){return a["default"]});var s=void 0;s="undefined"!=typeof window?window:"undefined"!=typeof u?u:"undefined"!=typeof self?self:void 0,s.djs=a["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./djs/d.js":1}],7:[function(e,t,n){"use strict";function u(e){for(var t=e.raw,n=void 0,u=arguments.length,r=Array(u>1?u-1:0),a=1;u>a;a++)r[a-1]=arguments[a];return n=r.reduce(function(e,n,u){var r=t[u];return n=Array.isArray(n)?n.join(""):n+"","$"===r[r.length-1]&&(n=i(n),r=r.slice(0,-1)),e+=r,e+=n},""),n+=t[t.length-1]}function i(e){return e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quote;").replace(/'/g,"&#39;").replace(/`/g,"&#96;")}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=u},{}],8:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./distance.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./distance.dispatcher.js":10}],9:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(t){var n=t.unit,i=void 0===n?"Km":n,r=t.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=r},{}],10:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],11:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){j.$distance=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.distance.unit)}),p["default"].changeUnit("Km"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$distance.find(".fe-distance__input"),j.$unit=j.$distance.find(".fe-distance__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=i(['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="number">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="number">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var c=e("dom.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$distance:null,$input:null,$unit:null},_=void 0},{"./distance.actions.js":8,"./distance.store.js":12,"dom.js":6}],12:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./distance.class.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.dispatcher.js"),v=u(y),h=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.distance=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.distance=new f["default"]({unit:e.distance.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.distance=new f["default"]({value:e.distance.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./distance.actions.js":8,"./distance.class.js":9,"./distance.dispatcher.js":10}],13:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){e.create(l.html)}var a=i(['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  '],['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var s=e("dom.js"),o=u(s),l={html:(0,o["default"])(a)}},{"dom.js":6}],14:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("dom.js"),a=i(r),s=e("./header/header.js"),o=u(s),l=e("./inputs/inputs-container.js"),c=u(l),f=e("./results/results-container.js"),d=u(f),p=u(f),y=e("./quantity/quantity.js"),v=u(y),h=e("./distance/distance.js"),j=u(h),_=(0,a["default"])(".fe-js-header"),b=(0,a["default"])(".fe-js-inputs-container"),m=(0,a["default"])(".fe-js-results-container"),g={unit:"L"},w={unit:"Km"};v.config({unit:"L",onInput:function(e){g=e,p.refreshFuelConsumption({distance:w,quantity:g})}}),j.config({unit:"Km",onInput:function(e){w=e,p.refreshFuelConsumption({distance:w,quantity:g})}}),o.initModule(_),c.initModule(b),d.initModule(m),p.refreshFuelConsumption({distance:w,quantity:g})},{"./distance/distance.js":11,"./header/header.js":13,"./inputs/inputs-container.js":15,"./quantity/quantity.js":19,"./results/results-container.js":24,"dom.js":6}],15:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){h.$inputContainer=e.create(v.html),s(e),d.initModule(h.$inputQuantity),y.initModule(h.$inputDistance)}function s(e){h.$container=e,h.$inputQuantity=h.$inputContainer.find(".fe-js-quantity"),h.$inputDistance=h.$inputContainer.find(".fe-js-distance")}var o=r(['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  '],['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=i(l),f=e("../quantity/quantity.js"),d=u(f),p=e("../distance/distance.js"),y=u(p),v={html:(0,c["default"])(o)},h={$container:null,$inputContainer:null,$inputQuantity:null,$inputDistance:null}},{"../distance/distance.js":11,"../quantity/quantity.js":19,"dom.js":6}],16:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./quantity.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./quantity.dispatcher.js":18}],17:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(t){var n=t.unit,i=void 0===n?"L":n,r=t.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=r},{}],18:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],19:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){j.$quantity=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.quantity.unit)}),p["default"].changeUnit("L"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$quantity.find(".fe-quantity__input"),j.$unit=j.$quantity.find(".fe-quantity__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=i(['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="number">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="number">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var c=e("dom.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$quantity:null,$input:null,$unit:null},_=void 0},{"./quantity.actions.js":16,"./quantity.store.js":20,"dom.js":6}],20:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./quantity.class.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.dispatcher.js"),v=u(y),h=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.quantity=new f["default"]({unit:e.quantity.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.quantity=new f["default"]({value:e.quantity.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./quantity.actions.js":16,"./quantity.class.js":17,"./quantity.dispatcher.js":18}],21:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e)}return i(e,null,[{key:"calc",value:function(e){var t=e.quantity,n=void 0===t?{}:t,u=e.distance,i=void 0===u?{}:u,r={value:0,unit:i.unit+"/"+n.unit};return n.value&&i.value?(r.value=i.value/n.value,r.value=r.value.toString().substring(0,10),r):r}}]),e}();n["default"]=r},{}],22:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){y.$fuelConsumption=e.create(p.html),s(e),v=new d["default"],v.onChange(function(){a(v.results)}),v.change()}function a(e){y.$fuelUnit.innerHTML=e.unit,y.$fuelValue.innerHTML=e.value}function s(e){y.$container=e,y.$fuelUnit=y.$fuelConsumption.find(".fe-unit"),y.$fuelValue=y.$fuelConsumption.find(".fe-js-value")}var o=i(['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  '],['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var l=e("dom.js"),c=u(l),f=e("./fuel-consumption.store.js"),d=u(f),p={html:(0,c["default"])(o)},y={$container:null,$fuelConsumption:null,$fuelUnit:null,$fuelValue:null},v=void 0},{"./fuel-consumption.store.js":23,"dom.js":6}],23:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../../tools/store.js"),o=u(s),l=e("../results.actions.js"),c=u(l),f=e("../results.dispatcher.js"),d=u(f),p=e("./fuel-consumption.class.js"),y=u(p),v=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.results=y["default"].calc({}),d["default"].register(function(t){switch(t.type){case c["default"].RESULT_CHANGED:e.results=y["default"].calc(t.data),e.change(e.results)}}),e}return a(t,e),t}(o["default"]);n["default"]=v},{"../../tools/store.js":29,"../results.actions.js":25,"../results.dispatcher.js":26,"./fuel-consumption.class.js":21}],24:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){j.$resultsContainer=e.create(h.html),s(e),v=new y["default"],d.initModule(j.$fuelComsuption),v.updateResults()}function s(e){j.$container=e,j.$fuelComsuption=j.$resultsContainer.find(".fe-js-fuel-consumption")}var o=r(['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  '],['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=i(l),f=e("./fuel-consumption/fuel-consumption.js"),d=u(f),p=e("./results.store.js"),y=i(p),v=void 0,h={html:(0,c["default"])(o)},j={$container:null,$resultsContainer:null,$fuelComsuption:null}},{"./fuel-consumption/fuel-consumption.js":22,"./results.store.js":27,"dom.js":6}],25:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./results.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeResult",value:function(t){s["default"].dispatch({type:e.RESULT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"RESULT_CHANGED",Symbol())},{"../tools/utils.js":30,"./results.dispatcher.js":26}],26:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],27:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("../quantity/quantity.class.js"),f=u(c),d=e("../quantity/quantity.actions.js"),p=u(d),y=e("../quantity/quantity.dispatcher.js"),v=u(y),h=e("../distance/distance.class.js"),j=u(h),_=e("../distance/distance.actions.js"),b=u(_),m=e("../distance/distance.dispatcher.js"),g=u(m),w=e("./results.actions.js"),O=u(w),C=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.distance=new j["default"]({}),v["default"].register(function(t){e._updateQuantityClass(t),e.updateResults()}),g["default"].register(function(t){e._updateDistanceClass(t),e.updateResults()}),e}return a(t,e),s(t,[{key:"_updateQuantityClass",value:function(e){switch(e.type){case p["default"].VALUE_CHANGED:this.quantity=new f["default"]({unit:this.quantity.unit,value:e.data});break;case p["default"].UNIT_CHANGED:this.quantity=new f["default"]({value:this.quantity.value,unit:e.data})}this.change()}},{key:"_updateDistanceClass",value:function(e){switch(e.type){case b["default"].VALUE_CHANGED:this.distance=new j["default"]({unit:this.distance.unit,value:e.data});break;case b["default"].UNIT_CHANGED:this.distance=new j["default"]({value:this.distance.value,unit:e.data})}this.change()}},{key:"updateResults",value:function(){O["default"].changeResult({quantity:this.quantity,distance:this.distance})}}]),t}(l["default"]);n["default"]=C},{"../distance/distance.actions.js":8,"../distance/distance.class.js":9,"../distance/distance.dispatcher.js":10,"../quantity/quantity.actions.js":16,"../quantity/quantity.class.js":17,"../quantity/quantity.dispatcher.js":18,"../tools/store.js":29,"./results.actions.js":25}],28:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e),this._listeners=new Map}return i(e,[{key:"dispatch",value:function(e){this._listeners.forEach(function(t){return t(e)})}},{key:"register",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregister",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=r},{}],29:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e),this._listeners=new Map}return i(e,[{key:"change",value:function(){this._listeners.forEach(function(e){return e()})}},{key:"onChange",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregisterChange",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=r},{}],30:[function(e,t,n){"use strict";function u(e,t,n){Object.defineProperty(e,t,{enumerable:!0,writable:!1,configurable:!1,value:n})}Object.defineProperty(n,"__esModule",{value:!0}),n.defineConstProperty=u},{}]},{},[14]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1bmRsZXIuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlZmF1bHQiLCJkanMiLCJ0ZW1wbGF0ZSIsIl9maW5kIiwiZmluZCIsIkFycmF5IiwiaXNBcnJheSIsIl9sZW4iLCJhcmd1bWVudHMiLCJzdWJzdHMiLCJfa2V5IiwiX2h0bWwyIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2h0bWwiLCJfbWFuaXB1bGF0aW9uIiwiX3N0eWxlcyIsInN0eWxlcyIsImNyZWF0ZSIsImNzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImNvbnRhaW5zQ2xhc3MiLCJmaW5kQWxsIiwicmVtb3ZlIiwiLi4vdXRpbC9odG1sLmpzIiwiLi9maW5kLmpzIiwiLi9tYW5pcHVsYXRpb24uanMiLCIuL3N0eWxlcy5qcyIsMiwiZGpzZnkiLCJub2RlIiwic3RyaW5nIiwiX2QyIiwiZWxlbWVudCIsImFwcGVuZENoaWxkIiwiY3NzU3R5bGVzIiwiY2xhc3NMaXN0IiwiY2xhc3NUb1JlbW92ZSIsImNsYXNzTmFtZSIsImZvcmNlIiwibm9kZVRvUmVtb3ZlIiwib2xkTm9kZSIsIl9kIiwiLi9kLmpzIiwzLCJyb290RWxlbWVudCIsImRvY3VtZW50IiwiX2Rqc2Z5MiIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2Rqc2Z5IiwiLi9kanNmeSIsNCwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInRyaW0iLCJjaGlsZE5vZGVzIiwibGFzdENoaWxkIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiLi9kanNmeS5qcyIsNSwibm9kZVR5cGUiLCJzdHlsZSIsImtleVByZWZpeGVkIiwiZ2V0U3R5bGVXaXRoUHJlZml4S2V5Iiwic3R5bGVMaXN0Iiwic3R5bGVUb0NoZWNrIiwiY3VycmVudENsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInBhcnNlQXJyYXkiLCJTeW50YXhFcnJvciIsImNvbnRhaW5zQ2xhc3NJbnRvTGlzdCIsInNldEF0dHJpYnV0ZSIsImFzc2VydENsYXNzTmFtZSIsImdldEN1cnJlbnRDbGFzc0xpc3QiLCJjbGFzc1RvUmVtb3ZlSW50ZXJhY3Rpb24iLCJ5IiwiX2xlbmd0aCIsInNwbGljZSIsImpvaW4iLCJjb250YWluc1doaXRlc3BhY2VzIiwibWF0Y2giLCJjbGFzc1RvQ2hlY2siLCJzcGxpdCIsIl9yZWYiLCJDU1NfUFJFRklYRUQiLCJQUkVGSVhJRVMiLCJzdHlsZVdpdGhQcmVmaXgiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIk1TIiwiV0VCS0lUIiwiTU9aIiwiTyIsIlhWIiwiS0hUTUwiLCJmbG9hdCIsNiwiZ2xvYmFsIiwiZGVmaW5lIiwiYW1kIiwiX2dsb2JhbCIsIndpbmRvdyIsInNlbGYiLCJ0aGlzIiwiLi9kanMvZC5qcyIsNywiaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZyIsInRlbXBsYXRlT2JqZWN0IiwicmF3IiwicmVzdWx0IiwicmVkdWNlIiwic3Vic3QiLCJsaXQiLCJodG1sRXNjYXBlIiwic2xpY2UiLCJzdHIiLCJyZXBsYWNlIiw4LCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9kaXN0YW5jZURpc3BhdGNoZXIiLCJfZGlzdGFuY2VEaXNwYXRjaGVyMiIsIl91dGlscyIsIkRpc3RhbmNlQWN0aW9ucyIsImRpc3BhdGNoIiwidHlwZSIsIlZBTFVFX0NIQU5HRUQiLCJkYXRhIiwidW5pdCIsIlVOSVRfQ0hBTkdFRCIsImRlZmluZUNvbnN0UHJvcGVydHkiLCJTeW1ib2wiLCIuLi90b29scy91dGlscy5qcyIsIi4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qcyIsOSwiRGlzdGFuY2UiLCJfcmVmJHVuaXQiLCJfcmVmJHZhbHVlIiwicGFyc2VJbnQiLDEwLCJfZGlzcGF0Y2hlciIsIl9kaXNwYXRjaGVyMiIsIi4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMiLDExLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwic3RyaW5ncyIsImZyZWV6ZSIsImluaXRNb2R1bGUiLCIkY29udGFpbmVyIiwiZWxlbWVudE1hcCIsIiRkaXN0YW5jZSIsImNvbmZpZ01hcCIsImh0bWwiLCJzZXRFbGVtZW50TWFwIiwic2V0RWxlbWVudEhhbmRsZXJzIiwiZGlzdGFuY2VTdG9yZSIsIl9kaXN0YW5jZVN0b3JlMiIsIm9uQ2hhbmdlIiwicmVmcmVzaFVuaXQiLCJkaXN0YW5jZSIsIl9kaXN0YW5jZUFjdGlvbnMyIiwiY2hhbmdlVW5pdCIsInVucmVnaXN0ZXJMaXN0ZW5lciIsIiR1bml0IiwiJGlucHV0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY2hhbmdlVmFsdWUiLCJfdGVtcGxhdGVPYmplY3QiLCJfZG9tIiwiX2RvbTIiLCJfZGlzdGFuY2VBY3Rpb25zIiwiX2Rpc3RhbmNlU3RvcmUiLCIuL2Rpc3RhbmNlLmFjdGlvbnMuanMiLCIuL2Rpc3RhbmNlLnN0b3JlLmpzIiwiZG9tLmpzIiwxMiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc3RvcmUiLCJfc3RvcmUyIiwiX2Rpc3RhbmNlQ2xhc3MiLCJfZGlzdGFuY2VDbGFzczIiLCJEaXN0YW5jZVN0b3JlIiwiX1N0b3JlIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsImxpc3RlbmVyIiwicmVnaXN0ZXIiLCJjaGFuZ2UiLCJ1bnJlZ2lzdGVyIiwiLi4vdG9vbHMvc3RvcmUuanMiLCIuL2Rpc3RhbmNlLmNsYXNzLmpzIiwxMywxNCwiX2hlYWRlciIsImhlYWRlciIsIl9pbnB1dHNDb250YWluZXIiLCJpbnB1dHNDb250YWluZXIiLCJfcmVzdWx0c0NvbnRhaW5lciIsInJlc3VsdHNDb250YWluZXIiLCJyZXN1bHRzIiwiX3F1YW50aXR5IiwicXVhbnRpdHkiLCJfZGlzdGFuY2UiLCIkaGVhZGVyQ29udGFpbmVyIiwiJGlucHV0c0NvbnRhaW5lciIsIiRyZXN1bHRzQ29udGFpbmVyIiwicXVhbnRpdHlNb2RlbCIsImRpc3RhbmNlTW9kZWwiLCJjb25maWciLCJvbklucHV0IiwibW9kZWwiLCJyZWZyZXNoRnVlbENvbnN1bXB0aW9uIiwiLi9kaXN0YW5jZS9kaXN0YW5jZS5qcyIsIi4vaGVhZGVyL2hlYWRlci5qcyIsIi4vaW5wdXRzL2lucHV0cy1jb250YWluZXIuanMiLCIuL3F1YW50aXR5L3F1YW50aXR5LmpzIiwiLi9yZXN1bHRzL3Jlc3VsdHMtY29udGFpbmVyLmpzIiwxNSwiJGlucHV0Q29udGFpbmVyIiwiJGlucHV0UXVhbnRpdHkiLCIkaW5wdXREaXN0YW5jZSIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzIiwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuanMiLDE2LCJfcXVhbnRpdHlEaXNwYXRjaGVyIiwiX3F1YW50aXR5RGlzcGF0Y2hlcjIiLCJRdWFudGl0eUFjdGlvbnMiLCIuL3F1YW50aXR5LmRpc3BhdGNoZXIuanMiLDE3LCJRdWFudGl0eSIsMTgsMTksIiRxdWFudGl0eSIsInF1YW50aXR5U3RvcmUiLCJfcXVhbnRpdHlTdG9yZTIiLCJfcXVhbnRpdHlBY3Rpb25zMiIsIl9xdWFudGl0eUFjdGlvbnMiLCJfcXVhbnRpdHlTdG9yZSIsIi4vcXVhbnRpdHkuYWN0aW9ucy5qcyIsIi4vcXVhbnRpdHkuc3RvcmUuanMiLDIwLCJfcXVhbnRpdHlDbGFzcyIsIl9xdWFudGl0eUNsYXNzMiIsIlF1YW50aXR5U3RvcmUiLCIuL3F1YW50aXR5LmNsYXNzLmpzIiwyMSwiRnVlbENvbnN1bXB0aW9ucyIsIl9yZWYkcXVhbnRpdHkiLCJfcmVmJGRpc3RhbmNlIiwidG9TdHJpbmciLDIyLCIkZnVlbENvbnN1bXB0aW9uIiwiZnVlbENvbnN1bXB0aW9uU3RvcmUiLCJfZnVlbENvbnN1bXB0aW9uU3RvcmUyIiwiJGZ1ZWxVbml0IiwiJGZ1ZWxWYWx1ZSIsIl9mdWVsQ29uc3VtcHRpb25TdG9yZSIsIi4vZnVlbC1jb25zdW1wdGlvbi5zdG9yZS5qcyIsMjMsIl9yZXN1bHRzQWN0aW9ucyIsIl9yZXN1bHRzQWN0aW9uczIiLCJfcmVzdWx0c0Rpc3BhdGNoZXIiLCJfcmVzdWx0c0Rpc3BhdGNoZXIyIiwiX2Z1ZWxDb25zdW1wdGlvbkNsYXNzIiwiX2Z1ZWxDb25zdW1wdGlvbkNsYXNzMiIsIkZ1ZWxDb25zdW1wdGlvblN0b3JlIiwiY2FsYyIsIlJFU1VMVF9DSEFOR0VEIiwiLi4vLi4vdG9vbHMvc3RvcmUuanMiLCIuLi9yZXN1bHRzLmFjdGlvbnMuanMiLCIuLi9yZXN1bHRzLmRpc3BhdGNoZXIuanMiLCIuL2Z1ZWwtY29uc3VtcHRpb24uY2xhc3MuanMiLDI0LCJyZXN1bHRzU3RvcmUiLCJfcmVzdWx0c1N0b3JlMiIsImZ1ZWxDb21zdXB0aW9uIiwiJGZ1ZWxDb21zdXB0aW9uIiwidXBkYXRlUmVzdWx0cyIsIl9mdWVsQ29uc3VtcHRpb24iLCJfcmVzdWx0c1N0b3JlIiwiLi9mdWVsLWNvbnN1bXB0aW9uL2Z1ZWwtY29uc3VtcHRpb24uanMiLCIuL3Jlc3VsdHMuc3RvcmUuanMiLDI1LCJSZXN1bHRzQWN0aW9ucyIsIi4vcmVzdWx0cy5kaXNwYXRjaGVyLmpzIiwyNiwyNywiUmVzdWx0c1N0b3JlIiwiX3VwZGF0ZVF1YW50aXR5Q2xhc3MiLCJfdXBkYXRlRGlzdGFuY2VDbGFzcyIsImNoYW5nZVJlc3VsdCIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmFjdGlvbnMuanMiLCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5jbGFzcy5qcyIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanMiLCIuLi9xdWFudGl0eS9xdWFudGl0eS5hY3Rpb25zLmpzIiwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuY2xhc3MuanMiLCIuLi9xdWFudGl0eS9xdWFudGl0eS5kaXNwYXRjaGVyLmpzIiwiLi9yZXN1bHRzLmFjdGlvbnMuanMiLDI4LCJEaXNwYXRjaGVyIiwiX2xpc3RlbmVycyIsIk1hcCIsImZvckVhY2giLCJjYWxsYmFjayIsInNldCIsMjksIlN0b3JlIiwzMCwicHJvcCJdLCJtYXBwaW5ncyI6IkNBQUEsUUFBVUEsR0FBRUMsRUFBRUMsRUFBRUMsR0FBRyxRQUFTQyxHQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsR0FBSUUsR0FBa0Isa0JBQVRDLFVBQXFCQSxPQUFRLEtBQUlGLEdBQUdDLEVBQUUsTUFBT0EsR0FBRUYsR0FBRSxFQUFJLElBQUdJLEVBQUUsTUFBT0EsR0FBRUosR0FBRSxFQUFJLElBQUlLLEdBQUUsR0FBSUMsT0FBTSx1QkFBdUJOLEVBQUUsSUFBSyxNQUFNSyxHQUFFRSxLQUFLLG1CQUFtQkYsRUFBRSxHQUFJRyxHQUFFWCxFQUFFRyxJQUFJUyxXQUFZYixHQUFFSSxHQUFHLEdBQUdVLEtBQUtGLEVBQUVDLFFBQVEsU0FBU2QsR0FBRyxHQUFJRSxHQUFFRCxFQUFFSSxHQUFHLEdBQUdMLEVBQUcsT0FBT0ksR0FBRUYsRUFBRUEsRUFBRUYsSUFBSWEsRUFBRUEsRUFBRUMsUUFBUWQsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxNQUFPRCxHQUFFRyxHQUFHUyxRQUFrRCxJQUFJLEdBQTFDTCxHQUFrQixrQkFBVEQsVUFBcUJBLFFBQWdCSCxFQUFFLEVBQUVBLEVBQUVGLEVBQUVhLE9BQU9YLElBQUlELEVBQUVELEVBQUVFLEdBQUksT0FBT0QsS0FBS2EsR0FBRyxTQUFTVCxFQUFRVSxFQUFPSixHQUN2ZCxZQWtCQSxTQUFTSyxHQUF3QkMsR0FBTyxHQUFJQSxHQUFPQSxFQUFJQyxXQUFjLE1BQU9ELEVBQWMsSUFBSUUsS0FBYSxJQUFXLE1BQVBGLEVBQWUsSUFBSyxHQUFJRyxLQUFPSCxHQUFXSSxPQUFPQyxVQUFVQyxlQUFlWCxLQUFLSyxFQUFLRyxLQUFNRCxFQUFPQyxHQUFPSCxFQUFJRyxHQUFnQyxPQUF0QkQsR0FBQUEsV0FBaUJGLEVBQVlFLEVBRWxRLFFBQVNLLEdBQXVCUCxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFRLFVBQVNSLEdBRXZGLFFBQVNTLEdBQUlDLEdBQ1gsR0FBd0IsZ0JBQWJBLEdBQ1QsT0FBUSxFQUFHQyxFQUFNQyxNQUFNRixFQUNsQixJQUFJRyxNQUFNQyxRQUFRSixHQUFXLENBQ2xDLElBQUssR0FBSUssR0FBT0MsVUFBVXBCLE9BQVFxQixFQUFTSixNQUFNRSxFQUFPLEVBQUlBLEVBQU8sRUFBSSxHQUFJRyxFQUFPLEVBQVVILEVBQVBHLEVBQWFBLElBQ2hHRCxFQUFPQyxFQUFPLEdBQUtGLFVBQVVFLEVBRy9CLE9BQU9DLEdBQUFBLFdBQWVDLE1BQU1DLFFBQVlYLEdBQVVZLE9BQU9MLEtBNUI3RGIsT0FBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxHQUdULElBQUlDLEdBQVFyQyxFQUFRLG1CQUVoQitCLEVBQVNaLEVBQXVCa0IsR0FFaENDLEVBQWdCdEMsRUFBUSxxQkFFeEJ1QixFQUFRdkIsRUFBUSxhQUVoQnVDLEVBQVV2QyxFQUFRLGVBRWxCd0MsRUFBUzdCLEVBQXdCNEIsRUFrQnJDbEIsR0FBSW9CLE9BQVNILEVBQWNHLE9BQzNCcEIsRUFBSXFCLElBQU1GLEVBQU9FLElBQ2pCckIsRUFBSXNCLFNBQVdILEVBQU9HLFNBQ3RCdEIsRUFBSXVCLFlBQWNKLEVBQU9JLFlBQ3pCdkIsRUFBSXdCLFlBQWNMLEVBQU9LLFlBQ3pCeEIsRUFBSXlCLGNBQWdCTixFQUFPTSxjQUMzQnpCLEVBQUlHLEtBQU9ELEVBQU1DLEtBQ2pCSCxFQUFJMEIsUUFBVXhCLEVBQU13QixRQUNwQjFCLEVBQUkyQixPQUFTVixFQUFjVSxPQUUzQjFDLEVBQUFBLFdBQWtCZSxJQUNmNEIsa0JBQWtCLEVBQUVDLFlBQVksRUFBRUMsb0JBQW9CLEVBQUVDLGNBQWMsSUFBSUMsR0FBRyxTQUFTckQsRUFBUVUsRUFBT0osR0FDeEcsWUFXQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTMEMsR0FBTUMsR0FDYixNQUFLQSxJQUVMQSxFQUFLL0IsS0FBTyxTQUFVZ0MsR0FDcEIsTUFBT0MsR0FBQUEsV0FBWWpDLEtBQUtnQyxFQUFRRCxJQUVsQ0EsRUFBS1IsUUFBVSxTQUFVUyxHQUN2QixNQUFPQyxHQUFBQSxXQUFZVixRQUFRUyxFQUFRRCxJQUVyQ0EsRUFBS2QsT0FBUyxTQUFVZSxHQUN0QixHQUFJRSxHQUFVRCxFQUFBQSxXQUFZaEIsT0FBT2UsRUFJakMsT0FGQUQsR0FBS0ksWUFBWUQsR0FFVkEsR0FHVEgsRUFBS2IsSUFBTSxTQUFVa0IsR0FDbkIsTUFBT0gsR0FBQUEsV0FBWWYsSUFBSWEsRUFBTUssSUFFL0JMLEVBQUtaLFNBQVcsU0FBVWtCLEdBQ3hCLE1BQU9KLEdBQUFBLFdBQVlkLFNBQVNZLEVBQU1NLElBRXBDTixFQUFLWCxZQUFjLFNBQVVrQixHQUMzQixNQUFPTCxHQUFBQSxXQUFZYixZQUFZVyxFQUFNTyxJQUV2Q1AsRUFBS1YsWUFBYyxTQUFVa0IsRUFBV0MsR0FDdEMsTUFBT1AsR0FBQUEsV0FBWVosWUFBWVUsRUFBTVEsRUFBV0MsSUFFbERULEVBQUtULGNBQWdCLFNBQVVpQixHQUM3QixNQUFPTixHQUFBQSxXQUFZWCxjQUFjUyxFQUFNUSxJQUV6Q1IsRUFBS1AsT0FBUyxXQUNaLEdBQUlpQixHQUFlckMsVUFBVXBCLFFBQVUsR0FBc0J5QixTQUFqQkwsVUFBVSxHQUFtQjJCLEVBQU8zQixVQUFVLEdBRXRGc0MsRUFBVVQsRUFBQUEsV0FBWVQsT0FBT2lCLEVBR2pDLE9BRkFWLEdBQU8sS0FFQVcsR0FHRlgsR0F4Q1csS0FacEJ2QyxPQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLElBRVQ5QixFQUFBQSxXQUFrQmdELENBRWxCLElBQUlhLEdBQUtuRSxFQUFRLFVBRWJ5RCxFQUFNdEMsRUFBdUJnRCxLQStDOUJDLFNBQVMsSUFBSUMsR0FBRyxTQUFTckUsRUFBUVUsRUFBT0osR0FDM0MsWUFZQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTWSxHQUFLZ0MsR0FDWixHQUFJYyxHQUFjMUMsVUFBVXBCLFFBQVUsR0FBc0J5QixTQUFqQkwsVUFBVSxHQUFtQjJDLFNBQVczQyxVQUFVLEVBRTdGLFFBQVEsRUFBRzRDLEVBQUFBLFlBQWlCRixFQUFZRyxjQUFjakIsSUFHeEQsUUFBU1QsR0FBUVMsR0FDZixHQUFJYyxHQUFjMUMsVUFBVXBCLFFBQVUsR0FBc0J5QixTQUFqQkwsVUFBVSxHQUFtQjJDLFNBQVczQyxVQUFVLEVBRTdGLE9BQU8wQyxHQUFZSSxpQkFBaUJsQixHQXJCdEN4QyxPQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLElBRVQ5QixFQUFRa0IsS0FBT0EsRUFDZmxCLEVBQVF5QyxRQUFVQSxDQUVsQixJQUFJNEIsR0FBUzNFLEVBQVEsV0FFakJ3RSxFQUFVckQsRUFBdUJ3RCxLQWVsQ0MsVUFBVSxJQUFJQyxHQUFHLFNBQVM3RSxFQUFRVSxFQUFPSixHQUM1QyxZQVlBLFNBQVNhLEdBQXVCUCxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFRLFVBQVNSLEdBRXZGLFFBQVM2QixHQUFPZSxHQUNkLEdBQUlzQixHQUFXUCxTQUFTUSx5QkFDcEJyQixFQUFVb0IsRUFBU25CLFlBQVlZLFNBQVNTLGNBQWMsT0FRMUQsT0FOQXRCLEdBQVF1QixVQUFZekIsRUFBTzBCLE9BRU8sSUFBOUJ4QixFQUFReUIsV0FBVzNFLFNBQ3JCa0QsRUFBVUEsRUFBUTBCLFlBR1osRUFBR1osRUFBQUEsWUFBaUJkLEVBQVEyQixXQUFVLElBR2hELFFBQVNyQyxHQUFPTyxHQUNkLE1BQUlBLEdBQUsrQixXQUNBL0IsRUFBSytCLFdBQVdDLFlBQVloQyxHQUc5QixLQTlCVHZDLE9BQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVFtQyxPQUFTQSxFQUNqQm5DLEVBQVEwQyxPQUFTQSxDQUVqQixJQUFJMkIsR0FBUzNFLEVBQVEsY0FFakJ3RSxFQUFVckQsRUFBdUJ3RCxLQXdCbENhLGFBQWEsSUFBSUMsR0FBRyxTQUFTekYsRUFBUVUsRUFBT0osR0FDL0MsWUFlQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQW9CdkYsUUFBUzhCLEdBQUlhLEVBQU1LLEdBQ2pCLElBQUtMLEdBQTBCLElBQWxCQSxFQUFLbUMsVUFBb0MsSUFBbEJuQyxFQUFLbUMsV0FBbUJuQyxFQUFLb0MsTUFDL0QsTUFBTyxLQUdULEtBQUssR0FBSTVFLEtBQU82QyxHQUNkLEdBQUk1QyxPQUFPRSxlQUFlWCxLQUFLcUQsRUFBVzdDLEdBQU0sQ0FDOUMsR0FBSTZFLEdBQWNDLEdBQ2hCQyxVQUFXdkMsRUFBS29DLE1BQ2hCSSxhQUFjaEYsR0FHWjZFLEtBQ0ZyQyxFQUFLb0MsTUFBTUMsR0FBZWhDLEVBQVU3QyxJQUsxQyxPQUFRLEVBQUd5RCxFQUFBQSxZQUFpQmpCLEdBRzlCLFFBQVNaLEdBQVNZLEVBQU1NLEdBQ3RCLEdBQUltQyxHQUFtQnpDLEVBQUswQyxhQUFhLFVBQVksRUFJckQsSUFGQXBDLEVBQVlxQyxFQUFXckMsT0FFbkJBLFlBQXFCcEMsT0FDdkIsSUFBSyxHQUFJeEIsR0FBSSxFQUFHTyxFQUFTcUQsRUFBVXJELE9BQVlBLEVBQUpQLEVBQVlBLElBQUssQ0FDMUQsSUFBSzRELEVBQVU1RCxHQUFHaUYsT0FDaEIsS0FBTSxJQUFJaUIsYUFBWSx5REFHbkJDLEdBQXNCSixFQUFrQm5DLEVBQVU1RCxNQUNyRCtGLEdBQW9CLElBQU1uQyxFQUFVNUQsR0FBR2lGLFFBTzdDLE1BRkEzQixHQUFLOEMsYUFBYSxRQUFTTCxFQUFpQmQsU0FFcEMsRUFBR1YsRUFBQUEsWUFBaUJqQixHQUc5QixRQUFTVCxHQUFjUyxFQUFNUSxHQUMzQixJQUFLUixFQUNILEtBQU0sSUFBSXBELE9BQU0saUNBS2xCLE9BRkFtRyxHQUFnQnZDLEdBRVRxQyxFQUFzQjdDLEVBQUswQyxhQUFhLFNBQVVsQyxHQUczRCxRQUFTbkIsR0FBWVcsRUFBTU8sR0FDekIsR0FBSWtDLEdBQW1CTyxFQUFvQmhELEVBSTNDLElBRkFPLEVBQWdCb0MsRUFBV3BDLFFBRXRCa0MsRUFBaUJ4RixTQUFXc0QsRUFBY3RELE9BQzdDLE9BQVEsRUFBR2dFLEVBQUFBLFlBQWlCakIsRUFHOUIsSUFBSU8sWUFBeUJyQyxPQUMzQitFLEVBQTBCLElBQUssR0FBSXZHLEdBQUksRUFBR08sRUFBU3NELEVBQWN0RCxPQUFZQSxFQUFKUCxFQUFZQSxJQUFLLENBQ3hGLEdBQUk4RCxHQUFZRCxFQUFjN0QsRUFDOUJxRyxHQUFnQnZDLEVBRWEsS0FBSyxHQUFJMEMsR0FBSSxFQUFHQyxFQUFVVixFQUFpQnhGLE9BQVlrRyxFQUFKRCxFQUFhQSxJQUMzRixHQUFJMUMsSUFBY2lDLEVBQWlCUyxHQUFJLENBQ3JDVCxFQUFpQlcsT0FBT0YsRUFBRyxFQUMzQixTQUFTRCxJQVFqQixNQUZBakQsR0FBSzhDLGFBQWEsUUFBU0wsRUFBaUJZLEtBQUssT0FFekMsRUFBR3BDLEVBQUFBLFlBQWlCakIsR0FHOUIsUUFBU1YsR0FBWVUsRUFBTVEsRUFBV0MsR0FDcEMsSUFBS1QsRUFDSCxLQUFNLElBQUlwRCxPQUFNLGlDQUdsQm1HLEdBQWdCdkMsRUFFaEIsSUFBSWlDLEdBQW1CTyxFQUFvQmhELEVBWTNDLE9BVkk2QyxHQUFzQkosRUFBa0JqQyxHQUNyQ0MsR0FDSHBCLEVBQVlXLEVBQU1RLEdBR2hCQyxLQUFVLEdBQ1pyQixFQUFTWSxFQUFNUSxJQUlYLEVBQUdTLEVBQUFBLFlBQWlCakIsR0FHOUIsUUFBU2dELEdBQW9CaEQsR0FDM0IsTUFBTzJDLEdBQVczQyxFQUFLMEMsYUFBYSxjQUd0QyxRQUFTSyxHQUFnQnZDLEdBQ3ZCLElBQUtBLEVBQ0gsS0FBTSxJQUFJNUQsT0FBTSw0QkFBK0I0RCxFQUFZLHdCQUc3RCxJQUFJOEMsRUFBb0I5QyxHQUN0QixLQUFNLElBQUk1RCxPQUFNLDRCQUErQjRELEVBQVksMkRBSS9ELFFBQVM4QyxHQUFvQnJELEdBQzNCLE1BQU9BLEdBQU9zRCxNQUFNLE1BR3RCLFFBQVNWLEdBQXNCdkMsRUFBV2tELEdBQ3hDbEQsRUFBWXFDLEVBQVdyQyxNQUV2QixLQUFLLEdBQUk1RCxHQUFJLEVBQUdPLEVBQVNxRCxFQUFVckQsT0FBWUEsRUFBSlAsRUFBWUEsSUFDckQsR0FBSTRELEVBQVU1RCxHQUFHaUYsU0FBVzZCLEVBQWE3QixPQUN2QyxPQUFPLENBSVgsUUFBTyxFQUdULFFBQVNnQixHQUFXckMsR0FLbEIsTUFKeUIsZ0JBQWRBLEtBQ1RBLEVBQVlBLEVBQVVtRCxNQUFNLE1BR3ZCbkQsRUFHVCxRQUFTZ0MsR0FBc0JvQixHQUM3QixHQUFJbkIsR0FBWW1CLEVBQUtuQixVQUNqQkMsRUFBZWtCLEVBQUtsQixZQUV4QixJQUFJQSxJQUFnQkQsR0FDbEIsTUFBT0MsRUFHVCxJQUFJQSxJQUFnQm1CLEdBQ2xCLE1BQU9BLEdBQWFuQixFQUd0QixLQUFLLEdBQUk5RixHQUFJLEVBQUdPLEVBQVMyRyxFQUFVM0csT0FBWUEsRUFBSlAsRUFBWUEsSUFBSyxDQUMxRCxHQUFJbUgsR0FBa0IsR0FBS0QsRUFBVWxILEdBQUs4RixFQUFhLEdBQUdzQixjQUFnQnRCLEVBQWF1QixVQUFVLEVBRWpHLElBQUlGLElBQW1CdEIsR0FFckIsTUFEQW9CLEdBQWFuQixHQUFnQnFCLEVBQ3RCRixFQUFhbkIsR0FJeEIsT0FBTyxFQW5NVC9FLE9BQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVFvQyxJQUFNQSxFQUNkcEMsRUFBUXFDLFNBQVdBLEVBQ25CckMsRUFBUXdDLGNBQWdCQSxFQUN4QnhDLEVBQVFzQyxZQUFjQSxFQUN0QnRDLEVBQVF1QyxZQUFjQSxDQUV0QixJQUFJOEIsR0FBUzNFLEVBQVEsV0FFakJ3RSxFQUFVckQsRUFBdUJ3RCxHQUtqQzRDLEVBQUssS0FFTEMsRUFBUyxTQUVUQyxFQUFNLE1BRU5DLEVBQUksSUFDSkMsRUFBSyxLQUVMQyxFQUFRLFFBRVJULEdBQWFJLEVBQUlDLEVBQVFDLEVBQUtDLEVBQUdDLEVBQUlDLEdBRXJDVixHQUNGVyxRQUFPLGNBdUtOakQsVUFBVSxJQUFJa0QsR0FBRyxTQUFTOUgsRUFBUVUsRUFBT0osSUFDNUMsU0FBV3lILEdBQ1gsWUFNQSxTQUFTNUcsR0FBdUJQLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUVEsVUFBU1IsR0FKdkYsR0FBSXVELEdBQUtuRSxFQUFRLGNBRWJ5RCxFQUFNdEMsRUFBdUJnRCxFQUlWLGlCQUFaN0QsSUFBMEMsbUJBQVhJLEdBQ3hDQSxFQUFPSixRQUFVbUQsRUFBQUEsV0FDVSxrQkFBWHVFLFNBQXlCQSxPQUFPQyxLQUNoREQsVUFBVyxXQUNULE1BQU92RSxHQUFBQSxZQUlYLElBQUl5RSxHQUFVakcsTUFHWmlHLEdBRG9CLG1CQUFYQyxRQUNDQSxPQUNpQixtQkFBWEosR0FDTkEsRUFDZSxtQkFBVEssTUFDTkEsS0FFQW5HLE9BR1ppRyxFQUFRN0csSUFBTW9DLEVBQUFBLGFBQ1hsRCxLQUFLOEgsS0FBdUIsbUJBQVhOLFFBQXlCQSxPQUF5QixtQkFBVEssTUFBdUJBLEtBQXlCLG1CQUFYRCxRQUF5QkEsYUFFeEhHLGFBQWEsSUFBSUMsR0FBRyxTQUFTdkksRUFBUVUsRUFBT0osR0FDL0MsWUFNQSxTQUFTa0ksR0FBNkJDLEdBS3BDLElBQUssR0FKREMsR0FBTUQsRUFBZUMsSUFFckJDLEVBQVMxRyxPQUVKTixFQUFPQyxVQUFVcEIsT0FBUXFCLEVBQVNKLE1BQU1FLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlHLEVBQU8sRUFBVUgsRUFBUEcsRUFBYUEsSUFDaEdELEVBQU9DLEVBQU8sR0FBS0YsVUFBVUUsRUFxQi9CLE9BbEJBNkcsR0FBUzlHLEVBQU8rRyxPQUFPLFNBQVVELEVBQVFFLEVBQU81SSxHQUM5QyxHQUFJNkksR0FBTUosRUFBSXpJLEVBWWQsT0FWQTRJLEdBQVFwSCxNQUFNQyxRQUFRbUgsR0FBU0EsRUFBTWpDLEtBQUssSUFBTWlDLEVBQVEsR0FFNUIsTUFBeEJDLEVBQUlBLEVBQUl0SSxPQUFTLEtBQ25CcUksRUFBUUUsRUFBV0YsR0FDbkJDLEVBQU1BLEVBQUlFLE1BQU0sRUFBRyxLQUdyQkwsR0FBVUcsRUFDVkgsR0FBVUUsR0FHVCxJQUVIRixHQUFVRCxFQUFJQSxFQUFJbEksT0FBUyxHQUs3QixRQUFTdUksR0FBV0UsR0FDbEIsTUFBT0EsR0FBSUMsUUFBUSxLQUFNLFNBQVNBLFFBQVEsS0FBTSxRQUFRQSxRQUFRLEtBQU0sUUFBUUEsUUFBUSxLQUFNLFdBQVdBLFFBQVEsS0FBTSxTQUFTQSxRQUFRLEtBQU0sU0FuQzlJbEksT0FBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxJQUVUOUIsRUFBQUEsV0FBa0JrSSxPQWtDWlcsR0FBRyxTQUFTbkosRUFBUVUsRUFBT0osR0FDakMsWUFjQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTd0ksR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FkaEgsR0FBSUMsR0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSTFKLEdBQUksRUFBR0EsRUFBSTBKLEVBQU1uSixPQUFRUCxJQUFLLENBQUUsR0FBSTJKLEdBQWFELEVBQU0xSixFQUFJMkosR0FBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsU0FBV0YsS0FBWUEsRUFBV0csVUFBVyxHQUFNL0ksT0FBT21CLGVBQWV1SCxFQUFRRSxFQUFXN0ksSUFBSzZJLElBQWlCLE1BQU8sVUFBVU4sRUFBYVUsRUFBWUMsR0FBaUosTUFBOUhELElBQVlQLEVBQWlCSCxFQUFZckksVUFBVytJLEdBQWlCQyxHQUFhUixFQUFpQkgsRUFBYVcsR0FBcUJYLEtBRWppQnRJLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sR0FHVCxJQUFJOEgsR0FBc0JsSyxFQUFRLDRCQUU5Qm1LLEVBQXVCaEosRUFBdUIrSSxHQUU5Q0UsRUFBU3BLLEVBQVEscUJBTWpCcUssRUFBa0IsV0FDcEIsUUFBU0EsS0FDUGpCLEVBQWdCZixLQUFNZ0MsR0FxQnhCLE1BbEJBYixHQUFhYSxFQUFpQixPQUM1QnRKLElBQUssY0FDTHFCLE1BQU8sU0FBcUJBLEdBQzFCK0gsRUFBQUEsV0FBNkJHLFVBQzNCQyxLQUFNRixFQUFnQkcsY0FDdEJDLEtBQU1ySSxPQUlWckIsSUFBSyxhQUNMcUIsTUFBTyxTQUFvQnNJLEdBQ3pCUCxFQUFBQSxXQUE2QkcsVUFDM0JDLEtBQU1GLEVBQWdCTSxhQUN0QkYsS0FBTUMsUUFLTEwsSUFHVC9KLEdBQUFBLFdBQWtCK0osR0FFakIsRUFBR0QsRUFBT1EscUJBQXFCUCxFQUFpQixnQkFBaUJRLFdBQ2pFLEVBQUdULEVBQU9RLHFCQUFxQlAsRUFBaUIsZUFBZ0JRLFlBRTlEQyxvQkFBb0IsR0FBR0MsMkJBQTJCLEtBQUtDLEdBQUcsU0FBU2hMLEVBQVFVLEVBQU9KLEdBQ3JGLFlBUUEsU0FBUzhJLEdBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBTmhILEdBQUlDLEdBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUkxSixHQUFJLEVBQUdBLEVBQUkwSixFQUFNbkosT0FBUVAsSUFBSyxDQUFFLEdBQUkySixHQUFhRCxFQUFNMUosRUFBSTJKLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTS9JLE9BQU9tQixlQUFldUgsRUFBUUUsRUFBVzdJLElBQUs2SSxJQUFpQixNQUFPLFVBQVVOLEVBQWFVLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZUCxFQUFpQkgsRUFBWXJJLFVBQVcrSSxHQUFpQkMsR0FBYVIsRUFBaUJILEVBQWFXLEdBQXFCWCxLQUVqaUJ0SSxRQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLEdBS1QsSUFBSTZJLEdBQVcsV0FDYixRQUFTQSxHQUFTaEUsR0FDaEIsR0FBSWlFLEdBQVlqRSxFQUFLeUQsS0FDakJBLEVBQXFCekksU0FBZGlKLEVBQTBCLEtBQU9BLEVBQ3hDQyxFQUFhbEUsRUFBSzdFLE1BQ2xCQSxFQUF1QkgsU0FBZmtKLEVBQTJCLEVBQUlBLENBRTNDL0IsR0FBZ0JmLEtBQU00QyxHQUV0QjVDLEtBQUtxQyxLQUFPQSxFQUNackMsS0FBS2pHLE1BQVFBLEVBVWYsTUFQQW9ILEdBQWF5QixJQUNYbEssSUFBSyxXQUNMcUIsTUFBTyxTQUFrQkEsR0FDdkJpRyxLQUFLakcsTUFBUWdKLFNBQVNoSixPQUluQjZJLElBR1QzSyxHQUFBQSxXQUFrQjJLLE9BRVpJLElBQUksU0FBU3JMLEVBQVFVLEVBQU9KLEdBQ2xDLFlBVUEsU0FBU2EsR0FBdUJQLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUVEsVUFBU1IsR0FSdkZJLE9BQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sR0FHVCxJQUFJa0osR0FBY3RMLEVBQVEsMEJBRXRCdUwsRUFBZXBLLEVBQXVCbUssRUFJMUNoTCxHQUFBQSxXQUFrQixHQUFJaUwsR0FBQUEsYUFFbkJDLHlCQUF5QixLQUFLQyxJQUFJLFNBQVN6TCxFQUFRVSxFQUFPSixHQUM3RCxZQXFCQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTOEssR0FBdUJDLEVBQVNqRCxHQUFPLE1BQU8xSCxRQUFPNEssT0FBTzVLLE9BQU95SSxpQkFBaUJrQyxHQUFXakQsS0FBT3RHLE1BQU9wQixPQUFPNEssT0FBT2xELE9BZXBJLFFBQVNtRCxHQUFXQyxHQUNsQkMsRUFBV0MsVUFBWUYsRUFBV3JKLE9BQU93SixFQUFVQyxNQUNuREMsRUFBY0wsR0FDZE0sSUFFQUMsRUFBZ0IsR0FBSUMsR0FBQUEsV0FDcEJELEVBQWNFLFNBQVMsV0FDckJDLEVBQVlILEVBQWNJLFNBQVMvQixRQUdyQ2dDLEVBQUFBLFdBQTBCQyxXQUFXLE1BQ3JDTixFQUFjTyxxQkFHaEIsUUFBU0osR0FBWTlCLEdBQ25CcUIsRUFBV2MsTUFBTTVILFVBQVl5RixFQUcvQixRQUFTeUIsR0FBY0wsR0FDckJDLEVBQVdELFdBQWFBLEVBQ3hCQyxFQUFXZSxPQUFTZixFQUFXQyxVQUFVeEssS0FBSyx1QkFDOUN1SyxFQUFXYyxNQUFRZCxFQUFXQyxVQUFVeEssS0FBSyxzQkFHL0MsUUFBUzRLLEtBQ1BMLEVBQVdlLE9BQU9DLGlCQUFpQixRQUFTLFNBQVVDLEdBQ3BETixFQUFBQSxXQUEwQk8sWUFBWUQsRUFBTXRELE9BQU90SCxTQTlEdkQsR0FBSThLLEdBQWtCeEIsR0FBd0IsNExBQTZMLDJMQUUzTzFLLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVF1TCxXQUFhQSxDQUVyQixJQUFJc0IsR0FBT25OLEVBQVEsVUFFZm9OLEVBQVFqTSxFQUF1QmdNLEdBRS9CRSxFQUFtQnJOLEVBQVEseUJBRTNCME0sRUFBb0J2TCxFQUF1QmtNLEdBRTNDQyxFQUFpQnROLEVBQVEsdUJBRXpCc00sRUFBa0JuTCxFQUF1Qm1NLEdBTXpDckIsR0FDRkMsTUFBTyxFQUFHa0IsRUFBQUEsWUFBZUYsSUFHdkJuQixHQUNGRCxXQUFZLEtBQ1pFLFVBQVcsS0FDWGMsT0FBUSxLQUNSRCxNQUFPLE1BR0xSLEVBQWdCcEssU0FnQ2pCc0wsd0JBQXdCLEVBQUVDLHNCQUFzQixHQUFHQyxTQUFTLElBQUlDLElBQUksU0FBUzFOLEVBQVFVLEVBQU9KLEdBQy9GLFlBd0JBLFNBQVNhLEdBQXVCUCxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFRLFVBQVNSLEdBRXZGLFFBQVN3SSxHQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQUVoSCxRQUFTb0UsR0FBMkJ2RixFQUFNN0gsR0FBUSxJQUFLNkgsRUFBUSxLQUFNLElBQUl3RixnQkFBZSw0REFBZ0UsUUFBT3JOLEdBQXlCLGdCQUFUQSxJQUFxQyxrQkFBVEEsR0FBOEI2SCxFQUFQN0gsRUFFbE8sUUFBU3NOLEdBQVVDLEVBQVVDLEdBQWMsR0FBMEIsa0JBQWZBLElBQTRDLE9BQWZBLEVBQXVCLEtBQU0sSUFBSXhFLFdBQVUsaUVBQW9Fd0UsR0FBZUQsR0FBUzdNLFVBQVlELE9BQU95QixPQUFPc0wsR0FBY0EsRUFBVzlNLFdBQWErTSxhQUFlNUwsTUFBTzBMLEVBQVVqRSxZQUFZLEVBQU9FLFVBQVUsRUFBTUQsY0FBYyxLQUFlaUUsSUFBWS9NLE9BQU9pTixlQUFpQmpOLE9BQU9pTixlQUFlSCxFQUFVQyxHQUFjRCxFQUFTSSxVQUFZSCxHQTVCamUsR0FBSXZFLEdBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUkxSixHQUFJLEVBQUdBLEVBQUkwSixFQUFNbkosT0FBUVAsSUFBSyxDQUFFLEdBQUkySixHQUFhRCxFQUFNMUosRUFBSTJKLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTS9JLE9BQU9tQixlQUFldUgsRUFBUUUsRUFBVzdJLElBQUs2SSxJQUFpQixNQUFPLFVBQVVOLEVBQWFVLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZUCxFQUFpQkgsRUFBWXJJLFVBQVcrSSxHQUFpQkMsR0FBYVIsRUFBaUJILEVBQWFXLEdBQXFCWCxLQUVqaUJ0SSxRQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLEdBR1QsSUFBSStMLEdBQVNuTyxFQUFRLHFCQUVqQm9PLEVBQVVqTixFQUF1QmdOLEdBRWpDRSxFQUFpQnJPLEVBQVEsdUJBRXpCc08sRUFBa0JuTixFQUF1QmtOLEdBRXpDaEIsRUFBbUJyTixFQUFRLHlCQUUzQjBNLEVBQW9CdkwsRUFBdUJrTSxHQUUzQ25ELEVBQXNCbEssRUFBUSw0QkFFOUJtSyxFQUF1QmhKLEVBQXVCK0ksR0FVOUNxRSxFQUFnQixTQUFXQyxHQUc3QixRQUFTRCxLQUNQbkYsRUFBZ0JmLEtBQU1rRyxFQUV0QixJQUFJRSxHQUFRZCxFQUEyQnRGLEtBQU1ySCxPQUFPME4sZUFBZUgsR0FBZWhPLEtBQUs4SCxNQXlCdkYsT0F2QkFvRyxHQUFNaEMsU0FBVyxHQUFJNkIsR0FBQUEsZUFFckJHLEVBQU1FLFNBQVd4RSxFQUFBQSxXQUE2QnlFLFNBQVMsU0FBVUQsR0FDL0QsT0FBUUEsRUFBU3BFLE1BQ2YsSUFBS21DLEdBQUFBLFdBQTBCbEMsY0FDN0JpRSxFQUFNaEMsU0FBVyxHQUFJNkIsR0FBQUEsWUFDbkI1RCxLQUFNK0QsRUFBTWhDLFNBQVMvQixLQUNyQnRJLE1BQU91TSxFQUFTbEUsTUFHbEIsTUFFRixLQUFLaUMsR0FBQUEsV0FBMEIvQixhQUM3QjhELEVBQU1oQyxTQUFXLEdBQUk2QixHQUFBQSxZQUNuQmxNLE1BQU9xTSxFQUFNaEMsU0FBU3JLLE1BQ3RCc0ksS0FBTWlFLEVBQVNsRSxPQU1yQmdFLEVBQU1JLFdBRURKLEVBVVQsTUF4Q0FaLEdBQVVVLEVBQWVDLEdBaUN6QmhGLEVBQWErRSxJQUNYeE4sSUFBSyxxQkFDTHFCLE1BQU8sV0FDTCtILEVBQUFBLFdBQTZCMkUsV0FBV3pHLEtBQUtzRyxjQUkxQ0osR0FDTkgsRUFBQUEsV0FFSDlOLEdBQUFBLFdBQWtCaU8sSUFFZlEsb0JBQW9CLEdBQUd4Qix3QkFBd0IsRUFBRXlCLHNCQUFzQixFQUFFakUsMkJBQTJCLEtBQUtrRSxJQUFJLFNBQVNqUCxFQUFRVSxFQUFPSixHQUN4SSxZQWFBLFNBQVNhLEdBQXVCUCxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFRLFVBQVNSLEdBRXZGLFFBQVM4SyxHQUF1QkMsRUFBU2pELEdBQU8sTUFBTzFILFFBQU80SyxPQUFPNUssT0FBT3lJLGlCQUFpQmtDLEdBQVdqRCxLQUFPdEcsTUFBT3BCLE9BQU80SyxPQUFPbEQsT0FNcEksUUFBU21ELEdBQVdDLEdBQ2xCQSxFQUFXckosT0FBT3dKLEVBQVVDLE1BcEI5QixHQUFJZ0IsR0FBa0J4QixHQUF3QixxRkFBc0Ysb0ZBRXBJMUssUUFBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxJQUVUOUIsRUFBUXVMLFdBQWFBLENBRXJCLElBQUlzQixHQUFPbk4sRUFBUSxVQUVmb04sRUFBUWpNLEVBQXVCZ00sR0FNL0JsQixHQUNGQyxNQUFPLEVBQUdrQixFQUFBQSxZQUFlRixNQU94Qk8sU0FBUyxJQUFJeUIsSUFBSSxTQUFTbFAsRUFBUVUsRUFBT0osR0FDNUMsWUE0QkEsU0FBU0ssR0FBd0JDLEdBQU8sR0FBSUEsR0FBT0EsRUFBSUMsV0FBYyxNQUFPRCxFQUFjLElBQUlFLEtBQWEsSUFBVyxNQUFQRixFQUFlLElBQUssR0FBSUcsS0FBT0gsR0FBV0ksT0FBT0MsVUFBVUMsZUFBZVgsS0FBS0ssRUFBS0csS0FBTUQsRUFBT0MsR0FBT0gsRUFBSUcsR0FBZ0MsT0FBdEJELEdBQUFBLFdBQWlCRixFQUFZRSxFQUVsUSxRQUFTSyxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQTVCdkYsR0FBSXVNLEdBQU9uTixFQUFRLFVBRWZvTixFQUFRak0sRUFBdUJnTSxHQUUvQmdDLEVBQVVuUCxFQUFRLHNCQUVsQm9QLEVBQVN6TyxFQUF3QndPLEdBRWpDRSxFQUFtQnJQLEVBQVEsZ0NBRTNCc1AsRUFBa0IzTyxFQUF3QjBPLEdBRTFDRSxFQUFvQnZQLEVBQVEsa0NBRTVCd1AsRUFBbUI3TyxFQUF3QjRPLEdBRTNDRSxFQUFVOU8sRUFBd0I0TyxHQUVsQ0csRUFBWTFQLEVBQVEsMEJBRXBCMlAsRUFBV2hQLEVBQXdCK08sR0FFbkNFLEVBQVk1UCxFQUFRLDBCQUVwQnlNLEVBQVc5TCxFQUF3QmlQLEdBTW5DQyxHQUFvQixFQUFHekMsRUFBQUEsWUFBZSxpQkFDdEMwQyxHQUFvQixFQUFHMUMsRUFBQUEsWUFBZSwyQkFDdEMyQyxHQUFxQixFQUFHM0MsRUFBQUEsWUFBZSw0QkFFdkM0QyxHQUFrQnRGLEtBQU0sS0FDeEJ1RixHQUFrQnZGLEtBQU0sS0FFNUJpRixHQUFTTyxRQUNQeEYsS0FBTSxJQUNOeUYsUUFBUyxTQUFpQkMsR0FDeEJKLEVBQWdCSSxFQUNoQlgsRUFBUVksd0JBQ041RCxTQUFVd0QsRUFDVk4sU0FBVUssT0FLaEJ2RCxFQUFTeUQsUUFDUHhGLEtBQU0sS0FDTnlGLFFBQVMsU0FBaUJDLEdBQ3hCSCxFQUFnQkcsRUFDaEJYLEVBQVFZLHdCQUNONUQsU0FBVXdELEVBQ1ZOLFNBQVVLLE9BS2hCWixFQUFPdkQsV0FBV2dFLEdBQ2xCUCxFQUFnQnpELFdBQVdpRSxHQUMzQk4sRUFBaUIzRCxXQUFXa0UsR0FFNUJOLEVBQVFZLHdCQUNONUQsU0FBVXdELEVBQ1ZOLFNBQVVLLE1BR1RNLHlCQUF5QixHQUFHQyxxQkFBcUIsR0FBR0MsK0JBQStCLEdBQUdDLHlCQUF5QixHQUFHQyxpQ0FBaUMsR0FBR2pELFNBQVMsSUFBSWtELElBQUksU0FBUzNRLEVBQVFVLEVBQU9KLEdBQ2xNLFlBcUJBLFNBQVNLLEdBQXdCQyxHQUFPLEdBQUlBLEdBQU9BLEVBQUlDLFdBQWMsTUFBT0QsRUFBYyxJQUFJRSxLQUFhLElBQVcsTUFBUEYsRUFBZSxJQUFLLEdBQUlHLEtBQU9ILEdBQVdJLE9BQU9DLFVBQVVDLGVBQWVYLEtBQUtLLEVBQUtHLEtBQU1ELEVBQU9DLEdBQU9ILEVBQUlHLEdBQWdDLE9BQXRCRCxHQUFBQSxXQUFpQkYsRUFBWUUsRUFFbFEsUUFBU0ssR0FBdUJQLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUVEsVUFBU1IsR0FFdkYsUUFBUzhLLEdBQXVCQyxFQUFTakQsR0FBTyxNQUFPMUgsUUFBTzRLLE9BQU81SyxPQUFPeUksaUJBQWlCa0MsR0FBV2pELEtBQU90RyxNQUFPcEIsT0FBTzRLLE9BQU9sRCxPQWFwSSxRQUFTbUQsR0FBV0MsR0FDbEJDLEVBQVc2RSxnQkFBa0I5RSxFQUFXckosT0FBT3dKLEVBQVVDLE1BRXpEQyxFQUFjTCxHQUVkNkQsRUFBUzlELFdBQVdFLEVBQVc4RSxnQkFDL0JwRSxFQUFTWixXQUFXRSxFQUFXK0UsZ0JBR2pDLFFBQVMzRSxHQUFjTCxHQUNyQkMsRUFBV0QsV0FBYUEsRUFDeEJDLEVBQVc4RSxlQUFpQjlFLEVBQVc2RSxnQkFBZ0JwUCxLQUFLLG1CQUM1RHVLLEVBQVcrRSxlQUFpQi9FLEVBQVc2RSxnQkFBZ0JwUCxLQUFLLG1CQWhEOUQsR0FBSTBMLEdBQWtCeEIsR0FBd0Isc0tBQXVLLHFLQUVyTjFLLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVF1TCxXQUFhQSxDQUVyQixJQUFJc0IsR0FBT25OLEVBQVEsVUFFZm9OLEVBQVFqTSxFQUF1QmdNLEdBRS9CdUMsRUFBWTFQLEVBQVEsMkJBRXBCMlAsRUFBV2hQLEVBQXdCK08sR0FFbkNFLEVBQVk1UCxFQUFRLDJCQUVwQnlNLEVBQVc5TCxFQUF3QmlQLEdBUW5DM0QsR0FDRkMsTUFBTyxFQUFHa0IsRUFBQUEsWUFBZUYsSUFHdkJuQixHQUNGRCxXQUFZLEtBQ1o4RSxnQkFBaUIsS0FDakJDLGVBQWdCLEtBQ2hCQyxlQUFnQixRQWtCZkMsMEJBQTBCLEdBQUdDLDBCQUEwQixHQUFHdkQsU0FBUyxJQUFJd0QsSUFBSSxTQUFTalIsRUFBUVUsRUFBT0osR0FDdEcsWUFjQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTd0ksR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FkaEgsR0FBSUMsR0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSTFKLEdBQUksRUFBR0EsRUFBSTBKLEVBQU1uSixPQUFRUCxJQUFLLENBQUUsR0FBSTJKLEdBQWFELEVBQU0xSixFQUFJMkosR0FBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsU0FBV0YsS0FBWUEsRUFBV0csVUFBVyxHQUFNL0ksT0FBT21CLGVBQWV1SCxFQUFRRSxFQUFXN0ksSUFBSzZJLElBQWlCLE1BQU8sVUFBVU4sRUFBYVUsRUFBWUMsR0FBaUosTUFBOUhELElBQVlQLEVBQWlCSCxFQUFZckksVUFBVytJLEdBQWlCQyxHQUFhUixFQUFpQkgsRUFBYVcsR0FBcUJYLEtBRWppQnRJLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sR0FHVCxJQUFJOE8sR0FBc0JsUixFQUFRLDRCQUU5Qm1SLEVBQXVCaFEsRUFBdUIrUCxHQUU5QzlHLEVBQVNwSyxFQUFRLHFCQU1qQm9SLEVBQWtCLFdBQ3BCLFFBQVNBLEtBQ1BoSSxFQUFnQmYsS0FBTStJLEdBcUJ4QixNQWxCQTVILEdBQWE0SCxFQUFpQixPQUM1QnJRLElBQUssY0FDTHFCLE1BQU8sU0FBcUJBLEdBQzFCK08sRUFBQUEsV0FBNkI3RyxVQUMzQkMsS0FBTTZHLEVBQWdCNUcsY0FDdEJDLEtBQU1ySSxPQUlWckIsSUFBSyxhQUNMcUIsTUFBTyxTQUFvQnNJLEdBQ3pCeUcsRUFBQUEsV0FBNkI3RyxVQUMzQkMsS0FBTTZHLEVBQWdCekcsYUFDdEJGLEtBQU1DLFFBS0wwRyxJQUdUOVEsR0FBQUEsV0FBa0I4USxHQUVqQixFQUFHaEgsRUFBT1EscUJBQXFCd0csRUFBaUIsZ0JBQWlCdkcsV0FDakUsRUFBR1QsRUFBT1EscUJBQXFCd0csRUFBaUIsZUFBZ0J2RyxZQUU5REMsb0JBQW9CLEdBQUd1RywyQkFBMkIsS0FBS0MsSUFBSSxTQUFTdFIsRUFBUVUsRUFBT0osR0FDdEYsWUFRQSxTQUFTOEksR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FOaEgsR0FBSUMsR0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSTFKLEdBQUksRUFBR0EsRUFBSTBKLEVBQU1uSixPQUFRUCxJQUFLLENBQUUsR0FBSTJKLEdBQWFELEVBQU0xSixFQUFJMkosR0FBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsU0FBV0YsS0FBWUEsRUFBV0csVUFBVyxHQUFNL0ksT0FBT21CLGVBQWV1SCxFQUFRRSxFQUFXN0ksSUFBSzZJLElBQWlCLE1BQU8sVUFBVU4sRUFBYVUsRUFBWUMsR0FBaUosTUFBOUhELElBQVlQLEVBQWlCSCxFQUFZckksVUFBVytJLEdBQWlCQyxHQUFhUixFQUFpQkgsRUFBYVcsR0FBcUJYLEtBRWppQnRJLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sR0FLVCxJQUFJbVAsR0FBVyxXQUNiLFFBQVNBLEdBQVN0SyxHQUNoQixHQUFJaUUsR0FBWWpFLEVBQUt5RCxLQUNqQkEsRUFBcUJ6SSxTQUFkaUosRUFBMEIsSUFBTUEsRUFDdkNDLEVBQWFsRSxFQUFLN0UsTUFDbEJBLEVBQXVCSCxTQUFma0osRUFBMkIsRUFBSUEsQ0FFM0MvQixHQUFnQmYsS0FBTWtKLEdBRXRCbEosS0FBS3FDLEtBQU9BLEVBQ1pyQyxLQUFLakcsTUFBUUEsRUFVZixNQVBBb0gsR0FBYStILElBQ1h4USxJQUFLLFdBQ0xxQixNQUFPLFNBQWtCQSxHQUN2QmlHLEtBQUtqRyxNQUFRZ0osU0FBU2hKLE9BSW5CbVAsSUFHVGpSLEdBQUFBLFdBQWtCaVIsT0FFWkMsSUFBSSxTQUFTeFIsRUFBUVUsRUFBT0osR0FDbEMsWUFVQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQVJ2RkksT0FBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxHQUdULElBQUlrSixHQUFjdEwsRUFBUSwwQkFFdEJ1TCxFQUFlcEssRUFBdUJtSyxFQUkxQ2hMLEdBQUFBLFdBQWtCLEdBQUlpTCxHQUFBQSxhQUVuQkMseUJBQXlCLEtBQUtpRyxJQUFJLFNBQVN6UixFQUFRVSxFQUFPSixHQUM3RCxZQXFCQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTOEssR0FBdUJDLEVBQVNqRCxHQUFPLE1BQU8xSCxRQUFPNEssT0FBTzVLLE9BQU95SSxpQkFBaUJrQyxHQUFXakQsS0FBT3RHLE1BQU9wQixPQUFPNEssT0FBT2xELE9BZXBJLFFBQVNtRCxHQUFXQyxHQUNsQkMsRUFBVzJGLFVBQVk1RixFQUFXckosT0FBT3dKLEVBQVVDLE1BQ25EQyxFQUFjTCxHQUNkTSxJQUVBdUYsRUFBZ0IsR0FBSUMsR0FBQUEsV0FDcEJELEVBQWNwRixTQUFTLFdBQ3JCQyxFQUFZbUYsRUFBY2hDLFNBQVNqRixRQUdyQ21ILEVBQUFBLFdBQTBCbEYsV0FBVyxLQUNyQ2dGLEVBQWMvRSxxQkFHaEIsUUFBU0osR0FBWTlCLEdBQ25CcUIsRUFBV2MsTUFBTTVILFVBQVl5RixFQUcvQixRQUFTeUIsR0FBY0wsR0FDckJDLEVBQVdELFdBQWFBLEVBQ3hCQyxFQUFXZSxPQUFTZixFQUFXMkYsVUFBVWxRLEtBQUssdUJBQzlDdUssRUFBV2MsTUFBUWQsRUFBVzJGLFVBQVVsUSxLQUFLLHNCQUcvQyxRQUFTNEssS0FDUEwsRUFBV2UsT0FBT0MsaUJBQWlCLFFBQVMsU0FBVUMsR0FDcEQ2RSxFQUFBQSxXQUEwQjVFLFlBQVlELEVBQU10RCxPQUFPdEgsU0E5RHZELEdBQUk4SyxHQUFrQnhCLEdBQXdCLDRMQUE2TCwyTEFFM08xSyxRQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLElBRVQ5QixFQUFRdUwsV0FBYUEsQ0FFckIsSUFBSXNCLEdBQU9uTixFQUFRLFVBRWZvTixFQUFRak0sRUFBdUJnTSxHQUUvQjJFLEVBQW1COVIsRUFBUSx5QkFFM0I2UixFQUFvQjFRLEVBQXVCMlEsR0FFM0NDLEVBQWlCL1IsRUFBUSx1QkFFekI0UixFQUFrQnpRLEVBQXVCNFEsR0FNekM5RixHQUNGQyxNQUFPLEVBQUdrQixFQUFBQSxZQUFlRixJQUd2Qm5CLEdBQ0ZELFdBQVksS0FDWjRGLFVBQVcsS0FDWDVFLE9BQVEsS0FDUkQsTUFBTyxNQUdMOEUsRUFBZ0IxUCxTQWdDakIrUCx3QkFBd0IsR0FBR0Msc0JBQXNCLEdBQUd4RSxTQUFTLElBQUl5RSxJQUFJLFNBQVNsUyxFQUFRVSxFQUFPSixHQUNoRyxZQXdCQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTd0ksR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FFaEgsUUFBU29FLEdBQTJCdkYsRUFBTTdILEdBQVEsSUFBSzZILEVBQVEsS0FBTSxJQUFJd0YsZ0JBQWUsNERBQWdFLFFBQU9yTixHQUF5QixnQkFBVEEsSUFBcUMsa0JBQVRBLEdBQThCNkgsRUFBUDdILEVBRWxPLFFBQVNzTixHQUFVQyxFQUFVQyxHQUFjLEdBQTBCLGtCQUFmQSxJQUE0QyxPQUFmQSxFQUF1QixLQUFNLElBQUl4RSxXQUFVLGlFQUFvRXdFLEdBQWVELEdBQVM3TSxVQUFZRCxPQUFPeUIsT0FBT3NMLEdBQWNBLEVBQVc5TSxXQUFhK00sYUFBZTVMLE1BQU8wTCxFQUFVakUsWUFBWSxFQUFPRSxVQUFVLEVBQU1ELGNBQWMsS0FBZWlFLElBQVkvTSxPQUFPaU4sZUFBaUJqTixPQUFPaU4sZUFBZUgsRUFBVUMsR0FBY0QsRUFBU0ksVUFBWUgsR0E1QmplLEdBQUl2RSxHQUFlLFdBQWUsUUFBU0MsR0FBaUJDLEVBQVFDLEdBQVMsSUFBSyxHQUFJMUosR0FBSSxFQUFHQSxFQUFJMEosRUFBTW5KLE9BQVFQLElBQUssQ0FBRSxHQUFJMkosR0FBYUQsRUFBTTFKLEVBQUkySixHQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxTQUFXRixLQUFZQSxFQUFXRyxVQUFXLEdBQU0vSSxPQUFPbUIsZUFBZXVILEVBQVFFLEVBQVc3SSxJQUFLNkksSUFBaUIsTUFBTyxVQUFVTixFQUFhVSxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWVAsRUFBaUJILEVBQVlySSxVQUFXK0ksR0FBaUJDLEdBQWFSLEVBQWlCSCxFQUFhVyxHQUFxQlgsS0FFamlCdEksUUFBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxHQUdULElBQUkrTCxHQUFTbk8sRUFBUSxxQkFFakJvTyxFQUFVak4sRUFBdUJnTixHQUVqQ2dFLEVBQWlCblMsRUFBUSx1QkFFekJvUyxFQUFrQmpSLEVBQXVCZ1IsR0FFekNMLEVBQW1COVIsRUFBUSx5QkFFM0I2UixFQUFvQjFRLEVBQXVCMlEsR0FFM0NaLEVBQXNCbFIsRUFBUSw0QkFFOUJtUixFQUF1QmhRLEVBQXVCK1AsR0FVOUNtQixFQUFnQixTQUFXN0QsR0FHN0IsUUFBUzZELEtBQ1BqSixFQUFnQmYsS0FBTWdLLEVBRXRCLElBQUk1RCxHQUFRZCxFQUEyQnRGLEtBQU1ySCxPQUFPME4sZUFBZTJELEdBQWU5UixLQUFLOEgsTUF5QnZGLE9BdkJBb0csR0FBTWtCLFNBQVcsR0FBSXlDLEdBQUFBLGVBRXJCM0QsRUFBTUUsU0FBV3dDLEVBQUFBLFdBQTZCdkMsU0FBUyxTQUFVRCxHQUMvRCxPQUFRQSxFQUFTcEUsTUFDZixJQUFLc0gsR0FBQUEsV0FBMEJySCxjQUM3QmlFLEVBQU1rQixTQUFXLEdBQUl5QyxHQUFBQSxZQUNuQjFILEtBQU0rRCxFQUFNa0IsU0FBU2pGLEtBQ3JCdEksTUFBT3VNLEVBQVNsRSxNQUdsQixNQUVGLEtBQUtvSCxHQUFBQSxXQUEwQmxILGFBQzdCOEQsRUFBTWtCLFNBQVcsR0FBSXlDLEdBQUFBLFlBQ25CaFEsTUFBT3FNLEVBQU1rQixTQUFTdk4sTUFDdEJzSSxLQUFNaUUsRUFBU2xFLE9BTXJCZ0UsRUFBTUksV0FFREosRUFVVCxNQXhDQVosR0FBVXdFLEVBQWU3RCxHQWlDekJoRixFQUFhNkksSUFDWHRSLElBQUsscUJBQ0xxQixNQUFPLFdBQ0wrTyxFQUFBQSxXQUE2QnJDLFdBQVd6RyxLQUFLc0csY0FJMUMwRCxHQUNOakUsRUFBQUEsV0FFSDlOLEdBQUFBLFdBQWtCK1IsSUFFZnRELG9CQUFvQixHQUFHaUQsd0JBQXdCLEdBQUdNLHNCQUFzQixHQUFHakIsMkJBQTJCLEtBQUtrQixJQUFJLFNBQVN2UyxFQUFRVSxFQUFPSixHQUMxSSxZQVFBLFNBQVM4SSxHQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQU5oSCxHQUFJQyxHQUFlLFdBQWUsUUFBU0MsR0FBaUJDLEVBQVFDLEdBQVMsSUFBSyxHQUFJMUosR0FBSSxFQUFHQSxFQUFJMEosRUFBTW5KLE9BQVFQLElBQUssQ0FBRSxHQUFJMkosR0FBYUQsRUFBTTFKLEVBQUkySixHQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxTQUFXRixLQUFZQSxFQUFXRyxVQUFXLEdBQU0vSSxPQUFPbUIsZUFBZXVILEVBQVFFLEVBQVc3SSxJQUFLNkksSUFBaUIsTUFBTyxVQUFVTixFQUFhVSxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWVAsRUFBaUJILEVBQVlySSxVQUFXK0ksR0FBaUJDLEdBQWFSLEVBQWlCSCxFQUFhVyxHQUFxQlgsS0FFamlCdEksUUFBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxHQUtULElBQUlvUSxHQUFtQixXQUNyQixRQUFTQSxLQUNQcEosRUFBZ0JmLEtBQU1tSyxHQTJCeEIsTUF4QkFoSixHQUFhZ0osRUFBa0IsT0FDN0J6UixJQUFLLE9BQ0xxQixNQUFPLFNBQWM2RSxHQUNuQixHQUFJd0wsR0FBZ0J4TCxFQUFLMEksU0FDckJBLEVBQTZCMU4sU0FBbEJ3USxLQUFtQ0EsRUFDOUNDLEVBQWdCekwsRUFBS3dGLFNBQ3JCQSxFQUE2QnhLLFNBQWxCeVEsS0FBbUNBLEVBRTlDL0osR0FDRnZHLE1BQU8sRUFDUHNJLEtBQU0rQixFQUFTL0IsS0FBTyxJQUFNaUYsRUFBU2pGLEtBR3ZDLE9BQUtpRixHQUFTdk4sT0FBVXFLLEVBQVNySyxPQUlqQ3VHLEVBQU92RyxNQUFRcUssRUFBU3JLLE1BQVF1TixFQUFTdk4sTUFFekN1RyxFQUFPdkcsTUFBUXVHLEVBQU92RyxNQUFNdVEsV0FBV3JMLFVBQVUsRUFBRyxJQUM3Q3FCLEdBTkVBLE1BVU42SixJQUdUbFMsR0FBQUEsV0FBa0JrUyxPQUVaSSxJQUFJLFNBQVM1UyxFQUFRVSxFQUFPSixHQUNsQyxZQWlCQSxTQUFTYSxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTOEssR0FBdUJDLEVBQVNqRCxHQUFPLE1BQU8xSCxRQUFPNEssT0FBTzVLLE9BQU95SSxpQkFBaUJrQyxHQUFXakQsS0FBT3RHLE1BQU9wQixPQUFPNEssT0FBT2xELE9BZXBJLFFBQVNtRCxHQUFXQyxHQUNsQkMsRUFBVzhHLGlCQUFtQi9HLEVBQVdySixPQUFPd0osRUFBVUMsTUFDMURDLEVBQWNMLEdBRWRnSCxFQUF1QixHQUFJQyxHQUFBQSxXQUUzQkQsRUFBcUJ2RyxTQUFTLFdBQzVCOEQsRUFBdUJ5QyxFQUFxQnJELFdBRzlDcUQsRUFBcUJqRSxTQUd2QixRQUFTd0IsR0FBdUJaLEdBQzlCMUQsRUFBV2lILFVBQVUvTixVQUFZd0ssRUFBUS9FLEtBQ3pDcUIsRUFBV2tILFdBQVdoTyxVQUFZd0ssRUFBUXJOLE1BRzVDLFFBQVMrSixHQUFjTCxHQUNyQkMsRUFBV0QsV0FBYUEsRUFDeEJDLEVBQVdpSCxVQUFZakgsRUFBVzhHLGlCQUFpQnJSLEtBQUssWUFDeER1SyxFQUFXa0gsV0FBYWxILEVBQVc4RyxpQkFBaUJyUixLQUFLLGdCQXJEM0QsR0FBSTBMLEdBQWtCeEIsR0FBd0IseUlBQTBJLHdJQUV4TDFLLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVF1TCxXQUFhQSxDQUVyQixJQUFJc0IsR0FBT25OLEVBQVEsVUFFZm9OLEVBQVFqTSxFQUF1QmdNLEdBRS9CK0YsRUFBd0JsVCxFQUFRLCtCQUVoQytTLEVBQXlCNVIsRUFBdUIrUixHQU1oRGpILEdBQ0ZDLE1BQU8sRUFBR2tCLEVBQUFBLFlBQWVGLElBR3ZCbkIsR0FDRkQsV0FBWSxLQUNaK0csaUJBQWtCLEtBQ2xCRyxVQUFXLEtBQ1hDLFdBQVksTUFHVkgsRUFBdUI3USxTQTBCeEJrUiw4QkFBOEIsR0FBRzFGLFNBQVMsSUFBSTJGLElBQUksU0FBU3BULEVBQVFVLEVBQU9KLEdBQzdFLFlBc0JBLFNBQVNhLEdBQXVCUCxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFRLFVBQVNSLEdBRXZGLFFBQVN3SSxHQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQUVoSCxRQUFTb0UsR0FBMkJ2RixFQUFNN0gsR0FBUSxJQUFLNkgsRUFBUSxLQUFNLElBQUl3RixnQkFBZSw0REFBZ0UsUUFBT3JOLEdBQXlCLGdCQUFUQSxJQUFxQyxrQkFBVEEsR0FBOEI2SCxFQUFQN0gsRUFFbE8sUUFBU3NOLEdBQVVDLEVBQVVDLEdBQWMsR0FBMEIsa0JBQWZBLElBQTRDLE9BQWZBLEVBQXVCLEtBQU0sSUFBSXhFLFdBQVUsaUVBQW9Fd0UsR0FBZUQsR0FBUzdNLFVBQVlELE9BQU95QixPQUFPc0wsR0FBY0EsRUFBVzlNLFdBQWErTSxhQUFlNUwsTUFBTzBMLEVBQVVqRSxZQUFZLEVBQU9FLFVBQVUsRUFBTUQsY0FBYyxLQUFlaUUsSUFBWS9NLE9BQU9pTixlQUFpQmpOLE9BQU9pTixlQUFlSCxFQUFVQyxHQUFjRCxFQUFTSSxVQUFZSCxHQTFCamUvTSxPQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLEdBR1QsSUFBSStMLEdBQVNuTyxFQUFRLHdCQUVqQm9PLEVBQVVqTixFQUF1QmdOLEdBRWpDa0YsRUFBa0JyVCxFQUFRLHlCQUUxQnNULEVBQW1CblMsRUFBdUJrUyxHQUUxQ0UsRUFBcUJ2VCxFQUFRLDRCQUU3QndULEVBQXNCclMsRUFBdUJvUyxHQUU3Q0UsRUFBd0J6VCxFQUFRLCtCQUVoQzBULEVBQXlCdlMsRUFBdUJzUyxHQVVoREUsRUFBdUIsU0FBV25GLEdBR3BDLFFBQVNtRixLQUNQdkssRUFBZ0JmLEtBQU1zTCxFQUV0QixJQUFJbEYsR0FBUWQsRUFBMkJ0RixLQUFNckgsT0FBTzBOLGVBQWVpRixHQUFzQnBULEtBQUs4SCxNQWE5RixPQVhBb0csR0FBTWdCLFFBQVVpRSxFQUFBQSxXQUErQkUsU0FFL0NKLEVBQUFBLFdBQTRCNUUsU0FBUyxTQUFVRCxHQUM3QyxPQUFRQSxFQUFTcEUsTUFDZixJQUFLK0ksR0FBQUEsV0FBeUJPLGVBQzVCcEYsRUFBTWdCLFFBQVVpRSxFQUFBQSxXQUErQkUsS0FBS2pGLEVBQVNsRSxNQUM3RGdFLEVBQU1JLE9BQU9KLEVBQU1nQixZQUtsQmhCLEVBR1QsTUFyQkFaLEdBQVU4RixFQUFzQm5GLEdBcUJ6Qm1GLEdBQ052RixFQUFBQSxXQUVIOU4sR0FBQUEsV0FBa0JxVCxJQUVmRyx1QkFBdUIsR0FBR0Msd0JBQXdCLEdBQUdDLDJCQUEyQixHQUFHQyw4QkFBOEIsS0FBS0MsSUFBSSxTQUFTbFUsRUFBUVUsRUFBT0osR0FDckosWUFxQkEsU0FBU0ssR0FBd0JDLEdBQU8sR0FBSUEsR0FBT0EsRUFBSUMsV0FBYyxNQUFPRCxFQUFjLElBQUlFLEtBQWEsSUFBVyxNQUFQRixFQUFlLElBQUssR0FBSUcsS0FBT0gsR0FBV0ksT0FBT0MsVUFBVUMsZUFBZVgsS0FBS0ssRUFBS0csS0FBTUQsRUFBT0MsR0FBT0gsRUFBSUcsR0FBZ0MsT0FBdEJELEdBQUFBLFdBQWlCRixFQUFZRSxFQUVsUSxRQUFTSyxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQUV2RixRQUFTOEssR0FBdUJDLEVBQVNqRCxHQUFPLE1BQU8xSCxRQUFPNEssT0FBTzVLLE9BQU95SSxpQkFBaUJrQyxHQUFXakQsS0FBT3RHLE1BQU9wQixPQUFPNEssT0FBT2xELE9BY3BJLFFBQVNtRCxHQUFXQyxHQUNsQkMsRUFBV2dFLGtCQUFvQmpFLEVBQVdySixPQUFPd0osRUFBVUMsTUFDM0RDLEVBQWNMLEdBRWRxSSxFQUFlLEdBQUlDLEdBQUFBLFdBRW5CQyxFQUFleEksV0FBV0UsRUFBV3VJLGlCQUVyQ0gsRUFBYUksZ0JBR2YsUUFBU3BJLEdBQWNMLEdBQ3JCQyxFQUFXRCxXQUFhQSxFQUN4QkMsRUFBV3VJLGdCQUFrQnZJLEVBQVdnRSxrQkFBa0J2TyxLQUFLLDJCQWxEakUsR0FBSTBMLEdBQWtCeEIsR0FBd0IsbUlBQW9JLGtJQUVsTDFLLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVF1TCxXQUFhQSxDQUVyQixJQUFJc0IsR0FBT25OLEVBQVEsVUFFZm9OLEVBQVFqTSxFQUF1QmdNLEdBRS9CcUgsRUFBbUJ4VSxFQUFRLDBDQUUzQnFVLEVBQWlCMVQsRUFBd0I2VCxHQUV6Q0MsRUFBZ0J6VSxFQUFRLHNCQUV4Qm9VLEVBQWlCalQsRUFBdUJzVCxHQVF4Q04sRUFBZWxTLE9BRWZnSyxHQUNGQyxNQUFPLEVBQUdrQixFQUFBQSxZQUFlRixJQUd2Qm5CLEdBQ0ZELFdBQVksS0FDWmlFLGtCQUFtQixLQUNuQnVFLGdCQUFpQixRQW1CaEJJLHlDQUF5QyxHQUFHQyxxQkFBcUIsR0FBR2xILFNBQVMsSUFBSW1ILElBQUksU0FBUzVVLEVBQVFVLEVBQU9KLEdBQ2hILFlBY0EsU0FBU2EsR0FBdUJQLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUVEsVUFBU1IsR0FFdkYsUUFBU3dJLEdBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBZGhILEdBQUlDLEdBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUkxSixHQUFJLEVBQUdBLEVBQUkwSixFQUFNbkosT0FBUVAsSUFBSyxDQUFFLEdBQUkySixHQUFhRCxFQUFNMUosRUFBSTJKLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTS9JLE9BQU9tQixlQUFldUgsRUFBUUUsRUFBVzdJLElBQUs2SSxJQUFpQixNQUFPLFVBQVVOLEVBQWFVLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZUCxFQUFpQkgsRUFBWXJJLFVBQVcrSSxHQUFpQkMsR0FBYVIsRUFBaUJILEVBQWFXLEdBQXFCWCxLQUVqaUJ0SSxRQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLEdBR1QsSUFBSW1SLEdBQXFCdlQsRUFBUSwyQkFFN0J3VCxFQUFzQnJTLEVBQXVCb1MsR0FFN0NuSixFQUFTcEssRUFBUSxxQkFNakI2VSxFQUFpQixXQUNuQixRQUFTQSxLQUNQekwsRUFBZ0JmLEtBQU13TSxHQWF4QixNQVZBckwsR0FBYXFMLEVBQWdCLE9BQzNCOVQsSUFBSyxlQUNMcUIsTUFBTyxTQUFzQkEsR0FDM0JvUixFQUFBQSxXQUE0QmxKLFVBQzFCQyxLQUFNc0ssRUFBZWhCLGVBQ3JCcEosS0FBTXJJLFFBS0x5UyxJQUdUdlUsR0FBQUEsV0FBa0J1VSxHQUVqQixFQUFHekssRUFBT1EscUJBQXFCaUssRUFBZ0IsaUJBQWtCaEssWUFFL0RDLG9CQUFvQixHQUFHZ0ssMEJBQTBCLEtBQUtDLElBQUksU0FBUy9VLEVBQVFVLEVBQU9KLEdBQ3JGLFlBVUEsU0FBU2EsR0FBdUJQLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUVEsVUFBU1IsR0FSdkZJLE9BQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sR0FHVCxJQUFJa0osR0FBY3RMLEVBQVEsMEJBRXRCdUwsRUFBZXBLLEVBQXVCbUssRUFJMUNoTCxHQUFBQSxXQUFrQixHQUFJaUwsR0FBQUEsYUFFbkJDLHlCQUF5QixLQUFLd0osSUFBSSxTQUFTaFYsRUFBUVUsRUFBT0osR0FDN0QsWUF3Q0EsU0FBU2EsR0FBdUJQLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUVEsVUFBU1IsR0FFdkYsUUFBU3dJLEdBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBRWhILFFBQVNvRSxHQUEyQnZGLEVBQU03SCxHQUFRLElBQUs2SCxFQUFRLEtBQU0sSUFBSXdGLGdCQUFlLDREQUFnRSxRQUFPck4sR0FBeUIsZ0JBQVRBLElBQXFDLGtCQUFUQSxHQUE4QjZILEVBQVA3SCxFQUVsTyxRQUFTc04sR0FBVUMsRUFBVUMsR0FBYyxHQUEwQixrQkFBZkEsSUFBNEMsT0FBZkEsRUFBdUIsS0FBTSxJQUFJeEUsV0FBVSxpRUFBb0V3RSxHQUFlRCxHQUFTN00sVUFBWUQsT0FBT3lCLE9BQU9zTCxHQUFjQSxFQUFXOU0sV0FBYStNLGFBQWU1TCxNQUFPMEwsRUFBVWpFLFlBQVksRUFBT0UsVUFBVSxFQUFNRCxjQUFjLEtBQWVpRSxJQUFZL00sT0FBT2lOLGVBQWlCak4sT0FBT2lOLGVBQWVILEVBQVVDLEdBQWNELEVBQVNJLFVBQVlILEdBNUNqZSxHQUFJdkUsR0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSTFKLEdBQUksRUFBR0EsRUFBSTBKLEVBQU1uSixPQUFRUCxJQUFLLENBQUUsR0FBSTJKLEdBQWFELEVBQU0xSixFQUFJMkosR0FBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsU0FBV0YsS0FBWUEsRUFBV0csVUFBVyxHQUFNL0ksT0FBT21CLGVBQWV1SCxFQUFRRSxFQUFXN0ksSUFBSzZJLElBQWlCLE1BQU8sVUFBVU4sRUFBYVUsRUFBWUMsR0FBaUosTUFBOUhELElBQVlQLEVBQWlCSCxFQUFZckksVUFBVytJLEdBQWlCQyxHQUFhUixFQUFpQkgsRUFBYVcsR0FBcUJYLEtBRWppQnRJLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sR0FHVCxJQUFJK0wsR0FBU25PLEVBQVEscUJBRWpCb08sRUFBVWpOLEVBQXVCZ04sR0FFakNnRSxFQUFpQm5TLEVBQVEsaUNBRXpCb1MsRUFBa0JqUixFQUF1QmdSLEdBRXpDTCxFQUFtQjlSLEVBQVEsbUNBRTNCNlIsRUFBb0IxUSxFQUF1QjJRLEdBRTNDWixFQUFzQmxSLEVBQVEsc0NBRTlCbVIsRUFBdUJoUSxFQUF1QitQLEdBRTlDN0MsRUFBaUJyTyxFQUFRLGlDQUV6QnNPLEVBQWtCbk4sRUFBdUJrTixHQUV6Q2hCLEVBQW1Cck4sRUFBUSxtQ0FFM0IwTSxFQUFvQnZMLEVBQXVCa00sR0FFM0NuRCxFQUFzQmxLLEVBQVEsc0NBRTlCbUssRUFBdUJoSixFQUF1QitJLEdBRTlDbUosRUFBa0JyVCxFQUFRLHdCQUUxQnNULEVBQW1CblMsRUFBdUJrUyxHQVUxQzRCLEVBQWUsU0FBV3pHLEdBRzVCLFFBQVN5RyxLQUNQN0wsRUFBZ0JmLEtBQU00TSxFQUV0QixJQUFJeEcsR0FBUWQsRUFBMkJ0RixLQUFNckgsT0FBTzBOLGVBQWV1RyxHQUFjMVUsS0FBSzhILE1BZ0J0RixPQWRBb0csR0FBTWtCLFNBQVcsR0FBSXlDLEdBQUFBLGVBQ3JCM0QsRUFBTWhDLFNBQVcsR0FBSTZCLEdBQUFBLGVBRXJCNkMsRUFBQUEsV0FBNkJ2QyxTQUFTLFNBQVVELEdBQzlDRixFQUFNeUcscUJBQXFCdkcsR0FFM0JGLEVBQU04RixrQkFHUnBLLEVBQUFBLFdBQTZCeUUsU0FBUyxTQUFVRCxHQUM5Q0YsRUFBTTBHLHFCQUFxQnhHLEdBRTNCRixFQUFNOEYsa0JBRUQ5RixFQTJEVCxNQWhGQVosR0FBVW9ILEVBQWN6RyxHQXdCeEJoRixFQUFheUwsSUFDWGxVLElBQUssdUJBQ0xxQixNQUFPLFNBQThCdU0sR0FDbkMsT0FBUUEsRUFBU3BFLE1BQ2YsSUFBS3NILEdBQUFBLFdBQTBCckgsY0FDN0JuQyxLQUFLc0gsU0FBVyxHQUFJeUMsR0FBQUEsWUFDbEIxSCxLQUFNckMsS0FBS3NILFNBQVNqRixLQUNwQnRJLE1BQU91TSxFQUFTbEUsTUFHbEIsTUFFRixLQUFLb0gsR0FBQUEsV0FBMEJsSCxhQUM3QnRDLEtBQUtzSCxTQUFXLEdBQUl5QyxHQUFBQSxZQUNsQmhRLE1BQU9pRyxLQUFLc0gsU0FBU3ZOLE1BQ3JCc0ksS0FBTWlFLEVBQVNsRSxPQU1yQnBDLEtBQUt3RyxZQUdQOU4sSUFBSyx1QkFDTHFCLE1BQU8sU0FBOEJ1TSxHQUNuQyxPQUFRQSxFQUFTcEUsTUFDZixJQUFLbUMsR0FBQUEsV0FBMEJsQyxjQUM3Qm5DLEtBQUtvRSxTQUFXLEdBQUk2QixHQUFBQSxZQUNsQjVELEtBQU1yQyxLQUFLb0UsU0FBUy9CLEtBQ3BCdEksTUFBT3VNLEVBQVNsRSxNQUdsQixNQUVGLEtBQUtpQyxHQUFBQSxXQUEwQi9CLGFBQzdCdEMsS0FBS29FLFNBQVcsR0FBSTZCLEdBQUFBLFlBQ2xCbE0sTUFBT2lHLEtBQUtvRSxTQUFTckssTUFDckJzSSxLQUFNaUUsRUFBU2xFLE9BTXJCcEMsS0FBS3dHLFlBR1A5TixJQUFLLGdCQUNMcUIsTUFBTyxXQUNMa1IsRUFBQUEsV0FBeUI4QixjQUN2QnpGLFNBQVV0SCxLQUFLc0gsU0FDZmxELFNBQVVwRSxLQUFLb0UsZUFLZHdJLEdBQ043RyxFQUFBQSxXQUVIOU4sR0FBQUEsV0FBa0IyVSxJQUVmSSxrQ0FBa0MsRUFBRUMsZ0NBQWdDLEVBQUVDLHFDQUFxQyxHQUFHQyxrQ0FBa0MsR0FBR0MsZ0NBQWdDLEdBQUdDLHFDQUFxQyxHQUFHM0csb0JBQW9CLEdBQUc0Ryx1QkFBdUIsS0FBS0MsSUFBSSxTQUFTNVYsRUFBUVUsRUFBT0osR0FDaFQsWUFRQSxTQUFTOEksR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FOaEgsR0FBSUMsR0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSTFKLEdBQUksRUFBR0EsRUFBSTBKLEVBQU1uSixPQUFRUCxJQUFLLENBQUUsR0FBSTJKLEdBQWFELEVBQU0xSixFQUFJMkosR0FBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsU0FBV0YsS0FBWUEsRUFBV0csVUFBVyxHQUFNL0ksT0FBT21CLGVBQWV1SCxFQUFRRSxFQUFXN0ksSUFBSzZJLElBQWlCLE1BQU8sVUFBVU4sRUFBYVUsRUFBWUMsR0FBaUosTUFBOUhELElBQVlQLEVBQWlCSCxFQUFZckksVUFBVytJLEdBQWlCQyxHQUFhUixFQUFpQkgsRUFBYVcsR0FBcUJYLEtBRWppQnRJLFFBQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sR0FLVCxJQUFJeVQsR0FBYSxXQUNmLFFBQVNBLEtBQ1B6TSxFQUFnQmYsS0FBTXdOLEdBRXRCeE4sS0FBS3lOLFdBQWEsR0FBSUMsS0EwQnhCLE1BdkJBdk0sR0FBYXFNLElBQ1g5VSxJQUFLLFdBQ0xxQixNQUFPLFNBQWtCeEIsR0FDdkJ5SCxLQUFLeU4sV0FBV0UsUUFBUSxTQUFVckgsR0FDaEMsTUFBT0EsR0FBUy9OLFFBSXBCRyxJQUFLLFdBQ0xxQixNQUFPLFNBQWtCNlQsR0FDdkIsR0FBSXRILEdBQVc5RCxRQUlmLE9BRkF4QyxNQUFLeU4sV0FBV0ksSUFBSXZILEVBQVVzSCxHQUV2QnRILEtBR1Q1TixJQUFLLGFBQ0xxQixNQUFPLFNBQW9CdU0sR0FDekIsTUFBT3RHLE1BQUt5TixXQUFMek4sVUFBdUJzRyxPQUkzQmtILElBR1R2VixHQUFBQSxXQUFrQnVWLE9BRVpNLElBQUksU0FBU25XLEVBQVFVLEVBQU9KLEdBQ2xDLFlBUUEsU0FBUzhJLEdBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBTmhILEdBQUlDLEdBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUkxSixHQUFJLEVBQUdBLEVBQUkwSixFQUFNbkosT0FBUVAsSUFBSyxDQUFFLEdBQUkySixHQUFhRCxFQUFNMUosRUFBSTJKLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTS9JLE9BQU9tQixlQUFldUgsRUFBUUUsRUFBVzdJLElBQUs2SSxJQUFpQixNQUFPLFVBQVVOLEVBQWFVLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZUCxFQUFpQkgsRUFBWXJJLFVBQVcrSSxHQUFpQkMsR0FBYVIsRUFBaUJILEVBQWFXLEdBQXFCWCxLQUVqaUJ0SSxRQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLEdBS1QsSUFBSWdVLEdBQVEsV0FDVixRQUFTQSxLQUNQaE4sRUFBZ0JmLEtBQU0rTixHQUV0Qi9OLEtBQUt5TixXQUFhLEdBQUlDLEtBMEJ4QixNQXZCQXZNLEdBQWE0TSxJQUNYclYsSUFBSyxTQUNMcUIsTUFBTyxXQUNMaUcsS0FBS3lOLFdBQVdFLFFBQVEsU0FBVXJILEdBQ2hDLE1BQU9BLFVBSVg1TixJQUFLLFdBQ0xxQixNQUFPLFNBQWtCNlQsR0FDdkIsR0FBSXRILEdBQVc5RCxRQUlmLE9BRkF4QyxNQUFLeU4sV0FBV0ksSUFBSXZILEVBQVVzSCxHQUV2QnRILEtBR1Q1TixJQUFLLG1CQUNMcUIsTUFBTyxTQUEwQnVNLEdBQy9CLE1BQU90RyxNQUFLeU4sV0FBTHpOLFVBQXVCc0csT0FJM0J5SCxJQUdUOVYsR0FBQUEsV0FBa0I4VixPQUVaQyxJQUFJLFNBQVNyVyxFQUFRVSxFQUFPSixHQUNsQyxZQU1BLFNBQVNzSyxHQUFvQmhLLEVBQUswVixFQUFNbFUsR0FDdENwQixPQUFPbUIsZUFBZXZCLEVBQUswVixHQUN6QnpNLFlBQVksRUFDWkUsVUFBVSxFQUNWRCxjQUFjLEVBQ2QxSCxNQUFPQSxJQVRYcEIsT0FBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxJQUVUOUIsRUFBUXNLLG9CQUFzQkEsWUFVbkIiLCJmaWxlIjoiYnVuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9odG1sID0gcmVxdWlyZSgnLi4vdXRpbC9odG1sLmpzJyk7XG5cbnZhciBfaHRtbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9odG1sKTtcblxudmFyIF9tYW5pcHVsYXRpb24gPSByZXF1aXJlKCcuL21hbmlwdWxhdGlvbi5qcycpO1xuXG52YXIgX2ZpbmQgPSByZXF1aXJlKCcuL2ZpbmQuanMnKTtcblxudmFyIF9zdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcy5qcycpO1xuXG52YXIgc3R5bGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3N0eWxlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGRqcyh0ZW1wbGF0ZSkge1xuICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiAoMCwgX2ZpbmQuZmluZCkodGVtcGxhdGUpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGVtcGxhdGUpKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN1YnN0cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHN1YnN0c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9odG1sMi5kZWZhdWx0LmFwcGx5KHVuZGVmaW5lZCwgW3RlbXBsYXRlXS5jb25jYXQoc3Vic3RzKSk7XG4gIH1cbn1cblxuZGpzLmNyZWF0ZSA9IF9tYW5pcHVsYXRpb24uY3JlYXRlO1xuZGpzLmNzcyA9IHN0eWxlcy5jc3M7XG5kanMuYWRkQ2xhc3MgPSBzdHlsZXMuYWRkQ2xhc3M7XG5kanMucmVtb3ZlQ2xhc3MgPSBzdHlsZXMucmVtb3ZlQ2xhc3M7XG5kanMudG9nZ2xlQ2xhc3MgPSBzdHlsZXMudG9nZ2xlQ2xhc3M7XG5kanMuY29udGFpbnNDbGFzcyA9IHN0eWxlcy5jb250YWluc0NsYXNzO1xuZGpzLmZpbmQgPSBfZmluZC5maW5kO1xuZGpzLmZpbmRBbGwgPSBfZmluZC5maW5kQWxsO1xuZGpzLnJlbW92ZSA9IF9tYW5pcHVsYXRpb24ucmVtb3ZlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBkanM7XG59LHtcIi4uL3V0aWwvaHRtbC5qc1wiOjcsXCIuL2ZpbmQuanNcIjozLFwiLi9tYW5pcHVsYXRpb24uanNcIjo0LFwiLi9zdHlsZXMuanNcIjo1fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkanNmeTtcblxudmFyIF9kID0gcmVxdWlyZSgnLi9kLmpzJyk7XG5cbnZhciBfZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZGpzZnkobm9kZSkge1xuICBpZiAoIW5vZGUpIHJldHVybiBudWxsO1xuXG4gIG5vZGUuZmluZCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQuZmluZChzdHJpbmcsIG5vZGUpO1xuICB9O1xuICBub2RlLmZpbmRBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmZpbmRBbGwoc3RyaW5nLCBub2RlKTtcbiAgfTtcbiAgbm9kZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBfZDIuZGVmYXVsdC5jcmVhdGUoc3RyaW5nKTtcblxuICAgIG5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfTtcblxuICBub2RlLmNzcyA9IGZ1bmN0aW9uIChjc3NTdHlsZXMpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQuY3NzKG5vZGUsIGNzc1N0eWxlcyk7XG4gIH07XG4gIG5vZGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NMaXN0KSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmFkZENsYXNzKG5vZGUsIGNsYXNzTGlzdCk7XG4gIH07XG4gIG5vZGUucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NUb1JlbW92ZSkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5yZW1vdmVDbGFzcyhub2RlLCBjbGFzc1RvUmVtb3ZlKTtcbiAgfTtcbiAgbm9kZS50b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUsIGZvcmNlKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LnRvZ2dsZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSwgZm9yY2UpO1xuICB9O1xuICBub2RlLmNvbnRhaW5zQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmNvbnRhaW5zQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgfTtcbiAgbm9kZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vZGVUb1JlbW92ZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IG5vZGUgOiBhcmd1bWVudHNbMF07XG5cbiAgICB2YXIgb2xkTm9kZSA9IF9kMi5kZWZhdWx0LnJlbW92ZShub2RlVG9SZW1vdmUpO1xuICAgIG5vZGUgPSBudWxsO1xuXG4gICAgcmV0dXJuIG9sZE5vZGU7XG4gIH07XG5cbiAgcmV0dXJuIG5vZGU7XG59XG59LHtcIi4vZC5qc1wiOjF9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmZpbmRBbGwgPSBmaW5kQWxsO1xuXG52YXIgX2Rqc2Z5ID0gcmVxdWlyZSgnLi9kanNmeScpO1xuXG52YXIgX2Rqc2Z5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rqc2Z5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZmluZChzdHJpbmcpIHtcbiAgdmFyIHJvb3RFbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gZG9jdW1lbnQgOiBhcmd1bWVudHNbMV07XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc3RyaW5nKSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRBbGwoc3RyaW5nKSB7XG4gIHZhciByb290RWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGRvY3VtZW50IDogYXJndW1lbnRzWzFdO1xuXG4gIHJldHVybiByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHN0cmluZyk7XG59XG59LHtcIi4vZGpzZnlcIjoyfV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmV4cG9ydHMucmVtb3ZlID0gcmVtb3ZlO1xuXG52YXIgX2Rqc2Z5ID0gcmVxdWlyZSgnLi9kanNmeS5qcycpO1xuXG52YXIgX2Rqc2Z5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rqc2Z5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlKHN0cmluZykge1xuICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIHZhciBlbGVtZW50ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gc3RyaW5nLnRyaW0oKTtcblxuICBpZiAoZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50Lmxhc3RDaGlsZDtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShlbGVtZW50LmNsb25lTm9kZSh0cnVlKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG59LHtcIi4vZGpzZnkuanNcIjoyfV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNzcyA9IGNzcztcbmV4cG9ydHMuYWRkQ2xhc3MgPSBhZGRDbGFzcztcbmV4cG9ydHMuY29udGFpbnNDbGFzcyA9IGNvbnRhaW5zQ2xhc3M7XG5leHBvcnRzLnJlbW92ZUNsYXNzID0gcmVtb3ZlQ2xhc3M7XG5leHBvcnRzLnRvZ2dsZUNsYXNzID0gdG9nZ2xlQ2xhc3M7XG5cbnZhciBfZGpzZnkgPSByZXF1aXJlKCcuL2Rqc2Z5Jyk7XG5cbnZhciBfZGpzZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGpzZnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBFZGdlIC8gSUVcbnZhciBNUyA9ICdtcyc7XG4vLyBDaHJvbWUgLyBTYWZhcmlcbnZhciBXRUJLSVQgPSAnd2Via2l0Jztcbi8vIEZpcmVmb3hcbnZhciBNT1ogPSAnbW96Jztcbi8vIE9wZXJhXG52YXIgTyA9ICdvJztcbnZhciBYViA9ICd4dic7XG4vLyBLREVcbnZhciBLSFRNTCA9ICdraHRtbCc7XG5cbnZhciBQUkVGSVhJRVMgPSBbTVMsIFdFQktJVCwgTU9aLCBPLCBYViwgS0hUTUxdO1xuXG52YXIgQ1NTX1BSRUZJWEVEID0ge1xuICBmbG9hdDogJ2Nzc0Zsb2F0J1xufTtcblxuZnVuY3Rpb24gY3NzKG5vZGUsIGNzc1N0eWxlcykge1xuICBpZiAoIW5vZGUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gOCB8fCBub2RlLm5vZGVUeXBlID09PSAzIHx8ICFub2RlLnN0eWxlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gY3NzU3R5bGVzKSB7XG4gICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNzc1N0eWxlcywga2V5KSkge1xuICAgICAgdmFyIGtleVByZWZpeGVkID0gZ2V0U3R5bGVXaXRoUHJlZml4S2V5KHtcbiAgICAgICAgc3R5bGVMaXN0OiBub2RlLnN0eWxlLFxuICAgICAgICBzdHlsZVRvQ2hlY2s6IGtleVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChrZXlQcmVmaXhlZCkge1xuICAgICAgICBub2RlLnN0eWxlW2tleVByZWZpeGVkXSA9IGNzc1N0eWxlc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShub2RlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3Mobm9kZSwgY2xhc3NMaXN0KSB7XG4gIHZhciBjdXJyZW50Q2xhc3NMaXN0ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG5cbiAgY2xhc3NMaXN0ID0gcGFyc2VBcnJheShjbGFzc0xpc3QpIHx8IFtdO1xuXG4gIGlmIChjbGFzc0xpc3QgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjbGFzc0xpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghY2xhc3NMaXN0W2ldLnRyaW0oKSkge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ2Rqcy5hZGRDbGFzcygpOiBFbXB0eSBzdHJpbmdzIGFyZSBub3QgdmFsaWQgY2xhc3MgbmFtZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRhaW5zQ2xhc3NJbnRvTGlzdChjdXJyZW50Q2xhc3NMaXN0LCBjbGFzc0xpc3RbaV0pKSB7XG4gICAgICAgIGN1cnJlbnRDbGFzc0xpc3QgKz0gJyAnICsgY2xhc3NMaXN0W2ldLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXJyZW50Q2xhc3NMaXN0LnRyaW0oKSk7XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBjb250YWluc0NsYXNzKG5vZGUsIGNsYXNzTmFtZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlbGVtZW50IG11c3QgYmUgbm90IGVtcHR5LicpO1xuICB9XG5cbiAgYXNzZXJ0Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG5cbiAgcmV0dXJuIGNvbnRhaW5zQ2xhc3NJbnRvTGlzdChub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSwgY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NUb1JlbW92ZSkge1xuICB2YXIgY3VycmVudENsYXNzTGlzdCA9IGdldEN1cnJlbnRDbGFzc0xpc3Qobm9kZSk7XG5cbiAgY2xhc3NUb1JlbW92ZSA9IHBhcnNlQXJyYXkoY2xhc3NUb1JlbW92ZSkgfHwgW107XG5cbiAgaWYgKCFjdXJyZW50Q2xhc3NMaXN0Lmxlbmd0aCB8fCAhY2xhc3NUb1JlbW92ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkobm9kZSk7XG4gIH1cblxuICBpZiAoY2xhc3NUb1JlbW92ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgY2xhc3NUb1JlbW92ZUludGVyYWN0aW9uOiBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gY2xhc3NUb1JlbW92ZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzVG9SZW1vdmVbaV07XG4gICAgICBhc3NlcnRDbGFzc05hbWUoY2xhc3NOYW1lKTtcblxuICAgICAgY3VycmVudENsYXNzTGlzdEludGVyYWN0aW9uOiBmb3IgKHZhciB5ID0gMCwgX2xlbmd0aCA9IGN1cnJlbnRDbGFzc0xpc3QubGVuZ3RoOyB5IDwgX2xlbmd0aDsgeSsrKSB7XG4gICAgICAgIGlmIChjbGFzc05hbWUgPT09IGN1cnJlbnRDbGFzc0xpc3RbeV0pIHtcbiAgICAgICAgICBjdXJyZW50Q2xhc3NMaXN0LnNwbGljZSh5LCAxKTtcbiAgICAgICAgICBjb250aW51ZSBjbGFzc1RvUmVtb3ZlSW50ZXJhY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXJyZW50Q2xhc3NMaXN0LmpvaW4oJyAnKSk7XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhub2RlLCBjbGFzc05hbWUsIGZvcmNlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGVsZW1lbnQgbXVzdCBiZSBub3QgZW1wdHkuJyk7XG4gIH1cblxuICBhc3NlcnRDbGFzc05hbWUoY2xhc3NOYW1lKTtcblxuICB2YXIgY3VycmVudENsYXNzTGlzdCA9IGdldEN1cnJlbnRDbGFzc0xpc3Qobm9kZSk7XG5cbiAgaWYgKGNvbnRhaW5zQ2xhc3NJbnRvTGlzdChjdXJyZW50Q2xhc3NMaXN0LCBjbGFzc05hbWUpKSB7XG4gICAgaWYgKCFmb3JjZSkge1xuICAgICAgcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGZvcmNlICE9PSBmYWxzZSkge1xuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkobm9kZSk7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRDbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gcGFyc2VBcnJheShub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkgfHwgW107XG59XG5cbmZ1bmN0aW9uIGFzc2VydENsYXNzTmFtZShjbGFzc05hbWUpIHtcbiAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjbGFzc05hbWUgcHJvdmlkZWQgKFxcJycgKyBjbGFzc05hbWUgKyAnXFwnKSBtdXN0IGJlIG5vdCBlbXB0eS4nKTtcbiAgfVxuXG4gIGlmIChjb250YWluc1doaXRlc3BhY2VzKGNsYXNzTmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjbGFzc05hbWUgcHJvdmlkZWQgKFxcJycgKyBjbGFzc05hbWUgKyAnXFwnKSBjb250YWlucyBIVE1MIHNwYWNlIGNoYXJhY3RlcnMsIHdoaWNoIGFyZSBub3QgdmFsaWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udGFpbnNXaGl0ZXNwYWNlcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaCgvXFxzLyk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zQ2xhc3NJbnRvTGlzdChjbGFzc0xpc3QsIGNsYXNzVG9DaGVjaykge1xuICBjbGFzc0xpc3QgPSBwYXJzZUFycmF5KGNsYXNzTGlzdCkgfHwgW107XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGNsYXNzTGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChjbGFzc0xpc3RbaV0udHJpbSgpID09PSBjbGFzc1RvQ2hlY2sudHJpbSgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXJyYXkoY2xhc3NMaXN0KSB7XG4gIGlmICh0eXBlb2YgY2xhc3NMaXN0ID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTGlzdCA9IGNsYXNzTGlzdC5zcGxpdCgnICcpO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzTGlzdDtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVXaXRoUHJlZml4S2V5KF9yZWYpIHtcbiAgdmFyIHN0eWxlTGlzdCA9IF9yZWYuc3R5bGVMaXN0O1xuICB2YXIgc3R5bGVUb0NoZWNrID0gX3JlZi5zdHlsZVRvQ2hlY2s7XG5cbiAgaWYgKHN0eWxlVG9DaGVjayBpbiBzdHlsZUxpc3QpIHtcbiAgICByZXR1cm4gc3R5bGVUb0NoZWNrO1xuICB9XG5cbiAgaWYgKHN0eWxlVG9DaGVjayBpbiBDU1NfUFJFRklYRUQpIHtcbiAgICByZXR1cm4gQ1NTX1BSRUZJWEVEW3N0eWxlVG9DaGVja107XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gUFJFRklYSUVTLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHN0eWxlV2l0aFByZWZpeCA9ICcnICsgUFJFRklYSUVTW2ldICsgc3R5bGVUb0NoZWNrWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHlsZVRvQ2hlY2suc3Vic3RyaW5nKDEpO1xuXG4gICAgaWYgKHN0eWxlV2l0aFByZWZpeCBpbiBzdHlsZUxpc3QpIHtcbiAgICAgIENTU19QUkVGSVhFRFtzdHlsZVRvQ2hlY2tdID0gc3R5bGVXaXRoUHJlZml4O1xuICAgICAgcmV0dXJuIENTU19QUkVGSVhFRFtzdHlsZVRvQ2hlY2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbn0se1wiLi9kanNmeVwiOjJ9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9kID0gcmVxdWlyZSgnLi9kanMvZC5qcycpO1xuXG52YXIgX2QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZDIuZGVmYXVsdDtcbn0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdDtcbiAgfSk7XG59XG5cbnZhciBfZ2xvYmFsID0gdW5kZWZpbmVkO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgX2dsb2JhbCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgX2dsb2JhbCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIF9nbG9iYWwgPSBzZWxmO1xufSBlbHNlIHtcbiAgX2dsb2JhbCA9IHVuZGVmaW5lZDtcbn1cblxuX2dsb2JhbC5kanMgPSBfZDIuZGVmYXVsdDtcbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vZGpzL2QuanNcIjoxfV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBodG1sU3RyaW5nRnJvbVRlbXBsYXRlU3RyaW5nO1xuZnVuY3Rpb24gaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZyh0ZW1wbGF0ZU9iamVjdCkge1xuICB2YXIgcmF3ID0gdGVtcGxhdGVPYmplY3QucmF3O1xuXG4gIHZhciByZXN1bHQgPSB1bmRlZmluZWQ7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN1YnN0cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzdWJzdHNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmVzdWx0ID0gc3Vic3RzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBzdWJzdCwgaSkge1xuICAgIHZhciBsaXQgPSByYXdbaV07XG5cbiAgICBzdWJzdCA9IEFycmF5LmlzQXJyYXkoc3Vic3QpID8gc3Vic3Quam9pbignJykgOiBzdWJzdCArICcnO1xuXG4gICAgaWYgKGxpdFtsaXQubGVuZ3RoIC0gMV0gPT09ICckJykge1xuICAgICAgc3Vic3QgPSBodG1sRXNjYXBlKHN1YnN0KTtcbiAgICAgIGxpdCA9IGxpdC5zbGljZSgwLCAtMSk7XG4gICAgfVxuXG4gICAgcmVzdWx0ICs9IGxpdDtcbiAgICByZXN1bHQgKz0gc3Vic3Q7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCAnJyk7XG5cbiAgcmVzdWx0ICs9IHJhd1tyYXcubGVuZ3RoIC0gMV07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaHRtbEVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLz4vZywgJyZndDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvXCIvZywgJyZxdW90ZTsnKS5yZXBsYWNlKC8nL2csICcmIzM5OycpLnJlcGxhY2UoL2AvZywgJyYjOTY7Jyk7XG59XG59LHt9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZURpc3BhdGNoZXIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdG9vbHMvdXRpbHMuanMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIERpc3RhbmNlQWN0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpc3RhbmNlQWN0aW9ucygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzdGFuY2VBY3Rpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaXN0YW5jZUFjdGlvbnMsIG51bGwsIFt7XG4gICAga2V5OiAnY2hhbmdlVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VWYWx1ZSh2YWx1ZSkge1xuICAgICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IERpc3RhbmNlQWN0aW9ucy5WQUxVRV9DSEFOR0VELFxuICAgICAgICBkYXRhOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2hhbmdlVW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVVuaXQodW5pdCkge1xuICAgICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IERpc3RhbmNlQWN0aW9ucy5VTklUX0NIQU5HRUQsXG4gICAgICAgIGRhdGE6IHVuaXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXN0YW5jZUFjdGlvbnM7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXN0YW5jZUFjdGlvbnM7XG5cbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoRGlzdGFuY2VBY3Rpb25zLCAnVkFMVUVfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoRGlzdGFuY2VBY3Rpb25zLCAnVU5JVF9DSEFOR0VEJywgU3ltYm9sKCkpO1xuXG59LHtcIi4uL3Rvb2xzL3V0aWxzLmpzXCI6MzAsXCIuL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanNcIjoxMH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBEaXN0YW5jZSA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpc3RhbmNlKF9yZWYpIHtcbiAgICB2YXIgX3JlZiR1bml0ID0gX3JlZi51bml0O1xuICAgIHZhciB1bml0ID0gX3JlZiR1bml0ID09PSB1bmRlZmluZWQgPyAnS20nIDogX3JlZiR1bml0O1xuICAgIHZhciBfcmVmJHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgICB2YXIgdmFsdWUgPSBfcmVmJHZhbHVlID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiR2YWx1ZTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXN0YW5jZSk7XG5cbiAgICB0aGlzLnVuaXQgPSB1bml0O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaXN0YW5jZSwgW3tcbiAgICBrZXk6ICdzZXRWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXN0YW5jZTtcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERpc3RhbmNlO1xuXG59LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3BhdGNoZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgX2Rpc3BhdGNoZXIyLmRlZmF1bHQoKTtcblxufSx7XCIuLi90b29scy9kaXNwYXRjaGVyLmpzXCI6Mjh9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1kaXN0YW5jZVwiPlxcbiAgICAgIDxpbnB1dCBjbGFzcz1cImZlLWlucHV0c19faW5wdXQgZmUtZGlzdGFuY2VfX2lucHV0XCIgdHlwZT1cIm51bWJlclwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiZmUtdW5pdCBmZS1kaXN0YW5jZV9fdW5pdFwiPnskJHVuaXR9PC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddLCBbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtZGlzdGFuY2VcIj5cXG4gICAgICA8aW5wdXQgY2xhc3M9XCJmZS1pbnB1dHNfX2lucHV0IGZlLWRpc3RhbmNlX19pbnB1dFwiIHR5cGU9XCJudW1iZXJcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLXVuaXQgZmUtZGlzdGFuY2VfX3VuaXRcIj57JCR1bml0fTwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9ucyA9IHJlcXVpcmUoJy4vZGlzdGFuY2UuYWN0aW9ucy5qcycpO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUFjdGlvbnMpO1xuXG52YXIgX2Rpc3RhbmNlU3RvcmUgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLnN0b3JlLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VTdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZVN0b3JlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHsgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTsgfVxuXG52YXIgY29uZmlnTWFwID0ge1xuICBodG1sOiAoMCwgX2RvbTIuZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KVxufTtcblxudmFyIGVsZW1lbnRNYXAgPSB7XG4gICRjb250YWluZXI6IG51bGwsXG4gICRkaXN0YW5jZTogbnVsbCxcbiAgJGlucHV0OiBudWxsLFxuICAkdW5pdDogbnVsbFxufTtcblxudmFyIGRpc3RhbmNlU3RvcmUgPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRkaXN0YW5jZSA9ICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcbiAgc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKTtcbiAgc2V0RWxlbWVudEhhbmRsZXJzKCk7XG5cbiAgZGlzdGFuY2VTdG9yZSA9IG5ldyBfZGlzdGFuY2VTdG9yZTIuZGVmYXVsdCgpO1xuICBkaXN0YW5jZVN0b3JlLm9uQ2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICByZWZyZXNoVW5pdChkaXN0YW5jZVN0b3JlLmRpc3RhbmNlLnVuaXQpO1xuICB9KTtcblxuICBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LmNoYW5nZVVuaXQoJ0ttJyk7XG4gIGRpc3RhbmNlU3RvcmUudW5yZWdpc3Rlckxpc3RlbmVyKCk7XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hVbml0KHVuaXQpIHtcbiAgZWxlbWVudE1hcC4kdW5pdC5pbm5lckhUTUwgPSB1bml0O1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kaW5wdXQgPSBlbGVtZW50TWFwLiRkaXN0YW5jZS5maW5kKCcuZmUtZGlzdGFuY2VfX2lucHV0Jyk7XG4gIGVsZW1lbnRNYXAuJHVuaXQgPSBlbGVtZW50TWFwLiRkaXN0YW5jZS5maW5kKCcuZmUtZGlzdGFuY2VfX3VuaXQnKTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudEhhbmRsZXJzKCkge1xuICBlbGVtZW50TWFwLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuY2hhbmdlVmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfSk7XG59XG5cbn0se1wiLi9kaXN0YW5jZS5hY3Rpb25zLmpzXCI6OCxcIi4vZGlzdGFuY2Uuc3RvcmUuanNcIjoxMixcImRvbS5qc1wiOjZ9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zdG9yZSA9IHJlcXVpcmUoJy4uL3Rvb2xzL3N0b3JlLmpzJyk7XG5cbnZhciBfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmUpO1xuXG52YXIgX2Rpc3RhbmNlQ2xhc3MgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmNsYXNzLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUNsYXNzKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmFjdGlvbnMuanMnKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VBY3Rpb25zKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VEaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRGlzdGFuY2VTdG9yZSA9IChmdW5jdGlvbiAoX1N0b3JlKSB7XG4gIF9pbmhlcml0cyhEaXN0YW5jZVN0b3JlLCBfU3RvcmUpO1xuXG4gIGZ1bmN0aW9uIERpc3RhbmNlU3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpc3RhbmNlU3RvcmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKERpc3RhbmNlU3RvcmUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe30pO1xuXG4gICAgX3RoaXMubGlzdGVuZXIgPSBfZGlzdGFuY2VEaXNwYXRjaGVyMi5kZWZhdWx0LnJlZ2lzdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgc3dpdGNoIChsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgIGNhc2UgX2Rpc3RhbmNlQWN0aW9uczIuZGVmYXVsdC5WQUxVRV9DSEFOR0VEOlxuICAgICAgICAgIF90aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHVuaXQ6IF90aGlzLmRpc3RhbmNlLnVuaXQsXG4gICAgICAgICAgICB2YWx1ZTogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LlVOSVRfQ0hBTkdFRDpcbiAgICAgICAgICBfdGhpcy5kaXN0YW5jZSA9IG5ldyBfZGlzdGFuY2VDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMuZGlzdGFuY2UudmFsdWUsXG4gICAgICAgICAgICB1bml0OiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2hhbmdlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERpc3RhbmNlU3RvcmUsIFt7XG4gICAga2V5OiAndW5yZWdpc3Rlckxpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVyKCkge1xuICAgICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC51bnJlZ2lzdGVyKHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXN0YW5jZVN0b3JlO1xufSkoX3N0b3JlMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGlzdGFuY2VTdG9yZTtcblxufSx7XCIuLi90b29scy9zdG9yZS5qc1wiOjI5LFwiLi9kaXN0YW5jZS5hY3Rpb25zLmpzXCI6OCxcIi4vZGlzdGFuY2UuY2xhc3MuanNcIjo5LFwiLi9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzXCI6MTB9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxoZWFkZXIgY2xhc3M9XCJmZS1oZWFkZXJcIj5cXG4gICAgICA8aDE+RnVlbCBFY29ub215PC9oMT5cXG4gICAgPC9oZWFkZXI+XFxuICAnXSwgWydcXG4gICAgPGhlYWRlciBjbGFzcz1cImZlLWhlYWRlclwiPlxcbiAgICAgIDxoMT5GdWVsIEVjb25vbXk8L2gxPlxcbiAgICA8L2hlYWRlcj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG59XG5cbn0se1wiZG9tLmpzXCI6Nn1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9oZWFkZXIgPSByZXF1aXJlKCcuL2hlYWRlci9oZWFkZXIuanMnKTtcblxudmFyIGhlYWRlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oZWFkZXIpO1xuXG52YXIgX2lucHV0c0NvbnRhaW5lciA9IHJlcXVpcmUoJy4vaW5wdXRzL2lucHV0cy1jb250YWluZXIuanMnKTtcblxudmFyIGlucHV0c0NvbnRhaW5lciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9pbnB1dHNDb250YWluZXIpO1xuXG52YXIgX3Jlc3VsdHNDb250YWluZXIgPSByZXF1aXJlKCcuL3Jlc3VsdHMvcmVzdWx0cy1jb250YWluZXIuanMnKTtcblxudmFyIHJlc3VsdHNDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcmVzdWx0c0NvbnRhaW5lcik7XG5cbnZhciByZXN1bHRzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3Jlc3VsdHNDb250YWluZXIpO1xuXG52YXIgX3F1YW50aXR5ID0gcmVxdWlyZSgnLi9xdWFudGl0eS9xdWFudGl0eS5qcycpO1xuXG52YXIgcXVhbnRpdHkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcXVhbnRpdHkpO1xuXG52YXIgX2Rpc3RhbmNlID0gcmVxdWlyZSgnLi9kaXN0YW5jZS9kaXN0YW5jZS5qcycpO1xuXG52YXIgZGlzdGFuY2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZGlzdGFuY2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgJGhlYWRlckNvbnRhaW5lciA9ICgwLCBfZG9tMi5kZWZhdWx0KSgnLmZlLWpzLWhlYWRlcicpO1xudmFyICRpbnB1dHNDb250YWluZXIgPSAoMCwgX2RvbTIuZGVmYXVsdCkoJy5mZS1qcy1pbnB1dHMtY29udGFpbmVyJyk7XG52YXIgJHJlc3VsdHNDb250YWluZXIgPSAoMCwgX2RvbTIuZGVmYXVsdCkoJy5mZS1qcy1yZXN1bHRzLWNvbnRhaW5lcicpO1xuXG52YXIgcXVhbnRpdHlNb2RlbCA9IHsgdW5pdDogJ0wnIH07XG52YXIgZGlzdGFuY2VNb2RlbCA9IHsgdW5pdDogJ0ttJyB9O1xuXG5xdWFudGl0eS5jb25maWcoe1xuICB1bml0OiAnTCcsXG4gIG9uSW5wdXQ6IGZ1bmN0aW9uIG9uSW5wdXQobW9kZWwpIHtcbiAgICBxdWFudGl0eU1vZGVsID0gbW9kZWw7XG4gICAgcmVzdWx0cy5yZWZyZXNoRnVlbENvbnN1bXB0aW9uKHtcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZU1vZGVsLFxuICAgICAgcXVhbnRpdHk6IHF1YW50aXR5TW9kZWxcbiAgICB9KTtcbiAgfVxufSk7XG5cbmRpc3RhbmNlLmNvbmZpZyh7XG4gIHVuaXQ6ICdLbScsXG4gIG9uSW5wdXQ6IGZ1bmN0aW9uIG9uSW5wdXQobW9kZWwpIHtcbiAgICBkaXN0YW5jZU1vZGVsID0gbW9kZWw7XG4gICAgcmVzdWx0cy5yZWZyZXNoRnVlbENvbnN1bXB0aW9uKHtcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZU1vZGVsLFxuICAgICAgcXVhbnRpdHk6IHF1YW50aXR5TW9kZWxcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhlYWRlci5pbml0TW9kdWxlKCRoZWFkZXJDb250YWluZXIpO1xuaW5wdXRzQ29udGFpbmVyLmluaXRNb2R1bGUoJGlucHV0c0NvbnRhaW5lcik7XG5yZXN1bHRzQ29udGFpbmVyLmluaXRNb2R1bGUoJHJlc3VsdHNDb250YWluZXIpO1xuXG5yZXN1bHRzLnJlZnJlc2hGdWVsQ29uc3VtcHRpb24oe1xuICBkaXN0YW5jZTogZGlzdGFuY2VNb2RlbCxcbiAgcXVhbnRpdHk6IHF1YW50aXR5TW9kZWxcbn0pO1xuXG59LHtcIi4vZGlzdGFuY2UvZGlzdGFuY2UuanNcIjoxMSxcIi4vaGVhZGVyL2hlYWRlci5qc1wiOjEzLFwiLi9pbnB1dHMvaW5wdXRzLWNvbnRhaW5lci5qc1wiOjE1LFwiLi9xdWFudGl0eS9xdWFudGl0eS5qc1wiOjE5LFwiLi9yZXN1bHRzL3Jlc3VsdHMtY29udGFpbmVyLmpzXCI6MjQsXCJkb20uanNcIjo2fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzLWNvbnRhaW5lclwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMgZmUtanMtcXVhbnRpdHlcIj48L2Rpdj5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzIGZlLWpzLWRpc3RhbmNlXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgJ10sIFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMtY29udGFpbmVyXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImZlLWlucHV0cyBmZS1qcy1xdWFudGl0eVwiPjwvZGl2PlxcblxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMgZmUtanMtZGlzdGFuY2VcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX3F1YW50aXR5ID0gcmVxdWlyZSgnLi4vcXVhbnRpdHkvcXVhbnRpdHkuanMnKTtcblxudmFyIHF1YW50aXR5ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3F1YW50aXR5KTtcblxudmFyIF9kaXN0YW5jZSA9IHJlcXVpcmUoJy4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzJyk7XG5cbnZhciBkaXN0YW5jZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9kaXN0YW5jZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkaW5wdXRDb250YWluZXI6IG51bGwsXG4gICRpbnB1dFF1YW50aXR5OiBudWxsLFxuICAkaW5wdXREaXN0YW5jZTogbnVsbFxufTtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGlucHV0Q29udGFpbmVyID0gJGNvbnRhaW5lci5jcmVhdGUoY29uZmlnTWFwLmh0bWwpO1xuXG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG5cbiAgcXVhbnRpdHkuaW5pdE1vZHVsZShlbGVtZW50TWFwLiRpbnB1dFF1YW50aXR5KTtcbiAgZGlzdGFuY2UuaW5pdE1vZHVsZShlbGVtZW50TWFwLiRpbnB1dERpc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG4gIGVsZW1lbnRNYXAuJGlucHV0UXVhbnRpdHkgPSBlbGVtZW50TWFwLiRpbnB1dENvbnRhaW5lci5maW5kKCcuZmUtanMtcXVhbnRpdHknKTtcbiAgZWxlbWVudE1hcC4kaW5wdXREaXN0YW5jZSA9IGVsZW1lbnRNYXAuJGlucHV0Q29udGFpbmVyLmZpbmQoJy5mZS1qcy1kaXN0YW5jZScpO1xufVxuXG59LHtcIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzXCI6MTEsXCIuLi9xdWFudGl0eS9xdWFudGl0eS5qc1wiOjE5LFwiZG9tLmpzXCI6Nn1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vcXVhbnRpdHkuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eURpc3BhdGNoZXIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdG9vbHMvdXRpbHMuanMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFF1YW50aXR5QWN0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1YW50aXR5QWN0aW9ucygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVhbnRpdHlBY3Rpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWFudGl0eUFjdGlvbnMsIG51bGwsIFt7XG4gICAga2V5OiAnY2hhbmdlVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VWYWx1ZSh2YWx1ZSkge1xuICAgICAgX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFF1YW50aXR5QWN0aW9ucy5WQUxVRV9DSEFOR0VELFxuICAgICAgICBkYXRhOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2hhbmdlVW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVVuaXQodW5pdCkge1xuICAgICAgX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFF1YW50aXR5QWN0aW9ucy5VTklUX0NIQU5HRUQsXG4gICAgICAgIGRhdGE6IHVuaXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBRdWFudGl0eUFjdGlvbnM7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBRdWFudGl0eUFjdGlvbnM7XG5cbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoUXVhbnRpdHlBY3Rpb25zLCAnVkFMVUVfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoUXVhbnRpdHlBY3Rpb25zLCAnVU5JVF9DSEFOR0VEJywgU3ltYm9sKCkpO1xuXG59LHtcIi4uL3Rvb2xzL3V0aWxzLmpzXCI6MzAsXCIuL3F1YW50aXR5LmRpc3BhdGNoZXIuanNcIjoxOH1dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUXVhbnRpdHkgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBRdWFudGl0eShfcmVmKSB7XG4gICAgdmFyIF9yZWYkdW5pdCA9IF9yZWYudW5pdDtcbiAgICB2YXIgdW5pdCA9IF9yZWYkdW5pdCA9PT0gdW5kZWZpbmVkID8gJ0wnIDogX3JlZiR1bml0O1xuICAgIHZhciBfcmVmJHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgICB2YXIgdmFsdWUgPSBfcmVmJHZhbHVlID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiR2YWx1ZTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWFudGl0eSk7XG5cbiAgICB0aGlzLnVuaXQgPSB1bml0O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWFudGl0eSwgW3tcbiAgICBrZXk6ICdzZXRWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBRdWFudGl0eTtcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFF1YW50aXR5O1xuXG59LHt9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3BhdGNoZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgX2Rpc3BhdGNoZXIyLmRlZmF1bHQoKTtcblxufSx7XCIuLi90b29scy9kaXNwYXRjaGVyLmpzXCI6Mjh9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1xdWFudGl0eVwiPlxcbiAgICAgIDxpbnB1dCBjbGFzcz1cImZlLWlucHV0c19faW5wdXQgZmUtcXVhbnRpdHlfX2lucHV0XCIgdHlwZT1cIm51bWJlclwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiZmUtdW5pdCBmZS1xdWFudGl0eV9fdW5pdFwiPnskJHVuaXR9PC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddLCBbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtcXVhbnRpdHlcIj5cXG4gICAgICA8aW5wdXQgY2xhc3M9XCJmZS1pbnB1dHNfX2lucHV0IGZlLXF1YW50aXR5X19pbnB1dFwiIHR5cGU9XCJudW1iZXJcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLXVuaXQgZmUtcXVhbnRpdHlfX3VuaXRcIj57JCR1bml0fTwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX3F1YW50aXR5QWN0aW9ucyA9IHJlcXVpcmUoJy4vcXVhbnRpdHkuYWN0aW9ucy5qcycpO1xuXG52YXIgX3F1YW50aXR5QWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eUFjdGlvbnMpO1xuXG52YXIgX3F1YW50aXR5U3RvcmUgPSByZXF1aXJlKCcuL3F1YW50aXR5LnN0b3JlLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlTdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eVN0b3JlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHsgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTsgfVxuXG52YXIgY29uZmlnTWFwID0ge1xuICBodG1sOiAoMCwgX2RvbTIuZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KVxufTtcblxudmFyIGVsZW1lbnRNYXAgPSB7XG4gICRjb250YWluZXI6IG51bGwsXG4gICRxdWFudGl0eTogbnVsbCxcbiAgJGlucHV0OiBudWxsLFxuICAkdW5pdDogbnVsbFxufTtcblxudmFyIHF1YW50aXR5U3RvcmUgPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRxdWFudGl0eSA9ICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcbiAgc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKTtcbiAgc2V0RWxlbWVudEhhbmRsZXJzKCk7XG5cbiAgcXVhbnRpdHlTdG9yZSA9IG5ldyBfcXVhbnRpdHlTdG9yZTIuZGVmYXVsdCgpO1xuICBxdWFudGl0eVN0b3JlLm9uQ2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICByZWZyZXNoVW5pdChxdWFudGl0eVN0b3JlLnF1YW50aXR5LnVuaXQpO1xuICB9KTtcblxuICBfcXVhbnRpdHlBY3Rpb25zMi5kZWZhdWx0LmNoYW5nZVVuaXQoJ0wnKTtcbiAgcXVhbnRpdHlTdG9yZS51bnJlZ2lzdGVyTGlzdGVuZXIoKTtcbn1cblxuZnVuY3Rpb24gcmVmcmVzaFVuaXQodW5pdCkge1xuICBlbGVtZW50TWFwLiR1bml0LmlubmVySFRNTCA9IHVuaXQ7XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICBlbGVtZW50TWFwLiRpbnB1dCA9IGVsZW1lbnRNYXAuJHF1YW50aXR5LmZpbmQoJy5mZS1xdWFudGl0eV9faW5wdXQnKTtcbiAgZWxlbWVudE1hcC4kdW5pdCA9IGVsZW1lbnRNYXAuJHF1YW50aXR5LmZpbmQoJy5mZS1xdWFudGl0eV9fdW5pdCcpO1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50SGFuZGxlcnMoKSB7XG4gIGVsZW1lbnRNYXAuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5jaGFuZ2VWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICB9KTtcbn1cblxufSx7XCIuL3F1YW50aXR5LmFjdGlvbnMuanNcIjoxNixcIi4vcXVhbnRpdHkuc3RvcmUuanNcIjoyMCxcImRvbS5qc1wiOjZ9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zdG9yZSA9IHJlcXVpcmUoJy4uL3Rvb2xzL3N0b3JlLmpzJyk7XG5cbnZhciBfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmUpO1xuXG52YXIgX3F1YW50aXR5Q2xhc3MgPSByZXF1aXJlKCcuL3F1YW50aXR5LmNsYXNzLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eUNsYXNzKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMgPSByZXF1aXJlKCcuL3F1YW50aXR5LmFjdGlvbnMuanMnKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlBY3Rpb25zKTtcblxudmFyIF9xdWFudGl0eURpc3BhdGNoZXIgPSByZXF1aXJlKCcuL3F1YW50aXR5LmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9xdWFudGl0eURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlEaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUXVhbnRpdHlTdG9yZSA9IChmdW5jdGlvbiAoX1N0b3JlKSB7XG4gIF9pbmhlcml0cyhRdWFudGl0eVN0b3JlLCBfU3RvcmUpO1xuXG4gIGZ1bmN0aW9uIFF1YW50aXR5U3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1YW50aXR5U3RvcmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFF1YW50aXR5U3RvcmUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe30pO1xuXG4gICAgX3RoaXMubGlzdGVuZXIgPSBfcXVhbnRpdHlEaXNwYXRjaGVyMi5kZWZhdWx0LnJlZ2lzdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgc3dpdGNoIChsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgIGNhc2UgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5WQUxVRV9DSEFOR0VEOlxuICAgICAgICAgIF90aGlzLnF1YW50aXR5ID0gbmV3IF9xdWFudGl0eUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHVuaXQ6IF90aGlzLnF1YW50aXR5LnVuaXQsXG4gICAgICAgICAgICB2YWx1ZTogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfcXVhbnRpdHlBY3Rpb25zMi5kZWZhdWx0LlVOSVRfQ0hBTkdFRDpcbiAgICAgICAgICBfdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMucXVhbnRpdHkudmFsdWUsXG4gICAgICAgICAgICB1bml0OiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2hhbmdlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFF1YW50aXR5U3RvcmUsIFt7XG4gICAga2V5OiAndW5yZWdpc3Rlckxpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVyKCkge1xuICAgICAgX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC51bnJlZ2lzdGVyKHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBRdWFudGl0eVN0b3JlO1xufSkoX3N0b3JlMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUXVhbnRpdHlTdG9yZTtcblxufSx7XCIuLi90b29scy9zdG9yZS5qc1wiOjI5LFwiLi9xdWFudGl0eS5hY3Rpb25zLmpzXCI6MTYsXCIuL3F1YW50aXR5LmNsYXNzLmpzXCI6MTcsXCIuL3F1YW50aXR5LmRpc3BhdGNoZXIuanNcIjoxOH1dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBGdWVsQ29uc3VtcHRpb25zID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRnVlbENvbnN1bXB0aW9ucygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnVlbENvbnN1bXB0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRnVlbENvbnN1bXB0aW9ucywgbnVsbCwgW3tcbiAgICBrZXk6IFwiY2FsY1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjKF9yZWYpIHtcbiAgICAgIHZhciBfcmVmJHF1YW50aXR5ID0gX3JlZi5xdWFudGl0eTtcbiAgICAgIHZhciBxdWFudGl0eSA9IF9yZWYkcXVhbnRpdHkgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRxdWFudGl0eTtcbiAgICAgIHZhciBfcmVmJGRpc3RhbmNlID0gX3JlZi5kaXN0YW5jZTtcbiAgICAgIHZhciBkaXN0YW5jZSA9IF9yZWYkZGlzdGFuY2UgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRkaXN0YW5jZTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIHVuaXQ6IGRpc3RhbmNlLnVuaXQgKyBcIi9cIiArIHF1YW50aXR5LnVuaXRcbiAgICAgIH07XG5cbiAgICAgIGlmICghcXVhbnRpdHkudmFsdWUgfHwgIWRpc3RhbmNlLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdC52YWx1ZSA9IGRpc3RhbmNlLnZhbHVlIC8gcXVhbnRpdHkudmFsdWU7XG5cbiAgICAgIHJlc3VsdC52YWx1ZSA9IHJlc3VsdC52YWx1ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGdWVsQ29uc3VtcHRpb25zO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRnVlbENvbnN1bXB0aW9ucztcblxufSx7fV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtZnVlbC1jb25zdW1wdGlvblwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiZmUtanMtdmFsdWVcIj44ODwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJmZS11bml0XCI+S20vTDwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSwgWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLWZ1ZWwtY29uc3VtcHRpb25cIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLWpzLXZhbHVlXCI+ODg8L3NwYW4+IDxzcGFuIGNsYXNzPVwiZmUtdW5pdFwiPkttL0w8L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgJ10pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0TW9kdWxlID0gaW5pdE1vZHVsZTtcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9mdWVsQ29uc3VtcHRpb25TdG9yZSA9IHJlcXVpcmUoJy4vZnVlbC1jb25zdW1wdGlvbi5zdG9yZS5qcycpO1xuXG52YXIgX2Z1ZWxDb25zdW1wdGlvblN0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Z1ZWxDb25zdW1wdGlvblN0b3JlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHsgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTsgfVxuXG52YXIgY29uZmlnTWFwID0ge1xuICBodG1sOiAoMCwgX2RvbTIuZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KVxufTtcblxudmFyIGVsZW1lbnRNYXAgPSB7XG4gICRjb250YWluZXI6IG51bGwsXG4gICRmdWVsQ29uc3VtcHRpb246IG51bGwsXG4gICRmdWVsVW5pdDogbnVsbCxcbiAgJGZ1ZWxWYWx1ZTogbnVsbFxufTtcblxudmFyIGZ1ZWxDb25zdW1wdGlvblN0b3JlID0gdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpbml0TW9kdWxlKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kZnVlbENvbnN1bXB0aW9uID0gJGNvbnRhaW5lci5jcmVhdGUoY29uZmlnTWFwLmh0bWwpO1xuICBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpO1xuXG4gIGZ1ZWxDb25zdW1wdGlvblN0b3JlID0gbmV3IF9mdWVsQ29uc3VtcHRpb25TdG9yZTIuZGVmYXVsdCgpO1xuXG4gIGZ1ZWxDb25zdW1wdGlvblN0b3JlLm9uQ2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICByZWZyZXNoRnVlbENvbnN1bXB0aW9uKGZ1ZWxDb25zdW1wdGlvblN0b3JlLnJlc3VsdHMpO1xuICB9KTtcblxuICBmdWVsQ29uc3VtcHRpb25TdG9yZS5jaGFuZ2UoKTtcbn1cblxuZnVuY3Rpb24gcmVmcmVzaEZ1ZWxDb25zdW1wdGlvbihyZXN1bHRzKSB7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxVbml0LmlubmVySFRNTCA9IHJlc3VsdHMudW5pdDtcbiAgZWxlbWVudE1hcC4kZnVlbFZhbHVlLmlubmVySFRNTCA9IHJlc3VsdHMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICBlbGVtZW50TWFwLiRmdWVsVW5pdCA9IGVsZW1lbnRNYXAuJGZ1ZWxDb25zdW1wdGlvbi5maW5kKCcuZmUtdW5pdCcpO1xuICBlbGVtZW50TWFwLiRmdWVsVmFsdWUgPSBlbGVtZW50TWFwLiRmdWVsQ29uc3VtcHRpb24uZmluZCgnLmZlLWpzLXZhbHVlJyk7XG59XG5cbn0se1wiLi9mdWVsLWNvbnN1bXB0aW9uLnN0b3JlLmpzXCI6MjMsXCJkb20uanNcIjo2fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N0b3JlID0gcmVxdWlyZSgnLi4vLi4vdG9vbHMvc3RvcmUuanMnKTtcblxudmFyIF9zdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdG9yZSk7XG5cbnZhciBfcmVzdWx0c0FjdGlvbnMgPSByZXF1aXJlKCcuLi9yZXN1bHRzLmFjdGlvbnMuanMnKTtcblxudmFyIF9yZXN1bHRzQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzQWN0aW9ucyk7XG5cbnZhciBfcmVzdWx0c0Rpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9yZXN1bHRzLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9yZXN1bHRzRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzRGlzcGF0Y2hlcik7XG5cbnZhciBfZnVlbENvbnN1bXB0aW9uQ2xhc3MgPSByZXF1aXJlKCcuL2Z1ZWwtY29uc3VtcHRpb24uY2xhc3MuanMnKTtcblxudmFyIF9mdWVsQ29uc3VtcHRpb25DbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mdWVsQ29uc3VtcHRpb25DbGFzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEZ1ZWxDb25zdW1wdGlvblN0b3JlID0gKGZ1bmN0aW9uIChfU3RvcmUpIHtcbiAgX2luaGVyaXRzKEZ1ZWxDb25zdW1wdGlvblN0b3JlLCBfU3RvcmUpO1xuXG4gIGZ1bmN0aW9uIEZ1ZWxDb25zdW1wdGlvblN0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGdWVsQ29uc3VtcHRpb25TdG9yZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRnVlbENvbnN1bXB0aW9uU3RvcmUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMucmVzdWx0cyA9IF9mdWVsQ29uc3VtcHRpb25DbGFzczIuZGVmYXVsdC5jYWxjKHt9KTtcblxuICAgIF9yZXN1bHRzRGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHN3aXRjaCAobGlzdGVuZXIudHlwZSkge1xuICAgICAgICBjYXNlIF9yZXN1bHRzQWN0aW9uczIuZGVmYXVsdC5SRVNVTFRfQ0hBTkdFRDpcbiAgICAgICAgICBfdGhpcy5yZXN1bHRzID0gX2Z1ZWxDb25zdW1wdGlvbkNsYXNzMi5kZWZhdWx0LmNhbGMobGlzdGVuZXIuZGF0YSk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlKF90aGlzLnJlc3VsdHMpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIEZ1ZWxDb25zdW1wdGlvblN0b3JlO1xufSkoX3N0b3JlMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRnVlbENvbnN1bXB0aW9uU3RvcmU7XG5cbn0se1wiLi4vLi4vdG9vbHMvc3RvcmUuanNcIjoyOSxcIi4uL3Jlc3VsdHMuYWN0aW9ucy5qc1wiOjI1LFwiLi4vcmVzdWx0cy5kaXNwYXRjaGVyLmpzXCI6MjYsXCIuL2Z1ZWwtY29uc3VtcHRpb24uY2xhc3MuanNcIjoyMX1dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90ZW1wbGF0ZU9iamVjdCA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLXJlc3VsdHMtY29udGFpbmVyXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImZlLWpzLWZ1ZWwtY29uc3VtcHRpb25cIiBzdHlsZT1cImhlaWdodDoxMDAlXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgJ10sIFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1yZXN1bHRzLWNvbnRhaW5lclwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1qcy1mdWVsLWNvbnN1bXB0aW9uXCIgc3R5bGU9XCJoZWlnaHQ6MTAwJVwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfZnVlbENvbnN1bXB0aW9uID0gcmVxdWlyZSgnLi9mdWVsLWNvbnN1bXB0aW9uL2Z1ZWwtY29uc3VtcHRpb24uanMnKTtcblxudmFyIGZ1ZWxDb21zdXB0aW9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2Z1ZWxDb25zdW1wdGlvbik7XG5cbnZhciBfcmVzdWx0c1N0b3JlID0gcmVxdWlyZSgnLi9yZXN1bHRzLnN0b3JlLmpzJyk7XG5cbnZhciBfcmVzdWx0c1N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc3VsdHNTdG9yZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIHJlc3VsdHNTdG9yZSA9IHVuZGVmaW5lZDtcblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkcmVzdWx0c0NvbnRhaW5lcjogbnVsbCxcbiAgJGZ1ZWxDb21zdXB0aW9uOiBudWxsXG59O1xuXG5mdW5jdGlvbiBpbml0TW9kdWxlKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kcmVzdWx0c0NvbnRhaW5lciA9ICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcbiAgc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKTtcblxuICByZXN1bHRzU3RvcmUgPSBuZXcgX3Jlc3VsdHNTdG9yZTIuZGVmYXVsdCgpO1xuXG4gIGZ1ZWxDb21zdXB0aW9uLmluaXRNb2R1bGUoZWxlbWVudE1hcC4kZnVlbENvbXN1cHRpb24pO1xuXG4gIHJlc3VsdHNTdG9yZS51cGRhdGVSZXN1bHRzKCk7XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICBlbGVtZW50TWFwLiRmdWVsQ29tc3VwdGlvbiA9IGVsZW1lbnRNYXAuJHJlc3VsdHNDb250YWluZXIuZmluZCgnLmZlLWpzLWZ1ZWwtY29uc3VtcHRpb24nKTtcbn1cblxufSx7XCIuL2Z1ZWwtY29uc3VtcHRpb24vZnVlbC1jb25zdW1wdGlvbi5qc1wiOjIyLFwiLi9yZXN1bHRzLnN0b3JlLmpzXCI6MjcsXCJkb20uanNcIjo2fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVzdWx0c0Rpc3BhdGNoZXIgPSByZXF1aXJlKCcuL3Jlc3VsdHMuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX3Jlc3VsdHNEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc3VsdHNEaXNwYXRjaGVyKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3Rvb2xzL3V0aWxzLmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSZXN1bHRzQWN0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlc3VsdHNBY3Rpb25zKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXN1bHRzQWN0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVzdWx0c0FjdGlvbnMsIG51bGwsIFt7XG4gICAga2V5OiAnY2hhbmdlUmVzdWx0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlUmVzdWx0KHZhbHVlKSB7XG4gICAgICBfcmVzdWx0c0Rpc3BhdGNoZXIyLmRlZmF1bHQuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBSZXN1bHRzQWN0aW9ucy5SRVNVTFRfQ0hBTkdFRCxcbiAgICAgICAgZGF0YTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXN1bHRzQWN0aW9ucztcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJlc3VsdHNBY3Rpb25zO1xuXG4oMCwgX3V0aWxzLmRlZmluZUNvbnN0UHJvcGVydHkpKFJlc3VsdHNBY3Rpb25zLCAnUkVTVUxUX0NIQU5HRUQnLCBTeW1ib2woKSk7XG5cbn0se1wiLi4vdG9vbHMvdXRpbHMuanNcIjozMCxcIi4vcmVzdWx0cy5kaXNwYXRjaGVyLmpzXCI6MjZ9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3BhdGNoZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgX2Rpc3BhdGNoZXIyLmRlZmF1bHQoKTtcblxufSx7XCIuLi90b29scy9kaXNwYXRjaGVyLmpzXCI6Mjh9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zdG9yZSA9IHJlcXVpcmUoJy4uL3Rvb2xzL3N0b3JlLmpzJyk7XG5cbnZhciBfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmUpO1xuXG52YXIgX3F1YW50aXR5Q2xhc3MgPSByZXF1aXJlKCcuLi9xdWFudGl0eS9xdWFudGl0eS5jbGFzcy5qcycpO1xuXG52YXIgX3F1YW50aXR5Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlDbGFzcyk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zID0gcmVxdWlyZSgnLi4vcXVhbnRpdHkvcXVhbnRpdHkuYWN0aW9ucy5qcycpO1xuXG52YXIgX3F1YW50aXR5QWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eUFjdGlvbnMpO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL3F1YW50aXR5L3F1YW50aXR5LmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9xdWFudGl0eURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlEaXNwYXRjaGVyKTtcblxudmFyIF9kaXN0YW5jZUNsYXNzID0gcmVxdWlyZSgnLi4vZGlzdGFuY2UvZGlzdGFuY2UuY2xhc3MuanMnKTtcblxudmFyIF9kaXN0YW5jZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlQ2xhc3MpO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmFjdGlvbnMuanMnKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VBY3Rpb25zKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9kaXN0YW5jZS9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlRGlzcGF0Y2hlcik7XG5cbnZhciBfcmVzdWx0c0FjdGlvbnMgPSByZXF1aXJlKCcuL3Jlc3VsdHMuYWN0aW9ucy5qcycpO1xuXG52YXIgX3Jlc3VsdHNBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc3VsdHNBY3Rpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVzdWx0c1N0b3JlID0gKGZ1bmN0aW9uIChfU3RvcmUpIHtcbiAgX2luaGVyaXRzKFJlc3VsdHNTdG9yZSwgX1N0b3JlKTtcblxuICBmdW5jdGlvbiBSZXN1bHRzU3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3VsdHNTdG9yZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVzdWx0c1N0b3JlKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnF1YW50aXR5ID0gbmV3IF9xdWFudGl0eUNsYXNzMi5kZWZhdWx0KHt9KTtcbiAgICBfdGhpcy5kaXN0YW5jZSA9IG5ldyBfZGlzdGFuY2VDbGFzczIuZGVmYXVsdCh7fSk7XG5cbiAgICBfcXVhbnRpdHlEaXNwYXRjaGVyMi5kZWZhdWx0LnJlZ2lzdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgX3RoaXMuX3VwZGF0ZVF1YW50aXR5Q2xhc3MobGlzdGVuZXIpO1xuXG4gICAgICBfdGhpcy51cGRhdGVSZXN1bHRzKCk7XG4gICAgfSk7XG5cbiAgICBfZGlzdGFuY2VEaXNwYXRjaGVyMi5kZWZhdWx0LnJlZ2lzdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgX3RoaXMuX3VwZGF0ZURpc3RhbmNlQ2xhc3MobGlzdGVuZXIpO1xuXG4gICAgICBfdGhpcy51cGRhdGVSZXN1bHRzKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3VsdHNTdG9yZSwgW3tcbiAgICBrZXk6ICdfdXBkYXRlUXVhbnRpdHlDbGFzcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVRdWFudGl0eUNsYXNzKGxpc3RlbmVyKSB7XG4gICAgICBzd2l0Y2ggKGxpc3RlbmVyLnR5cGUpIHtcbiAgICAgICAgY2FzZSBfcXVhbnRpdHlBY3Rpb25zMi5kZWZhdWx0LlZBTFVFX0NIQU5HRUQ6XG4gICAgICAgICAgdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB1bml0OiB0aGlzLnF1YW50aXR5LnVuaXQsXG4gICAgICAgICAgICB2YWx1ZTogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfcXVhbnRpdHlBY3Rpb25zMi5kZWZhdWx0LlVOSVRfQ0hBTkdFRDpcbiAgICAgICAgICB0aGlzLnF1YW50aXR5ID0gbmV3IF9xdWFudGl0eUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnF1YW50aXR5LnZhbHVlLFxuICAgICAgICAgICAgdW5pdDogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hhbmdlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZURpc3RhbmNlQ2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlRGlzdGFuY2VDbGFzcyhsaXN0ZW5lcikge1xuICAgICAgc3dpdGNoIChsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgIGNhc2UgX2Rpc3RhbmNlQWN0aW9uczIuZGVmYXVsdC5WQUxVRV9DSEFOR0VEOlxuICAgICAgICAgIHRoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdW5pdDogdGhpcy5kaXN0YW5jZS51bml0LFxuICAgICAgICAgICAgdmFsdWU6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX2Rpc3RhbmNlQWN0aW9uczIuZGVmYXVsdC5VTklUX0NIQU5HRUQ6XG4gICAgICAgICAgdGhpcy5kaXN0YW5jZSA9IG5ldyBfZGlzdGFuY2VDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5kaXN0YW5jZS52YWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoYW5nZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZVJlc3VsdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVSZXN1bHRzKCkge1xuICAgICAgX3Jlc3VsdHNBY3Rpb25zMi5kZWZhdWx0LmNoYW5nZVJlc3VsdCh7XG4gICAgICAgIHF1YW50aXR5OiB0aGlzLnF1YW50aXR5LFxuICAgICAgICBkaXN0YW5jZTogdGhpcy5kaXN0YW5jZVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlc3VsdHNTdG9yZTtcbn0pKF9zdG9yZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJlc3VsdHNTdG9yZTtcblxufSx7XCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5hY3Rpb25zLmpzXCI6OCxcIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmNsYXNzLmpzXCI6OSxcIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanNcIjoxMCxcIi4uL3F1YW50aXR5L3F1YW50aXR5LmFjdGlvbnMuanNcIjoxNixcIi4uL3F1YW50aXR5L3F1YW50aXR5LmNsYXNzLmpzXCI6MTcsXCIuLi9xdWFudGl0eS9xdWFudGl0eS5kaXNwYXRjaGVyLmpzXCI6MTgsXCIuLi90b29scy9zdG9yZS5qc1wiOjI5LFwiLi9yZXN1bHRzLmFjdGlvbnMuanNcIjoyNX1dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBEaXNwYXRjaGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRGlzcGF0Y2hlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzcGF0Y2hlcik7XG5cbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGlzcGF0Y2hlciwgW3tcbiAgICBrZXk6IFwiZGlzcGF0Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcGF0Y2gob2JqKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyKG9iaik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVnaXN0ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIoY2FsbGJhY2spIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IFN5bWJvbCgpO1xuXG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc2V0KGxpc3RlbmVyLCBjYWxsYmFjayk7XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5yZWdpc3RlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERpc3BhdGNoZXI7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXNwYXRjaGVyO1xuXG59LHt9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU3RvcmUgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdG9yZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RvcmUpO1xuXG4gICAgdGhpcy5fbGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN0b3JlLCBbe1xuICAgIGtleTogXCJjaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlKCkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcigpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBTeW1ib2woKTtcblxuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNldChsaXN0ZW5lciwgY2FsbGJhY2spO1xuXG4gICAgICByZXR1cm4gbGlzdGVuZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVucmVnaXN0ZXJDaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlckNoYW5nZShsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdG9yZTtcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFN0b3JlO1xuXG59LHt9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSA9IGRlZmluZUNvbnN0UHJvcGVydHk7XG5mdW5jdGlvbiBkZWZpbmVDb25zdFByb3BlcnR5KG9iaiwgcHJvcCwgdmFsdWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG59LHt9XX0se30sWzE0XSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlpHOXRMbXB6TDJScGMzUXZaR3B6TDJRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlpHOXRMbXB6TDJScGMzUXZaR3B6TDJScWMyWjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMlJ2YlM1cWN5OWthWE4wTDJScWN5OW1hVzVrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJSdmJTNXFjeTlrYVhOMEwyUnFjeTl0WVc1cGNIVnNZWFJwYjI0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlpHOXRMbXB6TDJScGMzUXZaR3B6TDNOMGVXeGxjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlrYjIwdWFuTXZaR2x6ZEM5cGJtUmxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlrYjIwdWFuTXZaR2x6ZEM5MWRHbHNMMmgwYld3dWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDJScGMzUmhibU5sTDJScGMzUmhibU5sTG1GamRHbHZibk11YW5NaUxDSndkV0pzYVdNdmMzSmpMMlJwYzNSaGJtTmxMMlJwYzNSaGJtTmxMbU5zWVhOekxtcHpJaXdpY0hWaWJHbGpMM055WXk5a2FYTjBZVzVqWlM5a2FYTjBZVzVqWlM1a2FYTndZWFJqYUdWeUxtcHpJaXdpY0hWaWJHbGpMM055WXk5a2FYTjBZVzVqWlM5a2FYTjBZVzVqWlM1cWN5SXNJbkIxWW14cFl5OXpjbU12WkdsemRHRnVZMlV2WkdsemRHRnVZMlV1YzNSdmNtVXVhbk1pTENKd2RXSnNhV012YzNKakwyaGxZV1JsY2k5b1pXRmtaWEl1YW5NaUxDSndkV0pzYVdNdmMzSmpMMmx1WkdWNExtcHpJaXdpY0hWaWJHbGpMM055WXk5cGJuQjFkSE12YVc1d2RYUnpMV052Ym5SaGFXNWxjaTVxY3lJc0luQjFZbXhwWXk5emNtTXZjWFZoYm5ScGRIa3ZjWFZoYm5ScGRIa3VZV04wYVc5dWN5NXFjeUlzSW5CMVlteHBZeTl6Y21NdmNYVmhiblJwZEhrdmNYVmhiblJwZEhrdVkyeGhjM011YW5NaUxDSndkV0pzYVdNdmMzSmpMM0YxWVc1MGFYUjVMM0YxWVc1MGFYUjVMbVJwYzNCaGRHTm9aWEl1YW5NaUxDSndkV0pzYVdNdmMzSmpMM0YxWVc1MGFYUjVMM0YxWVc1MGFYUjVMbXB6SWl3aWNIVmliR2xqTDNOeVl5OXhkV0Z1ZEdsMGVTOXhkV0Z1ZEdsMGVTNXpkRzl5WlM1cWN5SXNJbkIxWW14cFl5OXpjbU12Y21WemRXeDBjeTltZFdWc0xXTnZibk4xYlhCMGFXOXVMMloxWld3dFkyOXVjM1Z0Y0hScGIyNHVZMnhoYzNNdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNKbGMzVnNkSE12Wm5WbGJDMWpiMjV6ZFcxd2RHbHZiaTltZFdWc0xXTnZibk4xYlhCMGFXOXVMbXB6SWl3aWNIVmliR2xqTDNOeVl5OXlaWE4xYkhSekwyWjFaV3d0WTI5dWMzVnRjSFJwYjI0dlpuVmxiQzFqYjI1emRXMXdkR2x2Ymk1emRHOXlaUzVxY3lJc0luQjFZbXhwWXk5emNtTXZjbVZ6ZFd4MGN5OXlaWE4xYkhSekxXTnZiblJoYVc1bGNpNXFjeUlzSW5CMVlteHBZeTl6Y21NdmNtVnpkV3gwY3k5eVpYTjFiSFJ6TG1GamRHbHZibk11YW5NaUxDSndkV0pzYVdNdmMzSmpMM0psYzNWc2RITXZjbVZ6ZFd4MGN5NWthWE53WVhSamFHVnlMbXB6SWl3aWNIVmliR2xqTDNOeVl5OXlaWE4xYkhSekwzSmxjM1ZzZEhNdWMzUnZjbVV1YW5NaUxDSndkV0pzYVdNdmMzSmpMM1J2YjJ4ekwyUnBjM0JoZEdOb1pYSXVhbk1pTENKd2RXSnNhV012YzNKakwzUnZiMnh6TDNOMGIzSmxMbXB6SWl3aWNIVmliR2xqTDNOeVl5OTBiMjlzY3k5MWRHbHNjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU0xUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOMlJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEycERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGRGRFMUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU0xUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN096dEpRMjVEY1VJc1pVRkJaVHRYUVVGbUxHVkJRV1U3TUVKQlFXWXNaVUZCWlRzN08yVkJRV1lzWlVGQlpUczdaME5CUTJZc1MwRkJTeXhGUVVGRk8wRkJRM2hDTEcxRFFVRnRRaXhSUVVGUkxFTkJRVU03UVVGRE1VSXNXVUZCU1N4RlFVRkZMR1ZCUVdVc1EwRkJReXhoUVVGaE8wRkJRMjVETEZsQlFVa3NSVUZCUlN4TFFVRkxPMDlCUTFvc1EwRkJReXhEUVVGRE8wdEJRMG83T3pzclFrRkZhVUlzU1VGQlNTeEZRVUZGTzBGQlEzUkNMRzFEUVVGdFFpeFJRVUZSTEVOQlFVTTdRVUZETVVJc1dVRkJTU3hGUVVGRkxHVkJRV1VzUTBGQlF5eFpRVUZaTzBGQlEyeERMRmxCUVVrc1JVRkJSU3hKUVVGSk8wOUJRMWdzUTBGQlF5eERRVUZETzB0QlEwbzdPenRUUVdKclFpeGxRVUZsT3pzN2EwSkJRV1lzWlVGQlpUczdRVUZuUW5CRExGZEJiRUpSTEcxQ1FVRnRRaXhGUVd0Q1VDeGxRVUZsTEVWQlFVVXNaVUZCWlN4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGFFVXNWMEZ1UWxFc2JVSkJRVzFDTEVWQmJVSlFMR1ZCUVdVc1JVRkJSU3hqUVVGakxFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXpzN096czdPenM3T3pzN096dEpRM0JDTVVNc1VVRkJVVHRCUVVNelFpeFhRVVJ0UWl4UlFVRlJMRTlCUTA4N2VVSkJRWEpDTEVsQlFVazdVVUZCU2l4SlFVRkpMRFpDUVVGRExFbEJRVWs3TUVKQlFVVXNTMEZCU3p0UlFVRk1MRXRCUVVzc09FSkJRVU1zUTBGQlF6czdNRUpCUkZvc1VVRkJVVHM3UVVGRmVrSXNVVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGFrSXNVVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UjBGRGNFSTdPMlZCU210Q0xGRkJRVkU3T3paQ1FVMXNRaXhMUVVGTExFVkJRVVU3UVVGRFpDeFZRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dExRVU01UWpzN08xTkJVbXRDTEZGQlFWRTdPenRyUWtGQlVpeFJRVUZST3pzN096czdPenM3T3pzN096czdhMEpEUldRc01FSkJRV2RDT3pzN096czdPenM3TzFGRGNVSm1MRlZCUVZVc1IwRkJWaXhWUVVGVk96czdPenM3T3pzN096czdPenM3T3pzN1FVRnNRakZDTEVsQlFVa3NVMEZCVXl4SFFVRkhPMEZCUTJRc1RVRkJTU3h4UTBGTFNEdERRVU5HTEVOQlFVTTdPMEZCUlVZc1NVRkJTU3hWUVVGVkxFZEJRVWM3UVVGRFppeFpRVUZWTEVWQlFVVXNTVUZCU1R0QlFVTm9RaXhYUVVGVExFVkJRVVVzU1VGQlNUdEJRVU5tTEZGQlFVMHNSVUZCUlN4SlFVRkpPMEZCUTFvc1QwRkJTeXhGUVVGRkxFbEJRVWs3UTBGRFdpeERRVUZET3p0QlFVVkdMRWxCUVVrc1lVRkJZU3haUVVGQkxFTkJRVU03TzBGQlJWZ3NVMEZCVXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRM0pETEZsQlFWVXNRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRla1FzWlVGQllTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUXpGQ0xHOUNRVUZyUWl4RlFVRkZMRU5CUVVNN08wRkJSWEpDTEdWQlFXRXNSMEZCUnl3MlFrRkJiVUlzUTBGQlF6dEJRVU53UXl4bFFVRmhMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmM3UVVGRGFFTXNaVUZCVnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdSMEZETVVNc1EwRkJReXhEUVVGRE96dEJRVVZJTERSQ1FVRm5RaXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYWtNc1pVRkJZU3hEUVVGRExHdENRVUZyUWl4RlFVRkZMRU5CUVVNN1EwRkRjRU03TzBGQlJVUXNVMEZCVXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM3BDTEZsQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dERRVU51UXpzN1FVRkZSQ3hUUVVGVExHRkJRV0VzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEYWtNc1dVRkJWU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdRVUZEYmtNc1dVRkJWU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMEZCUTNKRkxGbEJRVlVzUTBGQlF5eExRVUZMTEVkQlFVY3NWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1EwRkJRenREUVVOd1JUczdRVUZGUkN4VFFVRlRMR3RDUVVGclFpeEhRVUZITzBGQlF6VkNMRmxCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVk1zUzBGQlN5eEZRVUZGTzBGQlF6RkVMRGhDUVVGblFpeFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEhRVU5xUkN4RFFVRkRMRU5CUVVNN1EwRkRTanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdTVU0zUTI5Q0xHRkJRV0U3V1VGQllpeGhRVUZoT3p0QlFVTm9ReXhYUVVSdFFpeGhRVUZoTEVkQlEyeENPekJDUVVSTExHRkJRV0U3TzNWRlFVRmlMR0ZCUVdFN08wRkJTVGxDTEZWQlFVc3NVVUZCVVN4SFFVRkhMRFJDUVVGaExFVkJRVVVzUTBGQlF5eERRVUZET3p0QlFVVnFReXhWUVVGTExGRkJRVkVzUjBGQlJ5dzJRa0ZCYlVJc1VVRkJVU3hEUVVGRExGVkJRVU1zVVVGQlVTeEZRVUZMTzBGQlEzaEVMR05CUVU4c1VVRkJVU3hEUVVGRExFbEJRVWs3UVVGRGNFSXNZVUZCU3l3d1FrRkJaMElzWVVGQllUdEJRVU5vUXl4blFrRkJTeXhSUVVGUkxFZEJRVWNzTkVKQlFXRTdRVUZETTBJc1owSkJRVWtzUlVGQlJTeE5RVUZMTEZGQlFWRXNRMEZCUXl4SlFVRkpPMEZCUTNoQ0xHbENRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN1YwRkRja0lzUTBGQlF5eERRVUZET3p0QlFVVklMR2RDUVVGTk96dEJRVUZCTEVGQlJWSXNZVUZCU3l3d1FrRkJaMElzV1VGQldUdEJRVU12UWl4blFrRkJTeXhSUVVGUkxFZEJRVWNzTkVKQlFXRTdRVUZETTBJc2FVSkJRVXNzUlVGQlJTeE5RVUZMTEZGQlFWRXNRMEZCUXl4TFFVRkxPMEZCUXpGQ0xHZENRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN1YwRkRjRUlzUTBGQlF5eERRVUZET3p0QlFVVklMR2RDUVVGTk8wRkJRVUVzVDBGRFVEczdRVUZGUkN4WlFVRkxMRTFCUVUwc1JVRkJSU3hEUVVGRE8wdEJRMllzUTBGQlF5eERRVUZET3p0SFFVTktPenRsUVROQ2EwSXNZVUZCWVRzN2VVTkJOa0pZTzBGQlEyNUNMRzFEUVVGdFFpeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wdEJRemxET3pzN1UwRXZRbXRDTEdGQlFXRTdPenRyUWtGQllpeGhRVUZoT3pzN096czdPenM3TzFGRFNXeENMRlZCUVZVc1IwRkJWaXhWUVVGVk96czdPenM3T3pzN08wRkJVakZDTEVsQlFVa3NVMEZCVXl4SFFVRkhPMEZCUTJRc1RVRkJTU3h4UTBGSlNEdERRVU5HTEVOQlFVTTdPMEZCUlVzc1UwRkJVeXhWUVVGVkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEzSkRMRmxCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPME5CUTI1RE96czdPenM3T3pzN096dEpRMVpYTEUxQlFVMDdPenM3U1VGRFRpeGxRVUZsT3pzN08wbEJRMllzWjBKQlFXZENPenRKUVVsb1FpeFBRVUZQT3pzN08wbEJSbEFzVVVGQlVUczdPenRKUVVOU0xGRkJRVkU3T3pzN096dEJRVWR3UWl4SlFVRkpMR2RDUVVGblFpeEhRVUZITEcxQ1FVRkpMR1ZCUVdVc1EwRkJReXhEUVVGRE8wRkJRelZETEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzYlVKQlFVa3NlVUpCUVhsQ0xFTkJRVU1zUTBGQlF6dEJRVU4wUkN4SlFVRkpMR2xDUVVGcFFpeEhRVUZITEcxQ1FVRkpMREJDUVVFd1FpeERRVUZETEVOQlFVTTdPMEZCUlhoRUxFbEJRVWtzWVVGQllTeEhRVUZITEVWQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJReXhEUVVGRE8wRkJRMmhETEVsQlFVa3NZVUZCWVN4SFFVRkhMRVZCUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlF5eERRVUZET3p0QlFVVnFReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEyUXNUVUZCU1N4RlFVRkZMRWRCUVVjN1FVRkRWQ3hUUVVGUExFVkJRVVVzYVVKQlFWTXNTMEZCU3l4RlFVRkZPMEZCUTNaQ0xHbENRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTNSQ0xGZEJRVThzUTBGQlF5eHpRa0ZCYzBJc1EwRkJRenRCUVVNM1FpeGpRVUZSTEVWQlFVVXNZVUZCWVR0QlFVTjJRaXhqUVVGUkxFVkJRVVVzWVVGQllUdExRVU40UWl4RFFVRkRMRU5CUVVNN1IwRkRTanREUVVOR0xFTkJRVU1zUTBGQlF6czdRVUZGU0N4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRMlFzVFVGQlNTeEZRVUZGTEVsQlFVazdRVUZEVml4VFFVRlBMRVZCUVVVc2FVSkJRVk1zUzBGQlN5eEZRVUZGTzBGQlEzWkNMR2xDUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEzUkNMRmRCUVU4c1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0QlFVTTNRaXhqUVVGUkxFVkJRVVVzWVVGQllUdEJRVU4yUWl4alFVRlJMRVZCUVVVc1lVRkJZVHRMUVVONFFpeERRVUZETEVOQlFVTTdSMEZEU2p0RFFVTkdMRU5CUVVNc1EwRkJRenM3UVVGRlNDeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdRVUZEY0VNc1pVRkJaU3hEUVVGRExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8wRkJRemRETEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE96dEJRVVV2UXl4UFFVRlBMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTTdRVUZETjBJc1ZVRkJVU3hGUVVGRkxHRkJRV0U3UVVGRGRrSXNWVUZCVVN4RlFVRkZMR0ZCUVdFN1EwRkRlRUlzUTBGQlF5eERRVUZET3pzN096czdPenM3TzFGRGVrSmhMRlZCUVZVc1IwRkJWaXhWUVVGVk96czdPenM3T3p0SlFYQkNaQ3hSUVVGUk96czdPMGxCUTFJc1VVRkJVVHM3T3pzN096czdRVUZGY0VJc1NVRkJTU3hUUVVGVExFZEJRVWM3UVVGRFpDeE5RVUZKTEhGRFFVMUlPME5CUTBZc1EwRkJRenM3UVVGRlJpeEpRVUZKTEZWQlFWVXNSMEZCUnp0QlFVTm1MRmxCUVZVc1JVRkJSU3hKUVVGSk8wRkJRMmhDTEdsQ1FVRmxMRVZCUVVVc1NVRkJTVHRCUVVOeVFpeG5Ra0ZCWXl4RlFVRkZMRWxCUVVrN1FVRkRjRUlzWjBKQlFXTXNSVUZCUlN4SlFVRkpPME5CUTNKQ0xFTkJRVU03TzBGQlJVc3NVMEZCVXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRM0pETEZsQlFWVXNRMEZCUXl4bFFVRmxMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSUzlFTEdWQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenM3UVVGRk1VSXNWVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdRVUZETDBNc1ZVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1EwRkRhRVE3TzBGQlJVUXNVMEZCVXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRMnBETEZsQlFWVXNRMEZCUXl4VlFVRlZMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wRkJRMjVETEZsQlFWVXNRMEZCUXl4alFVRmpMRWRCUVVjc1ZVRkJWU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEJRVU12UlN4WlFVRlZMRU5CUVVNc1kwRkJZeXhIUVVGSExGVkJRVlVzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRMEZEYUVZN096czdPenM3T3pzN096czdPenM3T3pzN096dEpReTlDYjBJc1pVRkJaVHRYUVVGbUxHVkJRV1U3TUVKQlFXWXNaVUZCWlRzN08yVkJRV1lzWlVGQlpUczdaME5CUTJZc1MwRkJTeXhGUVVGRk8wRkJRM2hDTEcxRFFVRnRRaXhSUVVGUkxFTkJRVU03UVVGRE1VSXNXVUZCU1N4RlFVRkZMR1ZCUVdVc1EwRkJReXhoUVVGaE8wRkJRMjVETEZsQlFVa3NSVUZCUlN4TFFVRkxPMDlCUTFvc1EwRkJReXhEUVVGRE8wdEJRMG83T3pzclFrRkZhVUlzU1VGQlNTeEZRVUZGTzBGQlEzUkNMRzFEUVVGdFFpeFJRVUZSTEVOQlFVTTdRVUZETVVJc1dVRkJTU3hGUVVGRkxHVkJRV1VzUTBGQlF5eFpRVUZaTzBGQlEyeERMRmxCUVVrc1JVRkJSU3hKUVVGSk8wOUJRMWdzUTBGQlF5eERRVUZETzB0QlEwbzdPenRUUVdKclFpeGxRVUZsT3pzN2EwSkJRV1lzWlVGQlpUczdRVUZuUW5CRExGZEJiRUpSTEcxQ1FVRnRRaXhGUVd0Q1VDeGxRVUZsTEVWQlFVVXNaVUZCWlN4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGFFVXNWMEZ1UWxFc2JVSkJRVzFDTEVWQmJVSlFMR1ZCUVdVc1JVRkJSU3hqUVVGakxFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXpzN096czdPenM3T3pzN096dEpRM0JDTVVNc1VVRkJVVHRCUVVNelFpeFhRVVJ0UWl4UlFVRlJMRTlCUTAwN2VVSkJRWEJDTEVsQlFVazdVVUZCU2l4SlFVRkpMRFpDUVVGRExFZEJRVWM3TUVKQlFVVXNTMEZCU3p0UlFVRk1MRXRCUVVzc09FSkJRVU1zUTBGQlF6czdNRUpCUkZnc1VVRkJVVHM3UVVGRmVrSXNVVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGFrSXNVVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UjBGRGNFSTdPMlZCU210Q0xGRkJRVkU3T3paQ1FVMXNRaXhMUVVGTExFVkJRVVU3UVVGRFpDeFZRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dExRVU01UWpzN08xTkJVbXRDTEZGQlFWRTdPenRyUWtGQlVpeFJRVUZST3pzN096czdPenM3T3pzN096czdhMEpEUldRc01FSkJRV2RDT3pzN096czdPenM3TzFGRGNVSm1MRlZCUVZVc1IwRkJWaXhWUVVGVk96czdPenM3T3pzN096czdPenM3T3pzN1FVRnNRakZDTEVsQlFVa3NVMEZCVXl4SFFVRkhPMEZCUTJRc1RVRkJTU3h4UTBGTFNEdERRVU5HTEVOQlFVTTdPMEZCUlVZc1NVRkJTU3hWUVVGVkxFZEJRVWM3UVVGRFppeFpRVUZWTEVWQlFVVXNTVUZCU1R0QlFVTm9RaXhYUVVGVExFVkJRVVVzU1VGQlNUdEJRVU5tTEZGQlFVMHNSVUZCUlN4SlFVRkpPMEZCUTFvc1QwRkJTeXhGUVVGRkxFbEJRVWs3UTBGRFdpeERRVUZET3p0QlFVVkdMRWxCUVVrc1lVRkJZU3haUVVGQkxFTkJRVU03TzBGQlJWZ3NVMEZCVXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRM0pETEZsQlFWVXNRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRla1FzWlVGQllTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUXpGQ0xHOUNRVUZyUWl4RlFVRkZMRU5CUVVNN08wRkJSWEpDTEdWQlFXRXNSMEZCUnl3MlFrRkJiVUlzUTBGQlF6dEJRVU53UXl4bFFVRmhMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmM3UVVGRGFFTXNaVUZCVnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdSMEZETVVNc1EwRkJReXhEUVVGRE96dEJRVVZJTERSQ1FVRm5RaXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVNc1pVRkJZU3hEUVVGRExHdENRVUZyUWl4RlFVRkZMRU5CUVVNN1EwRkRjRU03TzBGQlJVUXNVMEZCVXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM3BDTEZsQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dERRVU51UXpzN1FVRkZSQ3hUUVVGVExHRkJRV0VzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEYWtNc1dVRkJWU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdRVUZEYmtNc1dVRkJWU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMEZCUTNKRkxGbEJRVlVzUTBGQlF5eExRVUZMTEVkQlFVY3NWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1EwRkJRenREUVVOd1JUczdRVUZGUkN4VFFVRlRMR3RDUVVGclFpeEhRVUZITzBGQlF6VkNMRmxCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVk1zUzBGQlN5eEZRVUZGTzBGQlF6RkVMRGhDUVVGblFpeFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEhRVU5xUkN4RFFVRkRMRU5CUVVNN1EwRkRTanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdTVU0zUTI5Q0xHRkJRV0U3V1VGQllpeGhRVUZoT3p0QlFVTm9ReXhYUVVSdFFpeGhRVUZoTEVkQlEyeENPekJDUVVSTExHRkJRV0U3TzNWRlFVRmlMR0ZCUVdFN08wRkJTVGxDTEZWQlFVc3NVVUZCVVN4SFFVRkhMRFJDUVVGaExFVkJRVVVzUTBGQlF5eERRVUZET3p0QlFVVnFReXhWUVVGTExGRkJRVkVzUjBGQlJ5dzJRa0ZCYlVJc1VVRkJVU3hEUVVGRExGVkJRVU1zVVVGQlVTeEZRVUZMTzBGQlEzaEVMR05CUVU4c1VVRkJVU3hEUVVGRExFbEJRVWs3UVVGRGNFSXNZVUZCU3l3d1FrRkJaMElzWVVGQllUdEJRVU5vUXl4blFrRkJTeXhSUVVGUkxFZEJRVWNzTkVKQlFXRTdRVUZETTBJc1owSkJRVWtzUlVGQlJTeE5RVUZMTEZGQlFWRXNRMEZCUXl4SlFVRkpPMEZCUTNoQ0xHbENRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN1YwRkRja0lzUTBGQlF5eERRVUZET3p0QlFVVklMR2RDUVVGTk96dEJRVUZCTEVGQlJWSXNZVUZCU3l3d1FrRkJaMElzV1VGQldUdEJRVU12UWl4blFrRkJTeXhSUVVGUkxFZEJRVWNzTkVKQlFXRTdRVUZETTBJc2FVSkJRVXNzUlVGQlJTeE5RVUZMTEZGQlFWRXNRMEZCUXl4TFFVRkxPMEZCUXpGQ0xHZENRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN1YwRkRjRUlzUTBGQlF5eERRVUZET3p0QlFVVklMR2RDUVVGTk8wRkJRVUVzVDBGRFVEczdRVUZGUkN4WlFVRkxMRTFCUVUwc1JVRkJSU3hEUVVGRE8wdEJRMllzUTBGQlF5eERRVUZET3p0SFFVTktPenRsUVROQ2EwSXNZVUZCWVRzN2VVTkJOa0pZTzBGQlEyNUNMRzFEUVVGdFFpeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wdEJRemxET3pzN1UwRXZRbXRDTEdGQlFXRTdPenRyUWtGQllpeGhRVUZoT3pzN096czdPenM3T3pzN08wbERUbUlzWjBKQlFXZENPMWRCUVdoQ0xHZENRVUZuUWpzd1FrRkJhRUlzWjBKQlFXZENPenM3WlVGQmFFSXNaMEpCUVdkQ096c3JRa0ZEU3pzclFrRkJNMElzVVVGQlVUdFZRVUZTTEZGQlFWRXNhVU5CUVVNc1JVRkJSVHNyUWtGQlJTeFJRVUZSTzFWQlFWSXNVVUZCVVN4cFEwRkJReXhGUVVGRk96dEJRVU51UXl4VlFVRkpMRTFCUVUwc1IwRkJSenRCUVVOWUxHRkJRVXNzUlVGQlJTeERRVUZETzBGQlExSXNXVUZCU1N4RlFVRkxMRkZCUVZFc1EwRkJReXhKUVVGSkxGTkJRVWtzVVVGQlVTeERRVUZETEVsQlFVa3NRVUZCUlR0UFFVTXhReXhEUVVGRE96dEJRVVZHTEZWQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTjBReXhsUVVGUExFMUJRVTBzUTBGQlF6dFBRVU5tT3p0QlFVVkVMRmxCUVUwc1EwRkJReXhMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRE96dEJRVVV2UXl4WlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjRSQ3hoUVVGUExFMUJRVTBzUTBGQlF6dExRVU5tT3pzN1UwRm1hMElzWjBKQlFXZENPenM3YTBKQlFXaENMR2RDUVVGblFqczdPenM3T3pzN096dFJRM0ZDY2tJc1ZVRkJWU3hIUVVGV0xGVkJRVlU3T3pzN096czdPenM3T3pzN08wRkJha0l4UWl4SlFVRkpMRk5CUVZNc1IwRkJSenRCUVVOa0xFMUJRVWtzY1VOQlNVZzdRMEZEUml4RFFVRkRPenRCUVVWR0xFbEJRVWtzVlVGQlZTeEhRVUZITzBGQlEyWXNXVUZCVlN4RlFVRkZMRWxCUVVrN1FVRkRhRUlzYTBKQlFXZENMRVZCUVVVc1NVRkJTVHRCUVVOMFFpeFhRVUZUTEVWQlFVVXNTVUZCU1R0QlFVTm1MRmxCUVZVc1JVRkJSU3hKUVVGSk8wTkJRMnBDTEVOQlFVTTdPMEZCUlVZc1NVRkJTU3h2UWtGQmIwSXNXVUZCUVN4RFFVRkRPenRCUVVWc1FpeFRRVUZUTEZWQlFWVXNRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRja01zV1VGQlZTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMmhGTEdWQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenM3UVVGRk1VSXNjMEpCUVc5Q0xFZEJRVWNzYjBOQlFUQkNMRU5CUVVNN08wRkJSV3hFTEhOQ1FVRnZRaXhEUVVGRExGRkJRVkVzUTBGQlF5eFpRVUZYTzBGQlEzWkRMREJDUVVGelFpeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBkQlEzUkVMRU5CUVVNc1EwRkJRenM3UVVGRlNDeHpRa0ZCYjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dERRVU12UWpzN1FVRkZSQ3hUUVVGVExITkNRVUZ6UWl4RFFVRkRMRTlCUVU4c1JVRkJSVHRCUVVOMlF5eFpRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlF6bERMRmxCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eEhRVUZITEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNN1EwRkRha1E3TzBGQlJVUXNVMEZCVXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRMnBETEZsQlFWVXNRMEZCUXl4VlFVRlZMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wRkJRMjVETEZsQlFWVXNRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dEJRVU53UlN4WlFVRlZMRU5CUVVNc1ZVRkJWU3hIUVVGSExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdRMEZETVVVN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUTNCRGIwSXNiMEpCUVc5Q08xbEJRWEJDTEc5Q1FVRnZRanM3UVVGRGRrTXNWMEZFYlVJc2IwSkJRVzlDTEVkQlEzcENPekJDUVVSTExHOUNRVUZ2UWpzN2RVVkJRWEJDTEc5Q1FVRnZRanM3UVVGSmNrTXNWVUZCU3l4UFFVRlBMRWRCUVVjc0swSkJRV2xDTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenM3UVVGRmVrTXNaME5CUVdsQ0xGRkJRVkVzUTBGQlF5eFZRVUZETEZGQlFWRXNSVUZCU3p0QlFVTjBReXhqUVVGUExGRkJRVkVzUTBGQlF5eEpRVUZKTzBGQlEzQkNMR0ZCUVVzc2VVSkJRVEpDTEdOQlFXTTdRVUZETlVNc1owSkJRVXNzVDBGQlR5eEhRVUZITEN0Q1FVRnBRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNCRUxHZENRVUZMTEUxQlFVMHNRMEZCUXl4TlFVRkxMRTlCUVU4c1EwRkJReXhEUVVGRE96dEJRVVV4UWl4blFrRkJUVHRCUVVGQkxFOUJRMUE3UzBGRFJpeERRVUZETEVOQlFVTTdPMGRCUTBvN08xTkJabXRDTEc5Q1FVRnZRanM3TzJ0Q1FVRndRaXh2UWtGQmIwSTdPenM3T3pzN096czdVVU5oZWtJc1ZVRkJWU3hIUVVGV0xGVkJRVlU3T3pzN096czdPMGxCYmtKa0xHTkJRV003T3pzN096czdPenM3T3p0QlFVY3hRaXhKUVVGSkxGbEJRVmtzV1VGQlFTeERRVUZET3p0QlFVVnFRaXhKUVVGSkxGTkJRVk1zUjBGQlJ6dEJRVU5rTEUxQlFVa3NjVU5CU1VnN1EwRkRSaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NWVUZCVlN4SFFVRkhPMEZCUTJZc1dVRkJWU3hGUVVGRkxFbEJRVWs3UVVGRGFFSXNiVUpCUVdsQ0xFVkJRVVVzU1VGQlNUdEJRVU4yUWl4cFFrRkJaU3hGUVVGRkxFbEJRVWs3UTBGRGRFSXNRMEZCUXpzN1FVRkZTeXhUUVVGVExGVkJRVlVzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEY2tNc1dVRkJWU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJwRkxHVkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1FVRkZNVUlzWTBGQldTeEhRVUZITERSQ1FVRnJRaXhEUVVGRE96dEJRVVZzUXl4blFrRkJZeXhEUVVGRExGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN08wRkJSWFJFTEdOQlFWa3NRMEZCUXl4aFFVRmhMRVZCUVVVc1EwRkJRenREUVVNNVFqczdRVUZGUkN4VFFVRlRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGFrTXNXVUZCVlN4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRGJrTXNXVUZCVlN4RFFVRkRMR1ZCUVdVc1IwRkJSeXhWUVVGVkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRU5CUVVNN1EwRkRNMFk3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlF5OUNiMElzWTBGQll6dFhRVUZrTEdOQlFXTTdNRUpCUVdRc1kwRkJZenM3TzJWQlFXUXNZMEZCWXpzN2FVTkJRMklzUzBGQlN5eEZRVUZGTzBGQlEzcENMR3REUVVGclFpeFJRVUZSTEVOQlFVTTdRVUZEZWtJc1dVRkJTU3hGUVVGRkxHTkJRV01zUTBGQlF5eGpRVUZqTzBGQlEyNURMRmxCUVVrc1JVRkJSU3hMUVVGTE8wOUJRMW9zUTBGQlF5eERRVUZETzB0QlEwbzdPenRUUVU1clFpeGpRVUZqT3pzN2EwSkJRV1FzWTBGQll6czdRVUZUYmtNc1YwRllVU3h0UWtGQmJVSXNSVUZYVUN4alFVRmpMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenM3T3pzN096czdPenM3T3pzN08ydENRMVpxUkN3d1FrRkJaMEk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEpRMVZXTEZsQlFWazdXVUZCV2l4WlFVRlpPenRCUVVNdlFpeFhRVVJ0UWl4WlFVRlpMRWRCUTJwQ096QkNRVVJMTEZsQlFWazdPM1ZGUVVGYUxGbEJRVms3TzBGQlNUZENMRlZCUVVzc1VVRkJVU3hIUVVGSExEUkNRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTJwRExGVkJRVXNzVVVGQlVTeEhRVUZITERSQ1FVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVZxUXl4cFEwRkJiVUlzVVVGQlVTeERRVUZETEZWQlFVTXNVVUZCVVN4RlFVRkxPMEZCUTNoRExGbEJRVXNzYjBKQlFXOUNMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03TzBGQlJYQkRMRmxCUVVzc1lVRkJZU3hGUVVGRkxFTkJRVU03UzBGRGRFSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHbERRVUZ0UWl4UlFVRlJMRU5CUVVNc1ZVRkJReXhSUVVGUkxFVkJRVXM3UVVGRGVFTXNXVUZCU3l4dlFrRkJiMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXpzN1FVRkZjRU1zV1VGQlN5eGhRVUZoTEVWQlFVVXNRMEZCUXp0TFFVTjBRaXhEUVVGRExFTkJRVU03TzBkQlEwbzdPMlZCYkVKclFpeFpRVUZaT3p0NVEwRnZRbFlzVVVGQlVTeEZRVUZGTzBGQlF6ZENMR05CUVU4c1VVRkJVU3hEUVVGRExFbEJRVWs3UVVGRGNFSXNZVUZCU3l3d1FrRkJaMElzWVVGQllUdEJRVU5vUXl4alFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExEUkNRVUZoTzBGQlF6TkNMR2RDUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpPMEZCUTNoQ0xHbENRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN1YwRkRja0lzUTBGQlF5eERRVUZET3p0QlFVVklMR2RDUVVGTk96dEJRVUZCTEVGQlJWSXNZVUZCU3l3d1FrRkJaMElzV1VGQldUdEJRVU12UWl4alFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExEUkNRVUZoTzBGQlF6TkNMR2xDUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxPMEZCUXpGQ0xHZENRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN1YwRkRjRUlzUTBGQlF5eERRVUZET3p0QlFVVklMR2RDUVVGTk8wRkJRVUVzVDBGRFVEczdRVUZGUkN4VlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03UzBGRFpqczdPM2xEUVVWdlFpeFJRVUZSTEVWQlFVVTdRVUZETjBJc1kwRkJUeXhSUVVGUkxFTkJRVU1zU1VGQlNUdEJRVU53UWl4aFFVRkxMREJDUVVGblFpeGhRVUZoTzBGQlEyaERMR05CUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzTkVKQlFXRTdRVUZETTBJc1owSkJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrN1FVRkRlRUlzYVVKQlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTVHRYUVVOeVFpeERRVUZETEVOQlFVTTdPMEZCUlVnc1owSkJRVTA3TzBGQlFVRXNRVUZGVWl4aFFVRkxMREJDUVVGblFpeFpRVUZaTzBGQlF5OUNMR05CUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzTkVKQlFXRTdRVUZETTBJc2FVSkJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzN1FVRkRNVUlzWjBKQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTVHRYUVVOd1FpeERRVUZETEVOQlFVTTdPMEZCUlVnc1owSkJRVTA3UVVGQlFTeFBRVU5RT3p0QlFVVkVMRlZCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dExRVU5tT3pzN2IwTkJSV1U3UVVGRFpDd3JRa0ZCWlN4WlFVRlpMRU5CUVVNN1FVRkRNVUlzWjBKQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVVHRCUVVOMlFpeG5Ra0ZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUk8wOUJRM2hDTEVOQlFVTXNRMEZCUXp0TFFVTktPenM3VTBGeVJXdENMRmxCUVZrN096dHJRa0ZCV2l4WlFVRlpPenM3T3pzN096czdPenM3TzBsRFdsb3NWVUZCVlR0QlFVTTNRaXhYUVVSdFFpeFZRVUZWTEVkQlEyWTdNRUpCUkVzc1ZVRkJWVHM3UVVGRk0wSXNVVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzBkQlF6ZENPenRsUVVoclFpeFZRVUZWT3pzMlFrRkxjRUlzUjBGQlJ5eEZRVUZGTzBGQlExb3NWVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlF5eFJRVUZSTzJWQlFVc3NVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJRenRQUVVGQkxFTkJRVU1zUTBGQlF6dExRVU4wUkRzN096WkNRVVZSTEZGQlFWRXNSVUZCUlR0QlFVTnFRaXhWUVVGSkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVWQlFVVXNRMEZCUXpzN1FVRkZlRUlzVlVGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZET3p0QlFVVjRReXhoUVVGUExGRkJRVkVzUTBGQlF6dExRVU5xUWpzN095dENRVVZWTEZGQlFWRXNSVUZCUlR0QlFVTnVRaXhoUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wdEJRM3BET3pzN1UwRnVRbXRDTEZWQlFWVTdPenRyUWtGQlZpeFZRVUZWT3pzN096czdPenM3T3pzN08wbERRVllzUzBGQlN6dEJRVU40UWl4WFFVUnRRaXhMUVVGTExFZEJRMVk3TUVKQlJFc3NTMEZCU3pzN1FVRkZkRUlzVVVGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8wZEJRemRDT3p0bFFVaHJRaXhMUVVGTE96czJRa0ZMWmp0QlFVTlFMRlZCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVTXNVVUZCVVR0bFFVRkxMRkZCUVZFc1JVRkJSVHRQUVVGQkxFTkJRVU1zUTBGQlF6dExRVU51UkRzN096WkNRVVZSTEZGQlFWRXNSVUZCUlR0QlFVTnFRaXhWUVVGSkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVWQlFVVXNRMEZCUXpzN1FVRkZlRUlzVlVGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZET3p0QlFVVjRReXhoUVVGUExGRkJRVkVzUTBGQlF6dExRVU5xUWpzN08zRkRRVVZuUWl4UlFVRlJMRVZCUVVVN1FVRkRla0lzWVVGQlR5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dExRVU42UXpzN08xTkJia0pyUWl4TFFVRkxPenM3YTBKQlFVd3NTMEZCU3pzN096czdPenM3VVVOQlZpeHRRa0ZCYlVJc1IwRkJia0lzYlVKQlFXMUNPMEZCUVRWQ0xGTkJRVk1zYlVKQlFXMUNMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZEY0VRc1VVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZPMEZCUXk5Q0xHTkJRVlVzUlVGQlJTeEpRVUZKTzBGQlEyaENMRmxCUVZFc1JVRkJSU3hMUVVGTE8wRkJRMllzWjBKQlFWa3NSVUZCUlN4TFFVRkxPMEZCUTI1Q0xGTkJRVXNzUlVGQlJTeExRVUZMTzBkQlEySXNRMEZCUXl4RFFVRkRPME5CUTBvaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaUJsS0hRc2JpeHlLWHRtZFc1amRHbHZiaUJ6S0c4c2RTbDdhV1lvSVc1YmIxMHBlMmxtS0NGMFcyOWRLWHQyWVhJZ1lUMTBlWEJsYjJZZ2NtVnhkV2x5WlQwOVhDSm1kVzVqZEdsdmJsd2lKaVp5WlhGMWFYSmxPMmxtS0NGMUppWmhLWEpsZEhWeWJpQmhLRzhzSVRBcE8ybG1LR2twY21WMGRYSnVJR2tvYnl3aE1DazdkbUZ5SUdZOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0dksxd2lKMXdpS1R0MGFISnZkeUJtTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWm4xMllYSWdiRDF1VzI5ZFBYdGxlSEJ2Y25Sek9udDlmVHQwVzI5ZFd6QmRMbU5oYkd3b2JDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYUmJiMTFiTVYxYlpWMDdjbVYwZFhKdUlITW9iajl1T21VcGZTeHNMR3d1Wlhod2IzSjBjeXhsTEhRc2JpeHlLWDF5WlhSMWNtNGdibHR2WFM1bGVIQnZjblJ6ZlhaaGNpQnBQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3Wm05eUtIWmhjaUJ2UFRBN2J6eHlMbXhsYm1kMGFEdHZLeXNwY3loeVcyOWRLVHR5WlhSMWNtNGdjMzBwSWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1WEc1MllYSWdYMmgwYld3Z1BTQnlaWEYxYVhKbEtDY3VMaTkxZEdsc0wyaDBiV3d1YW5NbktUdGNibHh1ZG1GeUlGOW9kRzFzTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJoMGJXd3BPMXh1WEc1MllYSWdYMjFoYm1sd2RXeGhkR2x2YmlBOUlISmxjWFZwY21Vb0p5NHZiV0Z1YVhCMWJHRjBhVzl1TG1wekp5azdYRzVjYm5aaGNpQmZabWx1WkNBOUlISmxjWFZwY21Vb0p5NHZabWx1WkM1cWN5Y3BPMXh1WEc1MllYSWdYM04wZVd4bGN5QTlJSEpsY1hWcGNtVW9KeTR2YzNSNWJHVnpMbXB6SnlrN1hHNWNiblpoY2lCemRIbHNaWE1nUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZYYVd4a1kyRnlaQ2hmYzNSNWJHVnpLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsVjJsc1pHTmhjbVFvYjJKcUtTQjdJR2xtSUNodlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVXBJSHNnY21WMGRYSnVJRzlpYWpzZ2ZTQmxiSE5sSUhzZ2RtRnlJRzVsZDA5aWFpQTlJSHQ5T3lCcFppQW9iMkpxSUNFOUlHNTFiR3dwSUhzZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUc5aWFpa2dleUJwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhaXdnYTJWNUtTa2dibVYzVDJKcVcydGxlVjBnUFNCdlltcGJhMlY1WFRzZ2ZTQjlJRzVsZDA5aWFpNWtaV1poZFd4MElEMGdiMkpxT3lCeVpYUjFjbTRnYm1WM1QySnFPeUI5SUgxY2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVablZ1WTNScGIyNGdaR3B6S0hSbGJYQnNZWFJsS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnZEdWdGNHeGhkR1VnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUNnd0xDQmZabWx1WkM1bWFXNWtLU2gwWlcxd2JHRjBaU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoMFpXMXdiR0YwWlNrcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCZmJHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ3dnYzNWaWMzUnpJRDBnUVhKeVlYa29YMnhsYmlBK0lERWdQeUJmYkdWdUlDMGdNU0E2SURBcExDQmZhMlY1SUQwZ01Uc2dYMnRsZVNBOElGOXNaVzQ3SUY5clpYa3JLeWtnZTF4dUlDQWdJQ0FnYzNWaWMzUnpXMTlyWlhrZ0xTQXhYU0E5SUdGeVozVnRaVzUwYzF0ZmEyVjVYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1gyaDBiV3d5TG1SbFptRjFiSFF1WVhCd2JIa29kVzVrWldacGJtVmtMQ0JiZEdWdGNHeGhkR1ZkTG1OdmJtTmhkQ2h6ZFdKemRITXBLVHRjYmlBZ2ZWeHVmVnh1WEc1a2FuTXVZM0psWVhSbElEMGdYMjFoYm1sd2RXeGhkR2x2Ymk1amNtVmhkR1U3WEc1a2FuTXVZM056SUQwZ2MzUjViR1Z6TG1OemN6dGNibVJxY3k1aFpHUkRiR0Z6Y3lBOUlITjBlV3hsY3k1aFpHUkRiR0Z6Y3p0Y2JtUnFjeTV5WlcxdmRtVkRiR0Z6Y3lBOUlITjBlV3hsY3k1eVpXMXZkbVZEYkdGemN6dGNibVJxY3k1MGIyZG5iR1ZEYkdGemN5QTlJSE4wZVd4bGN5NTBiMmRuYkdWRGJHRnpjenRjYm1ScWN5NWpiMjUwWVdsdWMwTnNZWE56SUQwZ2MzUjViR1Z6TG1OdmJuUmhhVzV6UTJ4aGMzTTdYRzVrYW5NdVptbHVaQ0E5SUY5bWFXNWtMbVpwYm1RN1hHNWthbk11Wm1sdVpFRnNiQ0E5SUY5bWFXNWtMbVpwYm1SQmJHdzdYRzVrYW5NdWNtVnRiM1psSUQwZ1gyMWhibWx3ZFd4aGRHbHZiaTV5WlcxdmRtVTdYRzVjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUdScWN6c2lMQ0luZFhObElITjBjbWxqZENjN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmthbk5tZVR0Y2JseHVkbUZ5SUY5a0lEMGdjbVZ4ZFdseVpTZ25MaTlrTG1wekp5azdYRzVjYm5aaGNpQmZaRElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjlrS1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVablZ1WTNScGIyNGdaR3B6Wm5rb2JtOWtaU2tnZTF4dUlDQnBaaUFvSVc1dlpHVXBJSEpsZEhWeWJpQnVkV3hzTzF4dVhHNGdJRzV2WkdVdVptbHVaQ0E5SUdaMWJtTjBhVzl1SUNoemRISnBibWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdYMlF5TG1SbFptRjFiSFF1Wm1sdVpDaHpkSEpwYm1jc0lHNXZaR1VwTzF4dUlDQjlPMXh1SUNCdWIyUmxMbVpwYm1SQmJHd2dQU0JtZFc1amRHbHZiaUFvYzNSeWFXNW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOWtNaTVrWldaaGRXeDBMbVpwYm1SQmJHd29jM1J5YVc1bkxDQnViMlJsS1R0Y2JpQWdmVHRjYmlBZ2JtOWtaUzVqY21WaGRHVWdQU0JtZFc1amRHbHZiaUFvYzNSeWFXNW5LU0I3WEc0Z0lDQWdkbUZ5SUdWc1pXMWxiblFnUFNCZlpESXVaR1ZtWVhWc2RDNWpjbVZoZEdVb2MzUnlhVzVuS1R0Y2JseHVJQ0FnSUc1dlpHVXVZWEJ3Wlc1a1EyaHBiR1FvWld4bGJXVnVkQ2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWREdGNiaUFnZlR0Y2JseHVJQ0J1YjJSbExtTnpjeUE5SUdaMWJtTjBhVzl1SUNoamMzTlRkSGxzWlhNcElIdGNiaUFnSUNCeVpYUjFjbTRnWDJReUxtUmxabUYxYkhRdVkzTnpLRzV2WkdVc0lHTnpjMU4wZVd4bGN5azdYRzRnSUgwN1hHNGdJRzV2WkdVdVlXUmtRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpQW9ZMnhoYzNOTWFYTjBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOWtNaTVrWldaaGRXeDBMbUZrWkVOc1lYTnpLRzV2WkdVc0lHTnNZWE56VEdsemRDazdYRzRnSUgwN1hHNGdJRzV2WkdVdWNtVnRiM1psUTJ4aGMzTWdQU0JtZFc1amRHbHZiaUFvWTJ4aGMzTlViMUpsYlc5MlpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZlpESXVaR1ZtWVhWc2RDNXlaVzF2ZG1WRGJHRnpjeWh1YjJSbExDQmpiR0Z6YzFSdlVtVnRiM1psS1R0Y2JpQWdmVHRjYmlBZ2JtOWtaUzUwYjJkbmJHVkRiR0Z6Y3lBOUlHWjFibU4wYVc5dUlDaGpiR0Z6YzA1aGJXVXNJR1p2Y21ObEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUY5a01pNWtaV1poZFd4MExuUnZaMmRzWlVOc1lYTnpLRzV2WkdVc0lHTnNZWE56VG1GdFpTd2dabTl5WTJVcE8xeHVJQ0I5TzF4dUlDQnViMlJsTG1OdmJuUmhhVzV6UTJ4aGMzTWdQU0JtZFc1amRHbHZiaUFvWTJ4aGMzTk9ZVzFsS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTG1OdmJuUmhhVzV6UTJ4aGMzTW9ibTlrWlN3Z1kyeGhjM05PWVcxbEtUdGNiaUFnZlR0Y2JpQWdibTlrWlM1eVpXMXZkbVVnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJRzV2WkdWVWIxSmxiVzkyWlNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BEMGdNQ0I4ZkNCaGNtZDFiV1Z1ZEhOYk1GMGdQVDA5SUhWdVpHVm1hVzVsWkNBL0lHNXZaR1VnT2lCaGNtZDFiV1Z1ZEhOYk1GMDdYRzVjYmlBZ0lDQjJZWElnYjJ4a1RtOWtaU0E5SUY5a01pNWtaV1poZFd4MExuSmxiVzkyWlNodWIyUmxWRzlTWlcxdmRtVXBPMXh1SUNBZ0lHNXZaR1VnUFNCdWRXeHNPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHOXNaRTV2WkdVN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlHNXZaR1U3WEc1OUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1bWFXNWtJRDBnWm1sdVpEdGNibVY0Y0c5eWRITXVabWx1WkVGc2JDQTlJR1pwYm1SQmJHdzdYRzVjYm5aaGNpQmZaR3B6Wm5rZ1BTQnlaWEYxYVhKbEtDY3VMMlJxYzJaNUp5azdYRzVjYm5aaGNpQmZaR3B6Wm5reUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlpHcHpabmtwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNW1kVzVqZEdsdmJpQm1hVzVrS0hOMGNtbHVaeWtnZTF4dUlDQjJZWElnY205dmRFVnNaVzFsYm5RZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEdzlJREVnZkh3Z1lYSm5kVzFsYm5Seld6RmRJRDA5UFNCMWJtUmxabWx1WldRZ1B5QmtiMk4xYldWdWRDQTZJR0Z5WjNWdFpXNTBjMXN4WFR0Y2JseHVJQ0J5WlhSMWNtNGdLREFzSUY5a2FuTm1lVEl1WkdWbVlYVnNkQ2tvY205dmRFVnNaVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWh6ZEhKcGJtY3BLVHRjYm4xY2JseHVablZ1WTNScGIyNGdabWx1WkVGc2JDaHpkSEpwYm1jcElIdGNiaUFnZG1GeUlISnZiM1JGYkdWdFpXNTBJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4UFNBeElIeDhJR0Z5WjNWdFpXNTBjMXN4WFNBOVBUMGdkVzVrWldacGJtVmtJRDhnWkc5amRXMWxiblFnT2lCaGNtZDFiV1Z1ZEhOYk1WMDdYRzVjYmlBZ2NtVjBkWEp1SUhKdmIzUkZiR1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b2MzUnlhVzVuS1R0Y2JuMGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtTnlaV0YwWlNBOUlHTnlaV0YwWlR0Y2JtVjRjRzl5ZEhNdWNtVnRiM1psSUQwZ2NtVnRiM1psTzF4dVhHNTJZWElnWDJScWMyWjVJRDBnY21WeGRXbHlaU2duTGk5a2FuTm1lUzVxY3ljcE8xeHVYRzUyWVhJZ1gyUnFjMlo1TWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJScWMyWjVLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsS0hOMGNtbHVaeWtnZTF4dUlDQjJZWElnWm5KaFoyMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZFYjJOMWJXVnVkRVp5WVdkdFpXNTBLQ2s3WEc0Z0lIWmhjaUJsYkdWdFpXNTBJRDBnWm5KaFoyMWxiblF1WVhCd1pXNWtRMmhwYkdRb1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5a3BPMXh1WEc0Z0lHVnNaVzFsYm5RdWFXNXVaWEpJVkUxTUlEMGdjM1J5YVc1bkxuUnlhVzBvS1R0Y2JseHVJQ0JwWmlBb1pXeGxiV1Z1ZEM1amFHbHNaRTV2WkdWekxteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJR1ZzWlcxbGJuUWdQU0JsYkdWdFpXNTBMbXhoYzNSRGFHbHNaRHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUFvTUN3Z1gyUnFjMlo1TWk1a1pXWmhkV3gwS1NobGJHVnRaVzUwTG1Oc2IyNWxUbTlrWlNoMGNuVmxLU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYlc5MlpTaHViMlJsS1NCN1hHNGdJR2xtSUNodWIyUmxMbkJoY21WdWRFNXZaR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibTlrWlM1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLRzV2WkdVcE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHNTFiR3c3WEc1OUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1amMzTWdQU0JqYzNNN1hHNWxlSEJ2Y25SekxtRmtaRU5zWVhOeklEMGdZV1JrUTJ4aGMzTTdYRzVsZUhCdmNuUnpMbU52Ym5SaGFXNXpRMnhoYzNNZ1BTQmpiMjUwWVdsdWMwTnNZWE56TzF4dVpYaHdiM0owY3k1eVpXMXZkbVZEYkdGemN5QTlJSEpsYlc5MlpVTnNZWE56TzF4dVpYaHdiM0owY3k1MGIyZG5iR1ZEYkdGemN5QTlJSFJ2WjJkc1pVTnNZWE56TzF4dVhHNTJZWElnWDJScWMyWjVJRDBnY21WeGRXbHlaU2duTGk5a2FuTm1lU2NwTzF4dVhHNTJZWElnWDJScWMyWjVNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMlJxYzJaNUtUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1THk4Z1JXUm5aU0F2SUVsRlhHNTJZWElnVFZNZ1BTQW5iWE1uTzF4dUx5OGdRMmh5YjIxbElDOGdVMkZtWVhKcFhHNTJZWElnVjBWQ1MwbFVJRDBnSjNkbFltdHBkQ2M3WEc0dkx5QkdhWEpsWm05NFhHNTJZWElnVFU5YUlEMGdKMjF2ZWljN1hHNHZMeUJQY0dWeVlWeHVkbUZ5SUU4Z1BTQW5ieWM3WEc1MllYSWdXRllnUFNBbmVIWW5PMXh1THk4Z1MwUkZYRzUyWVhJZ1MwaFVUVXdnUFNBbmEyaDBiV3duTzF4dVhHNTJZWElnVUZKRlJrbFlTVVZUSUQwZ1cwMVRMQ0JYUlVKTFNWUXNJRTFQV2l3Z1R5d2dXRllzSUV0SVZFMU1YVHRjYmx4dWRtRnlJRU5UVTE5UVVrVkdTVmhGUkNBOUlIdGNiaUFnWm14dllYUTZJQ2RqYzNOR2JHOWhkQ2RjYm4wN1hHNWNibVoxYm1OMGFXOXVJR056Y3lodWIyUmxMQ0JqYzNOVGRIbHNaWE1wSUh0Y2JpQWdhV1lnS0NGdWIyUmxJSHg4SUc1dlpHVXVibTlrWlZSNWNHVWdQVDA5SURnZ2ZId2dibTlrWlM1dWIyUmxWSGx3WlNBOVBUMGdNeUI4ZkNBaGJtOWtaUzV6ZEhsc1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJR056YzFOMGVXeGxjeWtnZTF4dUlDQWdJR2xtSUNoUFltcGxZM1F1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoamMzTlRkSGxzWlhNc0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUhaaGNpQnJaWGxRY21WbWFYaGxaQ0E5SUdkbGRGTjBlV3hsVjJsMGFGQnlaV1pwZUV0bGVTaDdYRzRnSUNBZ0lDQWdJSE4wZVd4bFRHbHpkRG9nYm05a1pTNXpkSGxzWlN4Y2JpQWdJQ0FnSUNBZ2MzUjViR1ZVYjBOb1pXTnJPaUJyWlhsY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYTJWNVVISmxabWw0WldRcElIdGNiaUFnSUNBZ0lDQWdibTlrWlM1emRIbHNaVnRyWlhsUWNtVm1hWGhsWkYwZ1BTQmpjM05UZEhsc1pYTmJhMlY1WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnS0RBc0lGOWthbk5tZVRJdVpHVm1ZWFZzZENrb2JtOWtaU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR0ZrWkVOc1lYTnpLRzV2WkdVc0lHTnNZWE56VEdsemRDa2dlMXh1SUNCMllYSWdZM1Z5Y21WdWRFTnNZWE56VEdsemRDQTlJRzV2WkdVdVoyVjBRWFIwY21saWRYUmxLQ2RqYkdGemN5Y3BJSHg4SUNjbk8xeHVYRzRnSUdOc1lYTnpUR2x6ZENBOUlIQmhjbk5sUVhKeVlYa29ZMnhoYzNOTWFYTjBLU0I4ZkNCYlhUdGNibHh1SUNCcFppQW9ZMnhoYzNOTWFYTjBJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVaM1JvSUQwZ1kyeGhjM05NYVhOMExteGxibWQwYURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCcFppQW9JV05zWVhOelRHbHpkRnRwWFM1MGNtbHRLQ2twSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGTjViblJoZUVWeWNtOXlLQ2RrYW5NdVlXUmtRMnhoYzNNb0tUb2dSVzF3ZEhrZ2MzUnlhVzVuY3lCaGNtVWdibTkwSUhaaGJHbGtJR05zWVhOeklHNWhiV1VuS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0ZqYjI1MFlXbHVjME5zWVhOelNXNTBiMHhwYzNRb1kzVnljbVZ1ZEVOc1lYTnpUR2x6ZEN3Z1kyeGhjM05NYVhOMFcybGRLU2tnZTF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwUTJ4aGMzTk1hWE4wSUNzOUlDY2dKeUFySUdOc1lYTnpUR2x6ZEZ0cFhTNTBjbWx0S0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2JtOWtaUzV6WlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56Snl3Z1kzVnljbVZ1ZEVOc1lYTnpUR2x6ZEM1MGNtbHRLQ2twTzF4dVhHNGdJSEpsZEhWeWJpQW9NQ3dnWDJScWMyWjVNaTVrWldaaGRXeDBLU2h1YjJSbEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyOXVkR0ZwYm5ORGJHRnpjeWh1YjJSbExDQmpiR0Z6YzA1aGJXVXBJSHRjYmlBZ2FXWWdLQ0Z1YjJSbEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdaV3hsYldWdWRDQnRkWE4wSUdKbElHNXZkQ0JsYlhCMGVTNG5LVHRjYmlBZ2ZWeHVYRzRnSUdGemMyVnlkRU5zWVhOelRtRnRaU2hqYkdGemMwNWhiV1VwTzF4dVhHNGdJSEpsZEhWeWJpQmpiMjUwWVdsdWMwTnNZWE56U1c1MGIweHBjM1FvYm05a1pTNW5aWFJCZEhSeWFXSjFkR1VvSjJOc1lYTnpKeWtzSUdOc1lYTnpUbUZ0WlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJXOTJaVU5zWVhOektHNXZaR1VzSUdOc1lYTnpWRzlTWlcxdmRtVXBJSHRjYmlBZ2RtRnlJR04xY25KbGJuUkRiR0Z6YzB4cGMzUWdQU0JuWlhSRGRYSnlaVzUwUTJ4aGMzTk1hWE4wS0c1dlpHVXBPMXh1WEc0Z0lHTnNZWE56Vkc5U1pXMXZkbVVnUFNCd1lYSnpaVUZ5Y21GNUtHTnNZWE56Vkc5U1pXMXZkbVVwSUh4OElGdGRPMXh1WEc0Z0lHbG1JQ2doWTNWeWNtVnVkRU5zWVhOelRHbHpkQzVzWlc1bmRHZ2dmSHdnSVdOc1lYTnpWRzlTWlcxdmRtVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNnd0xDQmZaR3B6Wm5reUxtUmxabUYxYkhRcEtHNXZaR1VwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR05zWVhOelZHOVNaVzF2ZG1VZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNrZ2UxeHVJQ0FnSUdOc1lYTnpWRzlTWlcxdmRtVkpiblJsY21GamRHbHZiam9nWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYm1kMGFDQTlJR05zWVhOelZHOVNaVzF2ZG1VdWJHVnVaM1JvT3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQmpiR0Z6YzA1aGJXVWdQU0JqYkdGemMxUnZVbVZ0YjNabFcybGRPMXh1SUNBZ0lDQWdZWE56WlhKMFEyeGhjM05PWVcxbEtHTnNZWE56VG1GdFpTazdYRzVjYmlBZ0lDQWdJR04xY25KbGJuUkRiR0Z6YzB4cGMzUkpiblJsY21GamRHbHZiam9nWm05eUlDaDJZWElnZVNBOUlEQXNJRjlzWlc1bmRHZ2dQU0JqZFhKeVpXNTBRMnhoYzNOTWFYTjBMbXhsYm1kMGFEc2dlU0E4SUY5c1pXNW5kR2c3SUhrckt5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyeGhjM05PWVcxbElEMDlQU0JqZFhKeVpXNTBRMnhoYzNOTWFYTjBXM2xkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRFTnNZWE56VEdsemRDNXpjR3hwWTJVb2VTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVZ1kyeGhjM05VYjFKbGJXOTJaVWx1ZEdWeVlXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2JtOWtaUzV6WlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56Snl3Z1kzVnljbVZ1ZEVOc1lYTnpUR2x6ZEM1cWIybHVLQ2NnSnlrcE8xeHVYRzRnSUhKbGRIVnliaUFvTUN3Z1gyUnFjMlo1TWk1a1pXWmhkV3gwS1NodWIyUmxLVHRjYm4xY2JseHVablZ1WTNScGIyNGdkRzluWjJ4bFEyeGhjM01vYm05a1pTd2dZMnhoYzNOT1lXMWxMQ0JtYjNKalpTa2dlMXh1SUNCcFppQW9JVzV2WkdVcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFSb1pTQmxiR1Z0Wlc1MElHMTFjM1FnWW1VZ2JtOTBJR1Z0Y0hSNUxpY3BPMXh1SUNCOVhHNWNiaUFnWVhOelpYSjBRMnhoYzNOT1lXMWxLR05zWVhOelRtRnRaU2s3WEc1Y2JpQWdkbUZ5SUdOMWNuSmxiblJEYkdGemMweHBjM1FnUFNCblpYUkRkWEp5Wlc1MFEyeGhjM05NYVhOMEtHNXZaR1VwTzF4dVhHNGdJR2xtSUNoamIyNTBZV2x1YzBOc1lYTnpTVzUwYjB4cGMzUW9ZM1Z5Y21WdWRFTnNZWE56VEdsemRDd2dZMnhoYzNOT1lXMWxLU2tnZTF4dUlDQWdJR2xtSUNnaFptOXlZMlVwSUh0Y2JpQWdJQ0FnSUhKbGJXOTJaVU5zWVhOektHNXZaR1VzSUdOc1lYTnpUbUZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaG1iM0pqWlNBaFBUMGdabUZzYzJVcElIdGNiaUFnSUNBZ0lHRmtaRU5zWVhOektHNXZaR1VzSUdOc1lYTnpUbUZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUNnd0xDQmZaR3B6Wm5reUxtUmxabUYxYkhRcEtHNXZaR1VwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSRGRYSnlaVzUwUTJ4aGMzTk1hWE4wS0c1dlpHVXBJSHRjYmlBZ2NtVjBkWEp1SUhCaGNuTmxRWEp5WVhrb2JtOWtaUzVuWlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56SnlrcElIeDhJRnRkTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJoYzNObGNuUkRiR0Z6YzA1aGJXVW9ZMnhoYzNOT1lXMWxLU0I3WEc0Z0lHbG1JQ2doWTJ4aGMzTk9ZVzFsS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RVYUdVZ1kyeGhjM05PWVcxbElIQnliM1pwWkdWa0lDaGNYQ2NuSUNzZ1kyeGhjM05PWVcxbElDc2dKMXhjSnlrZ2JYVnpkQ0JpWlNCdWIzUWdaVzF3ZEhrdUp5azdYRzRnSUgxY2JseHVJQ0JwWmlBb1kyOXVkR0ZwYm5OWGFHbDBaWE53WVdObGN5aGpiR0Z6YzA1aGJXVXBLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFVhR1VnWTJ4aGMzTk9ZVzFsSUhCeWIzWnBaR1ZrSUNoY1hDY25JQ3NnWTJ4aGMzTk9ZVzFsSUNzZ0oxeGNKeWtnWTI5dWRHRnBibk1nU0ZSTlRDQnpjR0ZqWlNCamFHRnlZV04wWlhKekxDQjNhR2xqYUNCaGNtVWdibTkwSUhaaGJHbGtMaWNwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnZiblJoYVc1elYyaHBkR1Z6Y0dGalpYTW9jM1J5YVc1bktTQjdYRzRnSUhKbGRIVnliaUJ6ZEhKcGJtY3ViV0YwWTJnb0wxeGNjeThwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJqYjI1MFlXbHVjME5zWVhOelNXNTBiMHhwYzNRb1kyeGhjM05NYVhOMExDQmpiR0Z6YzFSdlEyaGxZMnNwSUh0Y2JpQWdZMnhoYzNOTWFYTjBJRDBnY0dGeWMyVkJjbkpoZVNoamJHRnpjMHhwYzNRcElIeDhJRnRkTzF4dVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNaVzVuZEdnZ1BTQmpiR0Z6YzB4cGMzUXViR1Z1WjNSb095QnBJRHdnYkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCcFppQW9ZMnhoYzNOTWFYTjBXMmxkTG5SeWFXMG9LU0E5UFQwZ1kyeGhjM05VYjBOb1pXTnJMblJ5YVcwb0tTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCd1lYSnpaVUZ5Y21GNUtHTnNZWE56VEdsemRDa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHTnNZWE56VEdsemRDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JqYkdGemMweHBjM1FnUFNCamJHRnpjMHhwYzNRdWMzQnNhWFFvSnlBbktUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmpiR0Z6YzB4cGMzUTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRk4wZVd4bFYybDBhRkJ5WldacGVFdGxlU2hmY21WbUtTQjdYRzRnSUhaaGNpQnpkSGxzWlV4cGMzUWdQU0JmY21WbUxuTjBlV3hsVEdsemREdGNiaUFnZG1GeUlITjBlV3hsVkc5RGFHVmpheUE5SUY5eVpXWXVjM1I1YkdWVWIwTm9aV05yTzF4dVhHNGdJR2xtSUNoemRIbHNaVlJ2UTJobFkyc2dhVzRnYzNSNWJHVk1hWE4wS1NCN1hHNGdJQ0FnY21WMGRYSnVJSE4wZVd4bFZHOURhR1ZqYXp0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h6ZEhsc1pWUnZRMmhsWTJzZ2FXNGdRMU5UWDFCU1JVWkpXRVZFS1NCN1hHNGdJQ0FnY21WMGRYSnVJRU5UVTE5UVVrVkdTVmhGUkZ0emRIbHNaVlJ2UTJobFkydGRPMXh1SUNCOVhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYm1kMGFDQTlJRkJTUlVaSldFbEZVeTVzWlc1bmRHZzdJR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lIWmhjaUJ6ZEhsc1pWZHBkR2hRY21WbWFYZ2dQU0FuSnlBcklGQlNSVVpKV0VsRlUxdHBYU0FySUhOMGVXeGxWRzlEYUdWamExc3dYUzUwYjFWd2NHVnlRMkZ6WlNncElDc2djM1I1YkdWVWIwTm9aV05yTG5OMVluTjBjbWx1WnlneEtUdGNibHh1SUNBZ0lHbG1JQ2h6ZEhsc1pWZHBkR2hRY21WbWFYZ2dhVzRnYzNSNWJHVk1hWE4wS1NCN1hHNGdJQ0FnSUNCRFUxTmZVRkpGUmtsWVJVUmJjM1I1YkdWVWIwTm9aV05yWFNBOUlITjBlV3hsVjJsMGFGQnlaV1pwZUR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJEVTFOZlVGSkZSa2xZUlVSYmMzUjViR1ZVYjBOb1pXTnJYVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNTlJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1gyUWdQU0J5WlhGMWFYSmxLQ2N1TDJScWN5OWtMbXB6SnlrN1hHNWNiblpoY2lCZlpESWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOWtLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dWFXWWdLSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5a01pNWtaV1poZFd4ME8xeHVmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdaR1ZtYVc1bElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlM1aGJXUXBJSHRjYmlBZ1pHVm1hVzVsS0Z0ZExDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOWtNaTVrWldaaGRXeDBPMXh1SUNCOUtUdGNibjFjYmx4dWRtRnlJRjluYkc5aVlXd2dQU0IxYm1SbFptbHVaV1E3WEc1Y2JtbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0JmWjJ4dlltRnNJRDBnZDJsdVpHOTNPMXh1ZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnWjJ4dlltRnNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNCZloyeHZZbUZzSUQwZ1oyeHZZbUZzTzF4dWZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2MyVnNaaUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ1gyZHNiMkpoYkNBOUlITmxiR1k3WEc1OUlHVnNjMlVnZTF4dUlDQmZaMnh2WW1Gc0lEMGdkVzVrWldacGJtVmtPMXh1ZlZ4dVhHNWZaMnh2WW1Gc0xtUnFjeUE5SUY5a01pNWtaV1poZFd4ME95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lIWmhiSFZsT2lCMGNuVmxYRzU5S1R0Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHaDBiV3hUZEhKcGJtZEdjbTl0VkdWdGNHeGhkR1ZUZEhKcGJtYzdYRzVtZFc1amRHbHZiaUJvZEcxc1UzUnlhVzVuUm5KdmJWUmxiWEJzWVhSbFUzUnlhVzVuS0hSbGJYQnNZWFJsVDJKcVpXTjBLU0I3WEc0Z0lIWmhjaUJ5WVhjZ1BTQjBaVzF3YkdGMFpVOWlhbVZqZEM1eVlYYzdYRzVjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQm1iM0lnS0haaGNpQmZiR1Z1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUN3Z2MzVmljM1J6SUQwZ1FYSnlZWGtvWDJ4bGJpQStJREVnUHlCZmJHVnVJQzBnTVNBNklEQXBMQ0JmYTJWNUlEMGdNVHNnWDJ0bGVTQThJRjlzWlc0N0lGOXJaWGtyS3lrZ2UxeHVJQ0FnSUhOMVluTjBjMXRmYTJWNUlDMGdNVjBnUFNCaGNtZDFiV1Z1ZEhOYlgydGxlVjA3WEc0Z0lIMWNibHh1SUNCeVpYTjFiSFFnUFNCemRXSnpkSE11Y21Wa2RXTmxLR1oxYm1OMGFXOXVJQ2h5WlhOMWJIUXNJSE4xWW5OMExDQnBLU0I3WEc0Z0lDQWdkbUZ5SUd4cGRDQTlJSEpoZDF0cFhUdGNibHh1SUNBZ0lITjFZbk4wSUQwZ1FYSnlZWGt1YVhOQmNuSmhlU2h6ZFdKemRDa2dQeUJ6ZFdKemRDNXFiMmx1S0NjbktTQTZJSE4xWW5OMElDc2dKeWM3WEc1Y2JpQWdJQ0JwWmlBb2JHbDBXMnhwZEM1c1pXNW5kR2dnTFNBeFhTQTlQVDBnSnlRbktTQjdYRzRnSUNBZ0lDQnpkV0p6ZENBOUlHaDBiV3hGYzJOaGNHVW9jM1ZpYzNRcE8xeHVJQ0FnSUNBZ2JHbDBJRDBnYkdsMExuTnNhV05sS0RBc0lDMHhLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWE4xYkhRZ0t6MGdiR2wwTzF4dUlDQWdJSEpsYzNWc2RDQXJQU0J6ZFdKemREdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lIMHNJQ2NuS1R0Y2JseHVJQ0J5WlhOMWJIUWdLejBnY21GM1czSmhkeTVzWlc1bmRHZ2dMU0F4WFR0Y2JseHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCb2RHMXNSWE5qWVhCbEtITjBjaWtnZTF4dUlDQnlaWFIxY200Z2MzUnlMbkpsY0d4aFkyVW9MeVl2Wnl3Z0p5WmhiWEE3SnlrdWNtVndiR0ZqWlNndlBpOW5MQ0FuSm1kME95Y3BMbkpsY0d4aFkyVW9Mend2Wnl3Z0p5WnNkRHNuS1M1eVpYQnNZV05sS0M5Y0lpOW5MQ0FuSm5GMWIzUmxPeWNwTG5KbGNHeGhZMlVvTHljdlp5d2dKeVlqTXprN0p5a3VjbVZ3YkdGalpTZ3ZZQzluTENBbkppTTVOanNuS1R0Y2JuMGlMQ0pwYlhCdmNuUWdaR2x6ZEdGdVkyVkVhWE53WVhSamFHVnlJR1p5YjIwZ0p5NHZaR2x6ZEdGdVkyVXVaR2x6Y0dGMFkyaGxjaTVxY3ljN1hHNXBiWEJ2Y25RZ2UyUmxabWx1WlVOdmJuTjBVSEp2Y0dWeWRIbDlJR1p5YjIwZ0p5NHVMM1J2YjJ4ekwzVjBhV3h6TG1wekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1JHbHpkR0Z1WTJWQlkzUnBiMjV6SUh0Y2JpQWdjM1JoZEdsaklHTm9ZVzVuWlZaaGJIVmxLSFpoYkhWbEtTQjdYRzRnSUNBZ1pHbHpkR0Z1WTJWRWFYTndZWFJqYUdWeUxtUnBjM0JoZEdOb0tIdGNiaUFnSUNBZ0lIUjVjR1U2SUVScGMzUmhibU5sUVdOMGFXOXVjeTVXUVV4VlJWOURTRUZPUjBWRUxGeHVJQ0FnSUNBZ1pHRjBZVG9nZG1Gc2RXVmNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5QmphR0Z1WjJWVmJtbDBLSFZ1YVhRcElIdGNiaUFnSUNCa2FYTjBZVzVqWlVScGMzQmhkR05vWlhJdVpHbHpjR0YwWTJnb2UxeHVJQ0FnSUNBZ2RIbHdaVG9nUkdsemRHRnVZMlZCWTNScGIyNXpMbFZPU1ZSZlEwaEJUa2RGUkN4Y2JpQWdJQ0FnSUdSaGRHRTZJSFZ1YVhSY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNWtaV1pwYm1WRGIyNXpkRkJ5YjNCbGNuUjVLRVJwYzNSaGJtTmxRV04wYVc5dWN5d2dKMVpCVEZWRlgwTklRVTVIUlVRbkxDQlRlVzFpYjJ3b0tTazdYRzVrWldacGJtVkRiMjV6ZEZCeWIzQmxjblI1S0VScGMzUmhibU5sUVdOMGFXOXVjeXdnSjFWT1NWUmZRMGhCVGtkRlJDY3NJRk41YldKdmJDZ3BLVHRjYmx4dUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUkdsemRHRnVZMlVnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWg3ZFc1cGREMG5TMjBuTENCMllXeDFaVDB3ZlNrZ2UxeHVJQ0FnSUhSb2FYTXVkVzVwZENBOUlIVnVhWFE3WEc0Z0lDQWdkR2hwY3k1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNCOVhHNWNiaUFnYzJWMFZtRnNkV1VvZG1Gc2RXVXBJSHRjYmlBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnY0dGeWMyVkpiblFvZG1Gc2RXVXBPMXh1SUNCOVhHNTlJaXdpYVcxd2IzSjBJRVJwYzNCaGRHTm9aWElnWm5KdmJTQW5MaTR2ZEc5dmJITXZaR2x6Y0dGMFkyaGxjaTVxY3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHNWxkeUJFYVhOd1lYUmphR1Z5S0NrN0lpd2lhVzF3YjNKMElHUnFjeUJtY205dElDZGtiMjB1YW5Nbk8xeHVYRzVwYlhCdmNuUWdSR2x6ZEdGdVkyVkJZM1JwYjI1eklHWnliMjBnSnk0dlpHbHpkR0Z1WTJVdVlXTjBhVzl1Y3k1cWN5YzdYRzVwYlhCdmNuUWdSR2x6ZEdGdVkyVlRkRzl5WlNCbWNtOXRJQ2N1TDJScGMzUmhibU5sTG5OMGIzSmxMbXB6Snp0Y2JseHViR1YwSUdOdmJtWnBaMDFoY0NBOUlIdGNiaUFnYUhSdGJEb2daR3B6WUZ4dUlDQWdJRHhrYVhZZ1kyeGhjM005WENKbVpTMWthWE4wWVc1alpWd2lQbHh1SUNBZ0lDQWdQR2x1Y0hWMElHTnNZWE56UFZ3aVptVXRhVzV3ZFhSelgxOXBibkIxZENCbVpTMWthWE4wWVc1alpWOWZhVzV3ZFhSY0lpQjBlWEJsUFZ3aWJuVnRZbVZ5WENJK1hHNGdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJbVpsTFhWdWFYUWdabVV0WkdsemRHRnVZMlZmWDNWdWFYUmNJajU3SkNSMWJtbDBmVHd2YzNCaGJqNWNiaUFnSUNBOEwyUnBkajVjYmlBZ1lGeHVmVHRjYmx4dWJHVjBJR1ZzWlcxbGJuUk5ZWEFnUFNCN1hHNGdJQ1JqYjI1MFlXbHVaWEk2SUc1MWJHd3NYRzRnSUNSa2FYTjBZVzVqWlRvZ2JuVnNiQ3hjYmlBZ0pHbHVjSFYwT2lCdWRXeHNMRnh1SUNBa2RXNXBkRG9nYm5Wc2JGeHVmVHRjYmx4dWJHVjBJR1JwYzNSaGJtTmxVM1J2Y21VN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBibWwwVFc5a2RXeGxLQ1JqYjI1MFlXbHVaWElwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrWkdsemRHRnVZMlVnUFNBa1kyOXVkR0ZwYm1WeUxtTnlaV0YwWlNoamIyNW1hV2ROWVhBdWFIUnRiQ2s3WEc0Z0lITmxkRVZzWlcxbGJuUk5ZWEFvSkdOdmJuUmhhVzVsY2lrN1hHNGdJSE5sZEVWc1pXMWxiblJJWVc1a2JHVnljeWdwTzF4dVhHNGdJR1JwYzNSaGJtTmxVM1J2Y21VZ1BTQnVaWGNnUkdsemRHRnVZMlZUZEc5eVpTZ3BPMXh1SUNCa2FYTjBZVzVqWlZOMGIzSmxMbTl1UTJoaGJtZGxLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsWm5KbGMyaFZibWwwS0dScGMzUmhibU5sVTNSdmNtVXVaR2x6ZEdGdVkyVXVkVzVwZENrN1hHNGdJSDBwTzF4dVhHNGdJRVJwYzNSaGJtTmxRV04wYVc5dWN5NWphR0Z1WjJWVmJtbDBLQ2RMYlNjcE8xeHVJQ0JrYVhOMFlXNWpaVk4wYjNKbExuVnVjbVZuYVhOMFpYSk1hWE4wWlc1bGNpZ3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaV1p5WlhOb1ZXNXBkQ2gxYm1sMEtTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpIVnVhWFF1YVc1dVpYSklWRTFNSUQwZ2RXNXBkRHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwUld4bGJXVnVkRTFoY0Nna1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpHTnZiblJoYVc1bGNpQTlJQ1JqYjI1MFlXbHVaWEk3WEc0Z0lHVnNaVzFsYm5STllYQXVKR2x1Y0hWMElEMGdaV3hsYldWdWRFMWhjQzRrWkdsemRHRnVZMlV1Wm1sdVpDZ25MbVpsTFdScGMzUmhibU5sWDE5cGJuQjFkQ2NwTzF4dUlDQmxiR1Z0Wlc1MFRXRndMaVIxYm1sMElEMGdaV3hsYldWdWRFMWhjQzRrWkdsemRHRnVZMlV1Wm1sdVpDZ25MbVpsTFdScGMzUmhibU5sWDE5MWJtbDBKeWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE5sZEVWc1pXMWxiblJJWVc1a2JHVnljeWdwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrYVc1d2RYUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25hVzV3ZFhRbkxDQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUVScGMzUmhibU5sUVdOMGFXOXVjeTVqYUdGdVoyVldZV3gxWlNobGRtVnVkQzUwWVhKblpYUXVkbUZzZFdVcE95QWdJQ0JjYmlBZ2ZTazdYRzU5WEc0aUxDSnBiWEJ2Y25RZ1UzUnZjbVVnWm5KdmJTQW5MaTR2ZEc5dmJITXZjM1J2Y21VdWFuTW5PMXh1WEc1cGJYQnZjblFnUkdsemRHRnVZMlVnWm5KdmJTQW5MaTlrYVhOMFlXNWpaUzVqYkdGemN5NXFjeWM3WEc1cGJYQnZjblFnUkdsemRHRnVZMlZCWTNScGIyNXpJR1p5YjIwZ0p5NHZaR2x6ZEdGdVkyVXVZV04wYVc5dWN5NXFjeWM3WEc1cGJYQnZjblFnWkdsemRHRnVZMlZFYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR2WkdsemRHRnVZMlV1WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFUnBjM1JoYm1ObFUzUnZjbVVnWlhoMFpXNWtjeUJUZEc5eVpYdGNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JseHVJQ0FnSUhSb2FYTXVaR2x6ZEdGdVkyVWdQU0J1WlhjZ1JHbHpkR0Z1WTJVb2UzMHBPMXh1WEc0Z0lDQWdkR2hwY3k1c2FYTjBaVzVsY2lBOUlHUnBjM1JoYm1ObFJHbHpjR0YwWTJobGNpNXlaV2RwYzNSbGNpZ29iR2x6ZEdWdVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUhOM2FYUmphQ2hzYVhOMFpXNWxjaTUwZVhCbEtTQjdYRzRnSUNBZ0lDQmpZWE5sSUVScGMzUmhibU5sUVdOMGFXOXVjeTVXUVV4VlJWOURTRUZPUjBWRU9seHVJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzUmhibU5sSUQwZ2JtVjNJRVJwYzNSaGJtTmxLSHRjYmlBZ0lDQWdJQ0FnSUNCMWJtbDBPaUIwYUdsekxtUnBjM1JoYm1ObExuVnVhWFFzSUZ4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCc2FYTjBaVzVsY2k1a1lYUmhYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNCallYTmxJRVJwYzNSaGJtTmxRV04wYVc5dWN5NVZUa2xVWDBOSVFVNUhSVVE2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR2x6ZEdGdVkyVWdQU0J1WlhjZ1JHbHpkR0Z1WTJVb2UxeHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQjBhR2x6TG1ScGMzUmhibU5sTG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUhWdWFYUTZJR3hwYzNSbGJtVnlMbVJoZEdGY2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdVkyaGhibWRsS0NrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQjFibkpsWjJsemRHVnlUR2x6ZEdWdVpYSW9LU0I3WEc0Z0lDQWdaR2x6ZEdGdVkyVkVhWE53WVhSamFHVnlMblZ1Y21WbmFYTjBaWElvZEdocGN5NXNhWE4wWlc1bGNpazdYRzRnSUgxY2JuMGlMQ0pwYlhCdmNuUWdaR3B6SUdaeWIyMGdKMlJ2YlM1cWN5YzdYRzVjYm14bGRDQmpiMjVtYVdkTllYQWdQU0I3WEc0Z0lHaDBiV3c2SUdScWMyQmNiaUFnSUNBOGFHVmhaR1Z5SUdOc1lYTnpQVndpWm1VdGFHVmhaR1Z5WENJK1hHNGdJQ0FnSUNBOGFERStSblZsYkNCRlkyOXViMjE1UEM5b01UNWNiaUFnSUNBOEwyaGxZV1JsY2o1Y2JpQWdZRnh1ZlR0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHVhWFJOYjJSMWJHVW9KR052Ym5SaGFXNWxjaWtnZTF4dUlDQWtZMjl1ZEdGcGJtVnlMbU55WldGMFpTaGpiMjVtYVdkTllYQXVhSFJ0YkNrN1hHNTlYRzRpTENKcGJYQnZjblFnWkdweklHWnliMjBnSjJSdmJTNXFjeWM3WEc1Y2JtbHRjRzl5ZENBcUlHRnpJR2hsWVdSbGNpQm1jbTl0SUNjdUwyaGxZV1JsY2k5b1pXRmtaWEl1YW5Nbk8xeHVhVzF3YjNKMElDb2dZWE1nYVc1d2RYUnpRMjl1ZEdGcGJtVnlJR1p5YjIwZ0p5NHZhVzV3ZFhSekwybHVjSFYwY3kxamIyNTBZV2x1WlhJdWFuTW5PMXh1YVcxd2IzSjBJQ29nWVhNZ2NtVnpkV3gwYzBOdmJuUmhhVzVsY2lCbWNtOXRJQ2N1TDNKbGMzVnNkSE12Y21WemRXeDBjeTFqYjI1MFlXbHVaWEl1YW5Nbk8xeHVYRzVwYlhCdmNuUWdLaUJoY3lCeGRXRnVkR2wwZVNCbWNtOXRJQ2N1TDNGMVlXNTBhWFI1TDNGMVlXNTBhWFI1TG1wekp6dGNibWx0Y0c5eWRDQXFJR0Z6SUdScGMzUmhibU5sSUdaeWIyMGdKeTR2WkdsemRHRnVZMlV2WkdsemRHRnVZMlV1YW5Nbk8xeHVhVzF3YjNKMElDb2dZWE1nY21WemRXeDBjeUJtY205dElDY3VMM0psYzNWc2RITXZjbVZ6ZFd4MGN5MWpiMjUwWVdsdVpYSXVhbk1uTzF4dVhHNXNaWFFnSkdobFlXUmxja052Ym5SaGFXNWxjaUE5SUdScWN5Z25MbVpsTFdwekxXaGxZV1JsY2ljcE8xeHViR1YwSUNScGJuQjFkSE5EYjI1MFlXbHVaWElnUFNCa2FuTW9KeTVtWlMxcWN5MXBibkIxZEhNdFkyOXVkR0ZwYm1WeUp5azdYRzVzWlhRZ0pISmxjM1ZzZEhORGIyNTBZV2x1WlhJZ1BTQmthbk1vSnk1bVpTMXFjeTF5WlhOMWJIUnpMV052Ym5SaGFXNWxjaWNwTzF4dVhHNXNaWFFnY1hWaGJuUnBkSGxOYjJSbGJDQTlJSHQxYm1sME9pQW5UQ2Q5TzF4dWJHVjBJR1JwYzNSaGJtTmxUVzlrWld3Z1BTQjdkVzVwZERvZ0owdHRKMzA3WEc1Y2JuRjFZVzUwYVhSNUxtTnZibVpwWnloN1hHNGdJSFZ1YVhRNklDZE1KeXhjYmlBZ2IyNUpibkIxZERvZ1puVnVZM1JwYjI0b2JXOWtaV3dwSUh0Y2JpQWdJQ0J4ZFdGdWRHbDBlVTF2WkdWc0lEMGdiVzlrWld3N1hHNGdJQ0FnY21WemRXeDBjeTV5WldaeVpYTm9SblZsYkVOdmJuTjFiWEIwYVc5dUtIdGNiaUFnSUNBZ0lHUnBjM1JoYm1ObE9pQmthWE4wWVc1alpVMXZaR1ZzTEZ4dUlDQWdJQ0FnY1hWaGJuUnBkSGs2SUhGMVlXNTBhWFI1VFc5a1pXeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZTazdYRzVjYm1ScGMzUmhibU5sTG1OdmJtWnBaeWg3WEc0Z0lIVnVhWFE2SUNkTGJTY3NYRzRnSUc5dVNXNXdkWFE2SUdaMWJtTjBhVzl1S0cxdlpHVnNLU0I3WEc0Z0lDQWdaR2x6ZEdGdVkyVk5iMlJsYkNBOUlHMXZaR1ZzTzF4dUlDQWdJSEpsYzNWc2RITXVjbVZtY21WemFFWjFaV3hEYjI1emRXMXdkR2x2YmloN1hHNGdJQ0FnSUNCa2FYTjBZVzVqWlRvZ1pHbHpkR0Z1WTJWTmIyUmxiQ3hjYmlBZ0lDQWdJSEYxWVc1MGFYUjVPaUJ4ZFdGdWRHbDBlVTF2WkdWc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYm4wcE8xeHVYRzVvWldGa1pYSXVhVzVwZEUxdlpIVnNaU2drYUdWaFpHVnlRMjl1ZEdGcGJtVnlLVHRjYm1sdWNIVjBjME52Ym5SaGFXNWxjaTVwYm1sMFRXOWtkV3hsS0NScGJuQjFkSE5EYjI1MFlXbHVaWElwTzF4dWNtVnpkV3gwYzBOdmJuUmhhVzVsY2k1cGJtbDBUVzlrZFd4bEtDUnlaWE4xYkhSelEyOXVkR0ZwYm1WeUtUdGNibHh1Y21WemRXeDBjeTV5WldaeVpYTm9SblZsYkVOdmJuTjFiWEIwYVc5dUtIdGNiaUFnWkdsemRHRnVZMlU2SUdScGMzUmhibU5sVFc5a1pXd3NYRzRnSUhGMVlXNTBhWFI1T2lCeGRXRnVkR2wwZVUxdlpHVnNYRzU5S1R0Y2JpSXNJbWx0Y0c5eWRDQmthbk1nWm5KdmJTQW5aRzl0TG1wekp6dGNibWx0Y0c5eWRDQXFJR0Z6SUhGMVlXNTBhWFI1SUdaeWIyMGdKeTR1TDNGMVlXNTBhWFI1TDNGMVlXNTBhWFI1TG1wekp6dGNibWx0Y0c5eWRDQXFJR0Z6SUdScGMzUmhibU5sSUdaeWIyMGdKeTR1TDJScGMzUmhibU5sTDJScGMzUmhibU5sTG1wekp6dGNibHh1YkdWMElHTnZibVpwWjAxaGNDQTlJSHRjYmlBZ2FIUnRiRG9nWkdweklHQmNiaUFnSUNBOFpHbDJJR05zWVhOelBWd2labVV0YVc1d2RYUnpMV052Ym5SaGFXNWxjbHdpUGx4dUlDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltWmxMV2x1Y0hWMGN5Qm1aUzFxY3kxeGRXRnVkR2wwZVZ3aVBqd3ZaR2wyUGx4dVhHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2labVV0YVc1d2RYUnpJR1psTFdwekxXUnBjM1JoYm1ObFhDSStQQzlrYVhZK1hHNGdJQ0FnUEM5a2FYWStYRzRnSUdCY2JuMDdYRzVjYm14bGRDQmxiR1Z0Wlc1MFRXRndJRDBnZTF4dUlDQWtZMjl1ZEdGcGJtVnlPaUJ1ZFd4c0xGeHVJQ0FrYVc1d2RYUkRiMjUwWVdsdVpYSTZJRzUxYkd3c1hHNGdJQ1JwYm5CMWRGRjFZVzUwYVhSNU9pQnVkV3hzTEZ4dUlDQWthVzV3ZFhSRWFYTjBZVzVqWlRvZ2JuVnNiRnh1ZlR0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHVhWFJOYjJSMWJHVW9KR052Ym5SaGFXNWxjaWtnZTF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJwYm5CMWRFTnZiblJoYVc1bGNpQTlJQ1JqYjI1MFlXbHVaWEl1WTNKbFlYUmxLR052Ym1acFowMWhjQzVvZEcxc0tUdGNibHh1SUNCelpYUkZiR1Z0Wlc1MFRXRndLQ1JqYjI1MFlXbHVaWElwTzF4dVhHNGdJSEYxWVc1MGFYUjVMbWx1YVhSTmIyUjFiR1VvWld4bGJXVnVkRTFoY0M0a2FXNXdkWFJSZFdGdWRHbDBlU2s3WEc0Z0lHUnBjM1JoYm1ObExtbHVhWFJOYjJSMWJHVW9aV3hsYldWdWRFMWhjQzRrYVc1d2RYUkVhWE4wWVc1alpTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxkRVZzWlcxbGJuUk5ZWEFvSkdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0JsYkdWdFpXNTBUV0Z3TGlSamIyNTBZV2x1WlhJZ1BTQWtZMjl1ZEdGcGJtVnlPMXh1SUNCbGJHVnRaVzUwVFdGd0xpUnBibkIxZEZGMVlXNTBhWFI1SUQwZ1pXeGxiV1Z1ZEUxaGNDNGthVzV3ZFhSRGIyNTBZV2x1WlhJdVptbHVaQ2duTG1abExXcHpMWEYxWVc1MGFYUjVKeWs3WEc0Z0lHVnNaVzFsYm5STllYQXVKR2x1Y0hWMFJHbHpkR0Z1WTJVZ1BTQmxiR1Z0Wlc1MFRXRndMaVJwYm5CMWRFTnZiblJoYVc1bGNpNW1hVzVrS0NjdVptVXRhbk10WkdsemRHRnVZMlVuS1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0J4ZFdGdWRHbDBlVVJwYzNCaGRHTm9aWElnWm5KdmJTQW5MaTl4ZFdGdWRHbDBlUzVrYVhOd1lYUmphR1Z5TG1wekp6dGNibWx0Y0c5eWRDQjdaR1ZtYVc1bFEyOXVjM1JRY205d1pYSjBlWDBnWm5KdmJTQW5MaTR2ZEc5dmJITXZkWFJwYkhNdWFuTW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NZ2UxeHVJQ0J6ZEdGMGFXTWdZMmhoYm1kbFZtRnNkV1VvZG1Gc2RXVXBJSHRjYmlBZ0lDQnhkV0Z1ZEdsMGVVUnBjM0JoZEdOb1pYSXVaR2x6Y0dGMFkyZ29lMXh1SUNBZ0lDQWdkSGx3WlRvZ1VYVmhiblJwZEhsQlkzUnBiMjV6TGxaQlRGVkZYME5JUVU1SFJVUXNYRzRnSUNBZ0lDQmtZWFJoT2lCMllXeDFaVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR05vWVc1blpWVnVhWFFvZFc1cGRDa2dlMXh1SUNBZ0lIRjFZVzUwYVhSNVJHbHpjR0YwWTJobGNpNWthWE53WVhSamFDaDdYRzRnSUNBZ0lDQjBlWEJsT2lCUmRXRnVkR2wwZVVGamRHbHZibk11VlU1SlZGOURTRUZPUjBWRUxGeHVJQ0FnSUNBZ1pHRjBZVG9nZFc1cGRGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNibVJsWm1sdVpVTnZibk4wVUhKdmNHVnlkSGtvVVhWaGJuUnBkSGxCWTNScGIyNXpMQ0FuVmtGTVZVVmZRMGhCVGtkRlJDY3NJRk41YldKdmJDZ3BLVHRjYm1SbFptbHVaVU52Ym5OMFVISnZjR1Z5ZEhrb1VYVmhiblJwZEhsQlkzUnBiMjV6TENBblZVNUpWRjlEU0VGT1IwVkVKeXdnVTNsdFltOXNLQ2twTzF4dVhHNGlMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCUmRXRnVkR2wwZVNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0h0MWJtbDBQU2RNSnl3Z2RtRnNkV1U5TUgwcElIdGNiaUFnSUNCMGFHbHpMblZ1YVhRZ1BTQjFibWwwTzF4dUlDQWdJSFJvYVhNdWRtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ2ZWeHVYRzRnSUhObGRGWmhiSFZsS0haaGJIVmxLU0I3WEc0Z0lDQWdkR2hwY3k1MllXeDFaU0E5SUhCaGNuTmxTVzUwS0haaGJIVmxLVHRjYmlBZ2ZWeHVmU0lzSW1sdGNHOXlkQ0JFYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR1TDNSdmIyeHpMMlJwYzNCaGRHTm9aWEl1YW5Nbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnVaWGNnUkdsemNHRjBZMmhsY2lncE95SXNJbWx0Y0c5eWRDQmthbk1nWm5KdmJTQW5aRzl0TG1wekp6dGNibHh1YVcxd2IzSjBJRkYxWVc1MGFYUjVRV04wYVc5dWN5Qm1jbTl0SUNjdUwzRjFZVzUwYVhSNUxtRmpkR2x2Ym5NdWFuTW5PMXh1YVcxd2IzSjBJRkYxWVc1MGFYUjVVM1J2Y21VZ1puSnZiU0FuTGk5eGRXRnVkR2wwZVM1emRHOXlaUzVxY3ljN1hHNWNibXhsZENCamIyNW1hV2ROWVhBZ1BTQjdYRzRnSUdoMGJXdzZJR1JxYzJCY2JpQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVptVXRjWFZoYm5ScGRIbGNJajVjYmlBZ0lDQWdJRHhwYm5CMWRDQmpiR0Z6Y3oxY0ltWmxMV2x1Y0hWMGMxOWZhVzV3ZFhRZ1ptVXRjWFZoYm5ScGRIbGZYMmx1Y0hWMFhDSWdkSGx3WlQxY0ltNTFiV0psY2x3aVBseHVJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0ptWlMxMWJtbDBJR1psTFhGMVlXNTBhWFI1WDE5MWJtbDBYQ0krZXlRa2RXNXBkSDA4TDNOd1lXNCtYRzRnSUNBZ1BDOWthWFkrWEc0Z0lHQmNibjA3WEc1Y2JteGxkQ0JsYkdWdFpXNTBUV0Z3SUQwZ2UxeHVJQ0FrWTI5dWRHRnBibVZ5T2lCdWRXeHNMRnh1SUNBa2NYVmhiblJwZEhrNklHNTFiR3dzWEc0Z0lDUnBibkIxZERvZ2JuVnNiQ3hjYmlBZ0pIVnVhWFE2SUc1MWJHeGNibjA3WEc1Y2JteGxkQ0J4ZFdGdWRHbDBlVk4wYjNKbE8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzVwZEUxdlpIVnNaU2drWTI5dWRHRnBibVZ5S1NCN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkhGMVlXNTBhWFI1SUQwZ0pHTnZiblJoYVc1bGNpNWpjbVZoZEdVb1kyOXVabWxuVFdGd0xtaDBiV3dwTzF4dUlDQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcE8xeHVJQ0J6WlhSRmJHVnRaVzUwU0dGdVpHeGxjbk1vS1R0Y2JseHVJQ0J4ZFdGdWRHbDBlVk4wYjNKbElEMGdibVYzSUZGMVlXNTBhWFI1VTNSdmNtVW9LVHRjYmlBZ2NYVmhiblJwZEhsVGRHOXlaUzV2YmtOb1lXNW5aU2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WldaeVpYTm9WVzVwZENoeGRXRnVkR2wwZVZOMGIzSmxMbkYxWVc1MGFYUjVMblZ1YVhRcE8xeHVJQ0I5S1R0Y2JseHVJQ0JSZFdGdWRHbDBlVUZqZEdsdmJuTXVZMmhoYm1kbFZXNXBkQ2duVENjcE8xeHVJQ0J4ZFdGdWRHbDBlVk4wYjNKbExuVnVjbVZuYVhOMFpYSk1hWE4wWlc1bGNpZ3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaV1p5WlhOb1ZXNXBkQ2gxYm1sMEtTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpIVnVhWFF1YVc1dVpYSklWRTFNSUQwZ2RXNXBkRHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwUld4bGJXVnVkRTFoY0Nna1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpHTnZiblJoYVc1bGNpQTlJQ1JqYjI1MFlXbHVaWEk3WEc0Z0lHVnNaVzFsYm5STllYQXVKR2x1Y0hWMElEMGdaV3hsYldWdWRFMWhjQzRrY1hWaGJuUnBkSGt1Wm1sdVpDZ25MbVpsTFhGMVlXNTBhWFI1WDE5cGJuQjFkQ2NwTzF4dUlDQmxiR1Z0Wlc1MFRXRndMaVIxYm1sMElEMGdaV3hsYldWdWRFMWhjQzRrY1hWaGJuUnBkSGt1Wm1sdVpDZ25MbVpsTFhGMVlXNTBhWFI1WDE5MWJtbDBKeWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE5sZEVWc1pXMWxiblJJWVc1a2JHVnljeWdwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrYVc1d2RYUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25hVzV3ZFhRbkxDQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUZGMVlXNTBhWFI1UVdOMGFXOXVjeTVqYUdGdVoyVldZV3gxWlNobGRtVnVkQzUwWVhKblpYUXVkbUZzZFdVcE95QWdJQ0JjYmlBZ2ZTazdYRzU5SWl3aWFXMXdiM0owSUZOMGIzSmxJR1p5YjIwZ0p5NHVMM1J2YjJ4ekwzTjBiM0psTG1wekp6dGNibHh1YVcxd2IzSjBJRkYxWVc1MGFYUjVJR1p5YjIwZ0p5NHZjWFZoYm5ScGRIa3VZMnhoYzNNdWFuTW5PMXh1YVcxd2IzSjBJRkYxWVc1MGFYUjVRV04wYVc5dWN5Qm1jbTl0SUNjdUwzRjFZVzUwYVhSNUxtRmpkR2x2Ym5NdWFuTW5PMXh1YVcxd2IzSjBJSEYxWVc1MGFYUjVSR2x6Y0dGMFkyaGxjaUJtY205dElDY3VMM0YxWVc1MGFYUjVMbVJwYzNCaGRHTm9aWEl1YW5Nbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCUmRXRnVkR2wwZVZOMGIzSmxJR1Y0ZEdWdVpITWdVM1J2Y21VZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dVhHNGdJQ0FnZEdocGN5NXhkV0Z1ZEdsMGVTQTlJRzVsZHlCUmRXRnVkR2wwZVNoN2ZTazdYRzVjYmlBZ0lDQjBhR2x6TG14cGMzUmxibVZ5SUQwZ2NYVmhiblJwZEhsRWFYTndZWFJqYUdWeUxuSmxaMmx6ZEdWeUtDaHNhWE4wWlc1bGNpa2dQVDRnZTF4dUlDQWdJQ0FnYzNkcGRHTm9LR3hwYzNSbGJtVnlMblI1Y0dVcElIdGNiaUFnSUNBZ0lHTmhjMlVnVVhWaGJuUnBkSGxCWTNScGIyNXpMbFpCVEZWRlgwTklRVTVIUlVRNlhHNGdJQ0FnSUNBZ0lIUm9hWE11Y1hWaGJuUnBkSGtnUFNCdVpYY2dVWFZoYm5ScGRIa29lMXh1SUNBZ0lDQWdJQ0FnSUhWdWFYUTZJSFJvYVhNdWNYVmhiblJwZEhrdWRXNXBkQ3dnWEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUd4cGMzUmxibVZ5TG1SaGRHRmNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUdOaGMyVWdVWFZoYm5ScGRIbEJZM1JwYjI1ekxsVk9TVlJmUTBoQlRrZEZSRHBjYmlBZ0lDQWdJQ0FnZEdocGN5NXhkV0Z1ZEdsMGVTQTlJRzVsZHlCUmRXRnVkR2wwZVNoN1hHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklIUm9hWE11Y1hWaGJuUnBkSGt1ZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnZFc1cGREb2diR2x6ZEdWdVpYSXVaR0YwWVZ4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1amFHRnVaMlVvS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lIVnVjbVZuYVhOMFpYSk1hWE4wWlc1bGNpZ3BJSHRjYmlBZ0lDQnhkV0Z1ZEdsMGVVUnBjM0JoZEdOb1pYSXVkVzV5WldkcGMzUmxjaWgwYUdsekxteHBjM1JsYm1WeUtUdGNiaUFnZlZ4dWZTSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUVaMVpXeERiMjV6ZFcxd2RHbHZibk1nZTF4dUlDQnpkR0YwYVdNZ1kyRnNZeWg3Y1hWaGJuUnBkSGs5ZTMwc0lHUnBjM1JoYm1ObFBYdDlmU2tnZTF4dUlDQWdJSFpoY2lCeVpYTjFiSFFnUFNCN1hHNGdJQ0FnSUNCMllXeDFaVG9nTUN4Y2JpQWdJQ0FnSUhWdWFYUTZJR0FrZTJScGMzUmhibU5sTG5WdWFYUjlMeVI3Y1hWaGJuUnBkSGt1ZFc1cGRIMWdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2doY1hWaGJuUnBkSGt1ZG1Gc2RXVWdmSHdnSVdScGMzUmhibU5sTG5aaGJIVmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGMzVnNkQzUyWVd4MVpTQTlJR1JwYzNSaGJtTmxMblpoYkhWbElDOGdjWFZoYm5ScGRIa3VkbUZzZFdVN1hHNWNiaUFnSUNCeVpYTjFiSFF1ZG1Gc2RXVWdQU0J5WlhOMWJIUXVkbUZzZFdVdWRHOVRkSEpwYm1jb0tTNXpkV0p6ZEhKcGJtY29NQ3dnTVRBcE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JuMGlMQ0pwYlhCdmNuUWdaR3B6SUdaeWIyMGdKMlJ2YlM1cWN5YzdYRzVjYm1sdGNHOXlkQ0JHZFdWc1EyOXVjM1Z0Y0hScGIyNVRkRzl5WlNCbWNtOXRJQ2N1TDJaMVpXd3RZMjl1YzNWdGNIUnBiMjR1YzNSdmNtVXVhbk1uTzF4dVhHNXNaWFFnWTI5dVptbG5UV0Z3SUQwZ2UxeHVJQ0JvZEcxc09pQmthbk5nWEc0Z0lDQWdQR1JwZGlCamJHRnpjejFjSW1abExXWjFaV3d0WTI5dWMzVnRjSFJwYjI1Y0lqNWNiaUFnSUNBZ0lEeHpjR0Z1SUdOc1lYTnpQVndpWm1VdGFuTXRkbUZzZFdWY0lqNDRPRHd2YzNCaGJqNGdQSE53WVc0Z1kyeGhjM005WENKbVpTMTFibWwwWENJK1MyMHZURHd2YzNCaGJqNWNiaUFnSUNBOEwyUnBkajVjYmlBZ1lGeHVmVHRjYmx4dWJHVjBJR1ZzWlcxbGJuUk5ZWEFnUFNCN1hHNGdJQ1JqYjI1MFlXbHVaWEk2SUc1MWJHd3NYRzRnSUNSbWRXVnNRMjl1YzNWdGNIUnBiMjQ2SUc1MWJHd3NYRzRnSUNSbWRXVnNWVzVwZERvZ2JuVnNiQ3hjYmlBZ0pHWjFaV3hXWVd4MVpUb2diblZzYkZ4dWZUdGNibHh1YkdWMElHWjFaV3hEYjI1emRXMXdkR2x2YmxOMGIzSmxPMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVc1cGRFMXZaSFZzWlNna1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpHWjFaV3hEYjI1emRXMXdkR2x2YmlBOUlDUmpiMjUwWVdsdVpYSXVZM0psWVhSbEtHTnZibVpwWjAxaGNDNW9kRzFzS1R0Y2JpQWdjMlYwUld4bGJXVnVkRTFoY0Nna1kyOXVkR0ZwYm1WeUtUdGNibHh1SUNCbWRXVnNRMjl1YzNWdGNIUnBiMjVUZEc5eVpTQTlJRzVsZHlCR2RXVnNRMjl1YzNWdGNIUnBiMjVUZEc5eVpTZ3BPMXh1WEc0Z0lHWjFaV3hEYjI1emRXMXdkR2x2YmxOMGIzSmxMbTl1UTJoaGJtZGxLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsWm5KbGMyaEdkV1ZzUTI5dWMzVnRjSFJwYjI0b1puVmxiRU52Ym5OMWJYQjBhVzl1VTNSdmNtVXVjbVZ6ZFd4MGN5azdYRzRnSUgwcE8xeHVYRzRnSUdaMVpXeERiMjV6ZFcxd2RHbHZibE4wYjNKbExtTm9ZVzVuWlNncE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpXWnlaWE5vUm5WbGJFTnZibk4xYlhCMGFXOXVLSEpsYzNWc2RITXBJSHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtablZsYkZWdWFYUXVhVzV1WlhKSVZFMU1JRDBnY21WemRXeDBjeTUxYm1sME8xeHVJQ0JsYkdWdFpXNTBUV0Z3TGlSbWRXVnNWbUZzZFdVdWFXNXVaWEpJVkUxTUlEMGdjbVZ6ZFd4MGN5NTJZV3gxWlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYzJWMFJXeGxiV1Z1ZEUxaGNDZ2tZMjl1ZEdGcGJtVnlLU0I3WEc0Z0lHVnNaVzFsYm5STllYQXVKR052Ym5SaGFXNWxjaUE5SUNSamIyNTBZV2x1WlhJN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdaMVpXeFZibWwwSUQwZ1pXeGxiV1Z1ZEUxaGNDNGtablZsYkVOdmJuTjFiWEIwYVc5dUxtWnBibVFvSnk1bVpTMTFibWwwSnlrN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdaMVpXeFdZV3gxWlNBOUlHVnNaVzFsYm5STllYQXVKR1oxWld4RGIyNXpkVzF3ZEdsdmJpNW1hVzVrS0NjdVptVXRhbk10ZG1Gc2RXVW5LVHRjYm4waUxDSnBiWEJ2Y25RZ1UzUnZjbVVnWm5KdmJTQW5MaTR2TGk0dmRHOXZiSE12YzNSdmNtVXVhbk1uTzF4dVhHNXBiWEJ2Y25RZ1VtVnpkV3gwYzBOdmJuTjFiWEIwYVc5dWMwRmpkR2x2Ym5NZ1puSnZiU0FuTGk0dmNtVnpkV3gwY3k1aFkzUnBiMjV6TG1wekp6dGNibWx0Y0c5eWRDQnlaWE4xYkhSRWFYTndZWFJqYUdWeUlHWnliMjBnSnk0dUwzSmxjM1ZzZEhNdVpHbHpjR0YwWTJobGNpNXFjeWM3WEc1Y2JtbHRjRzl5ZENCR2RXVnNRMjl1YzNWdGNIUnBiMjV6SUdaeWIyMGdKeTR2Wm5WbGJDMWpiMjV6ZFcxd2RHbHZiaTVqYkdGemN5NXFjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRVoxWld4RGIyNXpkVzF3ZEdsdmJsTjBiM0psSUdWNGRHVnVaSE1nVTNSdmNtVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVYRzRnSUNBZ2RHaHBjeTV5WlhOMWJIUnpJRDBnUm5WbGJFTnZibk4xYlhCMGFXOXVjeTVqWVd4aktIdDlLVHRjYmx4dUlDQWdJSEpsYzNWc2RFUnBjM0JoZEdOb1pYSXVjbVZuYVhOMFpYSW9LR3hwYzNSbGJtVnlLU0E5UGlCN1hHNGdJQ0FnSUNCemQybDBZMmdvYkdsemRHVnVaWEl1ZEhsd1pTa2dlMXh1SUNBZ0lDQWdZMkZ6WlNCU1pYTjFiSFJ6UTI5dWMzVnRjSFJwYjI1elFXTjBhVzl1Y3k1U1JWTlZURlJmUTBoQlRrZEZSRHBjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWE4xYkhSeklEMGdSblZsYkVOdmJuTjFiWEIwYVc5dWN5NWpZV3hqS0d4cGMzUmxibVZ5TG1SaGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTm9ZVzVuWlNoMGFHbHpMbkpsYzNWc2RITXBPMXh1WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlJaXdpYVcxd2IzSjBJR1JxY3lCbWNtOXRJQ2RrYjIwdWFuTW5PMXh1YVcxd2IzSjBJQ29nWVhNZ1puVmxiRU52YlhOMWNIUnBiMjRnWm5KdmJTQW5MaTltZFdWc0xXTnZibk4xYlhCMGFXOXVMMloxWld3dFkyOXVjM1Z0Y0hScGIyNHVhbk1uTzF4dWFXMXdiM0owSUZKbGMzVnNkSE5UZEc5eVpTQm1jbTl0SUNjdUwzSmxjM1ZzZEhNdWMzUnZjbVV1YW5Nbk8xeHVYRzVzWlhRZ2NtVnpkV3gwYzFOMGIzSmxPMXh1WEc1c1pYUWdZMjl1Wm1sblRXRndJRDBnZTF4dUlDQm9kRzFzT2lCa2FuTmdYRzRnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbVpsTFhKbGMzVnNkSE10WTI5dWRHRnBibVZ5WENJK1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2labVV0YW5NdFpuVmxiQzFqYjI1emRXMXdkR2x2Ymx3aUlITjBlV3hsUFZ3aWFHVnBaMmgwT2pFd01DVmNJajQ4TDJScGRqNWNiaUFnSUNBOEwyUnBkajVjYmlBZ1lGeHVmVHRjYmx4dWJHVjBJR1ZzWlcxbGJuUk5ZWEFnUFNCN1hHNGdJQ1JqYjI1MFlXbHVaWEk2SUc1MWJHd3NYRzRnSUNSeVpYTjFiSFJ6UTI5dWRHRnBibVZ5T2lCdWRXeHNMRnh1SUNBa1puVmxiRU52YlhOMWNIUnBiMjQ2SUc1MWJHeGNibjA3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGJtbDBUVzlrZFd4bEtDUmpiMjUwWVdsdVpYSXBJSHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtjbVZ6ZFd4MGMwTnZiblJoYVc1bGNpQTlJQ1JqYjI1MFlXbHVaWEl1WTNKbFlYUmxLR052Ym1acFowMWhjQzVvZEcxc0tUdGNiaUFnYzJWMFJXeGxiV1Z1ZEUxaGNDZ2tZMjl1ZEdGcGJtVnlLVHRjYmx4dUlDQnlaWE4xYkhSelUzUnZjbVVnUFNCdVpYY2dVbVZ6ZFd4MGMxTjBiM0psS0NrN1hHNGdJRnh1SUNCbWRXVnNRMjl0YzNWd2RHbHZiaTVwYm1sMFRXOWtkV3hsS0dWc1pXMWxiblJOWVhBdUpHWjFaV3hEYjIxemRYQjBhVzl1S1R0Y2JseHVJQ0J5WlhOMWJIUnpVM1J2Y21VdWRYQmtZWFJsVW1WemRXeDBjeWdwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhSRmJHVnRaVzUwVFdGd0tDUmpiMjUwWVdsdVpYSXBJSHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtZMjl1ZEdGcGJtVnlJRDBnSkdOdmJuUmhhVzVsY2p0Y2JpQWdaV3hsYldWdWRFMWhjQzRrWm5WbGJFTnZiWE4xY0hScGIyNGdQU0JsYkdWdFpXNTBUV0Z3TGlSeVpYTjFiSFJ6UTI5dWRHRnBibVZ5TG1acGJtUW9KeTVtWlMxcWN5MW1kV1ZzTFdOdmJuTjFiWEIwYVc5dUp5azdYRzU5SWl3aWFXMXdiM0owSUhKbGMzVnNkSE5FYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR2Y21WemRXeDBjeTVrYVhOd1lYUmphR1Z5TG1wekp6dGNibWx0Y0c5eWRDQjdaR1ZtYVc1bFEyOXVjM1JRY205d1pYSjBlWDBnWm5KdmJTQW5MaTR2ZEc5dmJITXZkWFJwYkhNdWFuTW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlNaWE4xYkhSelFXTjBhVzl1Y3lCN1hHNGdJSE4wWVhScFl5QmphR0Z1WjJWU1pYTjFiSFFvZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWE4xYkhSelJHbHpjR0YwWTJobGNpNWthWE53WVhSamFDaDdYRzRnSUNBZ0lDQjBlWEJsT2lCU1pYTjFiSFJ6UVdOMGFXOXVjeTVTUlZOVlRGUmZRMGhCVGtkRlJDeGNiaUFnSUNBZ0lHUmhkR0U2SUhaaGJIVmxYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibHh1WkdWbWFXNWxRMjl1YzNSUWNtOXdaWEowZVNoU1pYTjFiSFJ6UVdOMGFXOXVjeXdnSjFKRlUxVk1WRjlEU0VGT1IwVkVKeXdnVTNsdFltOXNLQ2twTzF4dUlpd2lhVzF3YjNKMElFUnBjM0JoZEdOb1pYSWdabkp2YlNBbkxpNHZkRzl2YkhNdlpHbHpjR0YwWTJobGNpNXFjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUc1bGR5QkVhWE53WVhSamFHVnlLQ2s3SWl3aWFXMXdiM0owSUZOMGIzSmxJR1p5YjIwZ0p5NHVMM1J2YjJ4ekwzTjBiM0psTG1wekp6dGNibHh1YVcxd2IzSjBJRkYxWVc1MGFYUjVJR1p5YjIwZ0p5NHVMM0YxWVc1MGFYUjVMM0YxWVc1MGFYUjVMbU5zWVhOekxtcHpKenRjYm1sdGNHOXlkQ0JSZFdGdWRHbDBlVUZqZEdsdmJuTWdabkp2YlNBbkxpNHZjWFZoYm5ScGRIa3ZjWFZoYm5ScGRIa3VZV04wYVc5dWN5NXFjeWM3WEc1cGJYQnZjblFnY1hWaGJuUnBkSGxFYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR1TDNGMVlXNTBhWFI1TDNGMVlXNTBhWFI1TG1ScGMzQmhkR05vWlhJdWFuTW5PMXh1WEc1cGJYQnZjblFnUkdsemRHRnVZMlVnWm5KdmJTQW5MaTR2WkdsemRHRnVZMlV2WkdsemRHRnVZMlV1WTJ4aGMzTXVhbk1uTzF4dWFXMXdiM0owSUVScGMzUmhibU5sUVdOMGFXOXVjeUJtY205dElDY3VMaTlrYVhOMFlXNWpaUzlrYVhOMFlXNWpaUzVoWTNScGIyNXpMbXB6Snp0Y2JtbHRjRzl5ZENCa2FYTjBZVzVqWlVScGMzQmhkR05vWlhJZ1puSnZiU0FuTGk0dlpHbHpkR0Z1WTJVdlpHbHpkR0Z1WTJVdVpHbHpjR0YwWTJobGNpNXFjeWM3WEc1Y2JtbHRjRzl5ZENCU1pYTjFiSFJ6UVdOMGFXOXVjeUJtY205dElDY3VMM0psYzNWc2RITXVZV04wYVc5dWN5NXFjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkpsYzNWc2RITlRkRzl5WlNCbGVIUmxibVJ6SUZOMGIzSmxJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdjM1Z3WlhJb0tUdGNibHh1SUNBZ0lIUm9hWE11Y1hWaGJuUnBkSGtnUFNCdVpYY2dVWFZoYm5ScGRIa29lMzBwTzF4dUlDQWdJSFJvYVhNdVpHbHpkR0Z1WTJVZ1BTQnVaWGNnUkdsemRHRnVZMlVvZTMwcE8xeHVYRzRnSUNBZ2NYVmhiblJwZEhsRWFYTndZWFJqYUdWeUxuSmxaMmx6ZEdWeUtDaHNhWE4wWlc1bGNpa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFVYVmhiblJwZEhsRGJHRnpjeWhzYVhOMFpXNWxjaWs3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFVtVnpkV3gwY3lncE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ1pHbHpkR0Z1WTJWRWFYTndZWFJqYUdWeUxuSmxaMmx6ZEdWeUtDaHNhWE4wWlc1bGNpa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFJHbHpkR0Z1WTJWRGJHRnpjeWhzYVhOMFpXNWxjaWs3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFVtVnpkV3gwY3lncE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYM1Z3WkdGMFpWRjFZVzUwYVhSNVEyeGhjM01vYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0J6ZDJsMFkyZ29iR2x6ZEdWdVpYSXVkSGx3WlNrZ2UxeHVJQ0FnSUdOaGMyVWdVWFZoYm5ScGRIbEJZM1JwYjI1ekxsWkJURlZGWDBOSVFVNUhSVVE2WEc0Z0lDQWdJQ0IwYUdsekxuRjFZVzUwYVhSNUlEMGdibVYzSUZGMVlXNTBhWFI1S0h0Y2JpQWdJQ0FnSUNBZ2RXNXBkRG9nZEdocGN5NXhkV0Z1ZEdsMGVTNTFibWwwTENCY2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUd4cGMzUmxibVZ5TG1SaGRHRmNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lHTmhjMlVnVVhWaGJuUnBkSGxCWTNScGIyNXpMbFZPU1ZSZlEwaEJUa2RGUkRwY2JpQWdJQ0FnSUhSb2FYTXVjWFZoYm5ScGRIa2dQU0J1WlhjZ1VYVmhiblJwZEhrb2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2RHaHBjeTV4ZFdGdWRHbDBlUzUyWVd4MVpTeGNiaUFnSUNBZ0lDQWdkVzVwZERvZ2JHbHpkR1Z1WlhJdVpHRjBZVnh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WTJoaGJtZGxLQ2s3WEc0Z0lIMWNibHh1SUNCZmRYQmtZWFJsUkdsemRHRnVZMlZEYkdGemN5aHNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lITjNhWFJqYUNoc2FYTjBaVzVsY2k1MGVYQmxLU0I3WEc0Z0lDQWdZMkZ6WlNCRWFYTjBZVzVqWlVGamRHbHZibk11VmtGTVZVVmZRMGhCVGtkRlJEcGNiaUFnSUNBZ0lIUm9hWE11WkdsemRHRnVZMlVnUFNCdVpYY2dSR2x6ZEdGdVkyVW9lMXh1SUNBZ0lDQWdJQ0IxYm1sME9pQjBhR2x6TG1ScGMzUmhibU5sTG5WdWFYUXNJRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2diR2x6ZEdWdVpYSXVaR0YwWVZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnWTJGelpTQkVhWE4wWVc1alpVRmpkR2x2Ym5NdVZVNUpWRjlEU0VGT1IwVkVPbHh1SUNBZ0lDQWdkR2hwY3k1a2FYTjBZVzVqWlNBOUlHNWxkeUJFYVhOMFlXNWpaU2g3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUIwYUdsekxtUnBjM1JoYm1ObExuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNCMWJtbDBPaUJzYVhOMFpXNWxjaTVrWVhSaFhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWphR0Z1WjJVb0tUdGNiaUFnZlZ4dVhHNGdJSFZ3WkdGMFpWSmxjM1ZzZEhNb0tTQjdYRzRnSUNBZ1VtVnpkV3gwYzBGamRHbHZibk11WTJoaGJtZGxVbVZ6ZFd4MEtIdGNiaUFnSUNBZ0lIRjFZVzUwYVhSNU9pQjBhR2x6TG5GMVlXNTBhWFI1TEZ4dUlDQWdJQ0FnWkdsemRHRnVZMlU2SUhSb2FYTXVaR2x6ZEdGdVkyVmNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZTSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUVScGMzQmhkR05vWlhJZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCMGFHbHpMbDlzYVhOMFpXNWxjbk1nUFNCdVpYY2dUV0Z3S0NrN1hHNGdJSDFjYmx4dUlDQmthWE53WVhSamFDaHZZbW9wSUh0Y2JpQWdJQ0IwYUdsekxsOXNhWE4wWlc1bGNuTXVabTl5UldGamFDZ29iR2x6ZEdWdVpYSXBJRDArSUd4cGMzUmxibVZ5S0c5aWFpa3BPMXh1SUNCOVhHNWNiaUFnY21WbmFYTjBaWElvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JzWlhRZ2JHbHpkR1Z1WlhJZ1BTQlRlVzFpYjJ3b0tUdGNibHh1SUNBZ0lIUm9hWE11WDJ4cGMzUmxibVZ5Y3k1elpYUW9iR2x6ZEdWdVpYSXNJR05oYkd4aVlXTnJLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnNhWE4wWlc1bGNqdGNiaUFnZlZ4dVhHNGdJSFZ1Y21WbmFYTjBaWElvYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJHbHpkR1Z1WlhKekxtUmxiR1YwWlNoc2FYTjBaVzVsY2lrN1hHNGdJSDFjYm4waUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJUZEc5eVpTQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lIUm9hWE11WDJ4cGMzUmxibVZ5Y3lBOUlHNWxkeUJOWVhBb0tUdGNiaUFnZlZ4dVhHNGdJR05vWVc1blpTZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5c2FYTjBaVzVsY25NdVptOXlSV0ZqYUNnb2JHbHpkR1Z1WlhJcElEMCtJR3hwYzNSbGJtVnlLQ2twTzF4dUlDQjlYRzVjYmlBZ2IyNURhR0Z1WjJVb1kyRnNiR0poWTJzcElIdGNiaUFnSUNCc1pYUWdiR2x6ZEdWdVpYSWdQU0JUZVcxaWIyd29LVHRjYmx4dUlDQWdJSFJvYVhNdVgyeHBjM1JsYm1WeWN5NXpaWFFvYkdsemRHVnVaWElzSUdOaGJHeGlZV05yS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJzYVhOMFpXNWxjanRjYmlBZ2ZWeHVYRzRnSUhWdWNtVm5hWE4wWlhKRGFHRnVaMlVvYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJHbHpkR1Z1WlhKekxtUmxiR1YwWlNoc2FYTjBaVzVsY2lrN1hHNGdJSDFjYm4waUxDSmxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1pHVm1hVzVsUTI5dWMzUlFjbTl3WlhKMGVTaHZZbW9zSUhCeWIzQXNJSFpoYkhWbEtTQjdYRzRnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZZbW9zSUhCeWIzQXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUhkeWFYUmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lIWmhiSFZsT2lCMllXeDFaVnh1SUNCOUtUdGNibjBpWFgwPVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
