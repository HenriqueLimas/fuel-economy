!function e(t,n,u){function r(a,s){if(!n[a]){if(!t[a]){var o="function"==typeof require&&require;if(!s&&o)return o(a,!0);if(i)return i(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return r(n?n:e)},c,c.exports,e,t,n,u)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<u.length;a++)r(u[a]);return r}({1:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function r(e){return e&&e.__esModule?e:{"default":e}}function i(e){if("string"==typeof e)return(0,l.find)(e);if(Array.isArray(e)){for(var t=arguments.length,n=Array(t>1?t-1:0),u=1;t>u;u++)n[u-1]=arguments[u];return s["default"].apply(void 0,[e].concat(n))}}Object.defineProperty(n,"__esModule",{value:!0});var a=e("../util/html.js"),s=r(a),o=e("./manipulation.js"),l=e("./find.js"),c=e("./styles.js"),f=u(c);i.create=o.create,i.css=f.css,i.addClass=f.addClass,i.removeClass=f.removeClass,i.toggleClass=f.toggleClass,i.containsClass=f.containsClass,i.find=l.find,i.findAll=l.findAll,i.remove=o.remove,n["default"]=i},{"../util/html.js":7,"./find.js":3,"./manipulation.js":4,"./styles.js":5}],2:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e){return e?(e.find=function(t){return a["default"].find(t,e)},e.findAll=function(t){return a["default"].findAll(t,e)},e.create=function(t){var n=a["default"].create(t);return e.appendChild(n),n},e.css=function(t){return a["default"].css(e,t)},e.addClass=function(t){return a["default"].addClass(e,t)},e.removeClass=function(t){return a["default"].removeClass(e,t)},e.toggleClass=function(t,n){return a["default"].toggleClass(e,t,n)},e.containsClass=function(t){return a["default"].containsClass(e,t)},e.remove=function(){var t=arguments.length<=0||void 0===arguments[0]?e:arguments[0],n=a["default"].remove(t);return e=null,n},e):null}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=r;var i=e("./d.js"),a=u(i)},{"./d.js":1}],3:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return(0,s["default"])(t.querySelector(e))}function i(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return t.querySelectorAll(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.find=r,n.findAll=i;var a=e("./djsfy"),s=u(a)},{"./djsfy":2}],4:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e){var t=document.createDocumentFragment(),n=t.appendChild(document.createElement("div"));return n.innerHTML=e.trim(),1===n.childNodes.length&&(n=n.lastChild),(0,s["default"])(n.cloneNode(!0))}function i(e){return e.parentNode?e.parentNode.removeChild(e):null}Object.defineProperty(n,"__esModule",{value:!0}),n.create=r,n.remove=i;var a=e("./djsfy.js"),s=u(a)},{"./djsfy.js":2}],5:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!e||8===e.nodeType||3===e.nodeType||!e.style)return null;for(var n in t)if(Object.hasOwnProperty.call(t,n)){var u=y({styleList:e.style,styleToCheck:n});u&&(e.style[u]=t[n])}return(0,h["default"])(e)}function i(e,t){var n=e.getAttribute("class")||"";if(t=p(t)||[],t instanceof Array)for(var u=0,r=t.length;r>u;u++){if(!t[u].trim())throw new SyntaxError("djs.addClass(): Empty strings are not valid class name");d(n,t[u])||(n+=" "+t[u].trim())}return e.setAttribute("class",n.trim()),(0,h["default"])(e)}function a(e,t){if(!e)throw new Error("The element must be not empty.");return c(t),d(e.getAttribute("class"),t)}function s(e,t){var n=l(e);if(t=p(t)||[],!n.length||!t.length)return(0,h["default"])(e);if(t instanceof Array)e:for(var u=0,r=t.length;r>u;u++){var i=t[u];c(i);for(var a=0,s=n.length;s>a;a++)if(i===n[a]){n.splice(a,1);continue e}}return e.setAttribute("class",n.join(" ")),(0,h["default"])(e)}function o(e,t,n){if(!e)throw new Error("The element must be not empty.");c(t);var u=l(e);return d(u,t)?n||s(e,t):n!==!1&&i(e,t),(0,h["default"])(e)}function l(e){return p(e.getAttribute("class"))||[]}function c(e){if(!e)throw new Error("The className provided ('"+e+"') must be not empty.");if(f(e))throw new Error("The className provided ('"+e+"') contains HTML space characters, which are not valid.")}function f(e){return e.match(/\s/)}function d(e,t){e=p(e)||[];for(var n=0,u=e.length;u>n;n++)if(e[n].trim()===t.trim())return!0;return!1}function p(e){return"string"==typeof e&&(e=e.split(" ")),e}function y(e){var t=e.styleList,n=e.styleToCheck;if(n in t)return n;if(n in C)return C[n];for(var u=0,r=O.length;r>u;u++){var i=""+O[u]+n[0].toUpperCase()+n.substring(1);if(i in t)return C[n]=i,C[n]}return!1}Object.defineProperty(n,"__esModule",{value:!0}),n.css=r,n.addClass=i,n.containsClass=a,n.removeClass=s,n.toggleClass=o;var v=e("./djsfy"),h=u(v),j="ms",_="webkit",b="moz",m="o",g="xv",w="khtml",O=[j,_,b,m,g,w],C={"float":"cssFloat"}},{"./djsfy":2}],6:[function(e,t,n){(function(u){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var i=e("./djs/d.js"),a=r(i);"object"==typeof n&&"undefined"!=typeof t?t.exports=a["default"]:"function"==typeof define&&define.amd&&define([],function(){return a["default"]});var s=void 0;s="undefined"!=typeof window?window:"undefined"!=typeof u?u:"undefined"!=typeof self?self:void 0,s.djs=a["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./djs/d.js":1}],7:[function(e,t,n){"use strict";function u(e){for(var t=e.raw,n=void 0,u=arguments.length,i=Array(u>1?u-1:0),a=1;u>a;a++)i[a-1]=arguments[a];return n=i.reduce(function(e,n,u){var i=t[u];return n=Array.isArray(n)?n.join(""):n+"","$"===i[i.length-1]&&(n=r(n),i=i.slice(0,-1)),e+=i,e+=n},""),n+=t[t.length-1]}function r(e){return e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quote;").replace(/'/g,"&#39;").replace(/`/g,"&#96;")}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=u},{}],8:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./distance.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){r(this,e)}return i(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./distance.dispatcher.js":10}],9:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(t){var n=t.unit,r=void 0===n?"Km":n,i=t.value,a=void 0===i?0:i;u(this,e),this.unit=r,this.value=a}return r(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=i},{}],10:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var r=e("../tools/dispatcher.js"),i=u(r);n["default"]=new i["default"]},{"../tools/dispatcher.js":28}],11:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function i(e){j.$distance=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.distance.unit)}),p["default"].changeUnit("Km"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$distance.find(".fe-distance__input"),j.$unit=j.$distance.find(".fe-distance__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=r(['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="number">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="number">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=i;var c=e("dom.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$distance:null,$input:null,$unit:null},_=void 0},{"./distance.actions.js":8,"./distance.store.js":12,"dom.js":6}],12:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./distance.class.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.dispatcher.js"),v=u(y),h=function(e){function t(){r(this,t);var e=i(this,Object.getPrototypeOf(t).call(this));return e.distance=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.distance=new f["default"]({unit:e.distance.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.distance=new f["default"]({value:e.distance.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./distance.actions.js":8,"./distance.class.js":9,"./distance.dispatcher.js":10}],13:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function i(e){e.create(l.html)}var a=r(['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  '],['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=i;var s=e("dom.js"),o=u(s),l={html:(0,o["default"])(a)}},{"dom.js":6}],14:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function r(e){return e&&e.__esModule?e:{"default":e}}var i=e("dom.js"),a=r(i),s=e("./header/header.js"),o=u(s),l=e("./inputs/inputs-container.js"),c=u(l),f=e("./results/results-container.js"),d=u(f),p=(0,a["default"])(".fe-js-header"),y=(0,a["default"])(".fe-js-inputs-container"),v=(0,a["default"])(".fe-js-results-container");o.initModule(p),c.initModule(y),d.initModule(v)},{"./header/header.js":13,"./inputs/inputs-container.js":15,"./results/results-container.js":24,"dom.js":6}],15:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){h.$inputContainer=e.create(v.html),s(e),d.initModule(h.$inputQuantity),y.initModule(h.$inputDistance)}function s(e){h.$container=e,h.$inputQuantity=h.$inputContainer.find(".fe-js-quantity"),h.$inputDistance=h.$inputContainer.find(".fe-js-distance")}var o=i(['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  '],['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=r(l),f=e("../quantity/quantity.js"),d=u(f),p=e("../distance/distance.js"),y=u(p),v={html:(0,c["default"])(o)},h={$container:null,$inputContainer:null,$inputQuantity:null,$inputDistance:null}},{"../distance/distance.js":11,"../quantity/quantity.js":19,"dom.js":6}],16:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./quantity.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){r(this,e)}return i(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./quantity.dispatcher.js":18}],17:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(t){var n=t.unit,r=void 0===n?"L":n,i=t.value,a=void 0===i?0:i;u(this,e),this.unit=r,this.value=a}return r(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=i},{}],18:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var r=e("../tools/dispatcher.js"),i=u(r);n["default"]=new i["default"]},{"../tools/dispatcher.js":28}],19:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function i(e){j.$quantity=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.quantity.unit)}),p["default"].changeUnit("L"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$quantity.find(".fe-quantity__input"),j.$unit=j.$quantity.find(".fe-quantity__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=r(['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="number">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="number">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=i;var c=e("dom.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$quantity:null,$input:null,$unit:null},_=void 0},{"./quantity.actions.js":16,"./quantity.store.js":20,"dom.js":6}],20:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./quantity.class.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.dispatcher.js"),v=u(y),h=function(e){function t(){r(this,t);var e=i(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.quantity=new f["default"]({unit:e.quantity.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.quantity=new f["default"]({value:e.quantity.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./quantity.actions.js":16,"./quantity.class.js":17,"./quantity.dispatcher.js":18}],21:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(){u(this,e)}return r(e,null,[{key:"calc",value:function(e){var t=e.quantity,n=void 0===t?{}:t,u=e.distance,r=void 0===u?{}:u,i={value:0,unit:r.unit+"/"+n.unit};return n.value&&r.value?(i.value=r.value/n.value,i.value=i.value.toString().substring(0,10),i):i}}]),e}();n["default"]=i},{}],22:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function i(e){y.$fuelConsumption=e.create(p.html),s(e),v=new d["default"],v.onChange(function(){a(v.results)}),v.change()}function a(e){y.$fuelUnit.innerHTML=e.unit,y.$fuelValue.innerHTML=e.value}function s(e){y.$container=e,y.$fuelUnit=y.$fuelConsumption.find(".fe-unit"),y.$fuelValue=y.$fuelConsumption.find(".fe-js-value")}var o=r(['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  '],['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=i;var l=e("dom.js"),c=u(l),f=e("./fuel-consumption.store.js"),d=u(f),p={html:(0,c["default"])(o)},y={$container:null,$fuelConsumption:null,$fuelUnit:null,$fuelValue:null},v=void 0},{"./fuel-consumption.store.js":23,"dom.js":6}],23:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../../tools/store.js"),o=u(s),l=e("../results.actions.js"),c=u(l),f=e("../results.dispatcher.js"),d=u(f),p=e("./fuel-consumption.class.js"),y=u(p),v=function(e){function t(){r(this,t);var e=i(this,Object.getPrototypeOf(t).call(this));return e.results=y["default"].calc({}),d["default"].register(function(t){switch(t.type){case c["default"].RESULT_CHANGED:e.results=y["default"].calc(t.data),e.change(e.results)}}),e}return a(t,e),t}(o["default"]);n["default"]=v},{"../../tools/store.js":29,"../results.actions.js":25,"../results.dispatcher.js":26,"./fuel-consumption.class.js":21}],24:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){j.$resultsContainer=e.create(h.html),s(e),v=new y["default"],d.initModule(j.$fuelComsuption),v.updateResults()}function s(e){j.$container=e,j.$fuelComsuption=j.$resultsContainer.find(".fe-js-fuel-consumption")}var o=i(['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  '],['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=r(l),f=e("./fuel-consumption/fuel-consumption.js"),d=u(f),p=e("./results.store.js"),y=r(p),v=void 0,h={html:(0,c["default"])(o)},j={$container:null,$resultsContainer:null,$fuelComsuption:null}},{"./fuel-consumption/fuel-consumption.js":22,"./results.store.js":27,"dom.js":6}],25:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./results.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){r(this,e)}return i(e,null,[{key:"changeResult",value:function(t){s["default"].dispatch({type:e.RESULT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"RESULT_CHANGED",Symbol())},{"../tools/utils.js":30,"./results.dispatcher.js":26}],26:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var r=e("../tools/dispatcher.js"),i=u(r);n["default"]=new i["default"]},{"../tools/dispatcher.js":28}],27:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("../quantity/quantity.class.js"),f=u(c),d=e("../quantity/quantity.actions.js"),p=u(d),y=e("../quantity/quantity.dispatcher.js"),v=u(y),h=e("../distance/distance.class.js"),j=u(h),_=e("../distance/distance.actions.js"),b=u(_),m=e("../distance/distance.dispatcher.js"),g=u(m),w=e("./results.actions.js"),O=u(w),C=function(e){function t(){r(this,t);var e=i(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.distance=new j["default"]({}),v["default"].register(function(t){e._updateQuantityClass(t),e.updateResults()}),g["default"].register(function(t){e._updateDistanceClass(t),e.updateResults()}),e}return a(t,e),s(t,[{key:"_updateQuantityClass",value:function(e){switch(e.type){case p["default"].VALUE_CHANGED:this.quantity=new f["default"]({unit:this.quantity.unit,value:e.data});break;case p["default"].UNIT_CHANGED:this.quantity=new f["default"]({value:this.quantity.value,unit:e.data})}this.change()}},{key:"_updateDistanceClass",value:function(e){switch(e.type){case b["default"].VALUE_CHANGED:this.distance=new j["default"]({unit:this.distance.unit,value:e.data});break;case b["default"].UNIT_CHANGED:this.distance=new j["default"]({value:this.distance.value,unit:e.data})}this.change()}},{key:"updateResults",value:function(){O["default"].changeResult({quantity:this.quantity,distance:this.distance})}}]),t}(l["default"]);n["default"]=C},{"../distance/distance.actions.js":8,"../distance/distance.class.js":9,"../distance/distance.dispatcher.js":10,"../quantity/quantity.actions.js":16,"../quantity/quantity.class.js":17,"../quantity/quantity.dispatcher.js":18,"../tools/store.js":29,"./results.actions.js":25}],28:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(){u(this,e),this._listeners=new Map}return r(e,[{key:"dispatch",value:function(e){this._listeners.forEach(function(t){return t(e)})}},{key:"register",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregister",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=i},{}],29:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(){u(this,e),this._listeners=new Map}return r(e,[{key:"change",value:function(){this._listeners.forEach(function(e){return e()})}},{key:"onChange",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregisterChange",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=i},{}],30:[function(e,t,n){"use strict";function u(e,t,n){Object.defineProperty(e,t,{enumerable:!0,writable:!1,configurable:!1,value:n})}Object.defineProperty(n,"__esModule",{value:!0}),n.defineConstProperty=u},{}]},{},[14]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1bmRsZXIuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlZmF1bHQiLCJkanMiLCJ0ZW1wbGF0ZSIsIl9maW5kIiwiZmluZCIsIkFycmF5IiwiaXNBcnJheSIsIl9sZW4iLCJhcmd1bWVudHMiLCJzdWJzdHMiLCJfa2V5IiwiX2h0bWwyIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2h0bWwiLCJfbWFuaXB1bGF0aW9uIiwiX3N0eWxlcyIsInN0eWxlcyIsImNyZWF0ZSIsImNzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImNvbnRhaW5zQ2xhc3MiLCJmaW5kQWxsIiwicmVtb3ZlIiwiLi4vdXRpbC9odG1sLmpzIiwiLi9maW5kLmpzIiwiLi9tYW5pcHVsYXRpb24uanMiLCIuL3N0eWxlcy5qcyIsMiwiZGpzZnkiLCJub2RlIiwic3RyaW5nIiwiX2QyIiwiZWxlbWVudCIsImFwcGVuZENoaWxkIiwiY3NzU3R5bGVzIiwiY2xhc3NMaXN0IiwiY2xhc3NUb1JlbW92ZSIsImNsYXNzTmFtZSIsImZvcmNlIiwibm9kZVRvUmVtb3ZlIiwib2xkTm9kZSIsIl9kIiwiLi9kLmpzIiwzLCJyb290RWxlbWVudCIsImRvY3VtZW50IiwiX2Rqc2Z5MiIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2Rqc2Z5IiwiLi9kanNmeSIsNCwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInRyaW0iLCJjaGlsZE5vZGVzIiwibGFzdENoaWxkIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiLi9kanNmeS5qcyIsNSwibm9kZVR5cGUiLCJzdHlsZSIsImtleVByZWZpeGVkIiwiZ2V0U3R5bGVXaXRoUHJlZml4S2V5Iiwic3R5bGVMaXN0Iiwic3R5bGVUb0NoZWNrIiwiY3VycmVudENsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInBhcnNlQXJyYXkiLCJTeW50YXhFcnJvciIsImNvbnRhaW5zQ2xhc3NJbnRvTGlzdCIsInNldEF0dHJpYnV0ZSIsImFzc2VydENsYXNzTmFtZSIsImdldEN1cnJlbnRDbGFzc0xpc3QiLCJjbGFzc1RvUmVtb3ZlSW50ZXJhY3Rpb24iLCJ5IiwiX2xlbmd0aCIsInNwbGljZSIsImpvaW4iLCJjb250YWluc1doaXRlc3BhY2VzIiwibWF0Y2giLCJjbGFzc1RvQ2hlY2siLCJzcGxpdCIsIl9yZWYiLCJDU1NfUFJFRklYRUQiLCJQUkVGSVhJRVMiLCJzdHlsZVdpdGhQcmVmaXgiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIk1TIiwiV0VCS0lUIiwiTU9aIiwiTyIsIlhWIiwiS0hUTUwiLCJmbG9hdCIsNiwiZ2xvYmFsIiwiZGVmaW5lIiwiYW1kIiwiX2dsb2JhbCIsIndpbmRvdyIsInNlbGYiLCJ0aGlzIiwiLi9kanMvZC5qcyIsNywiaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZyIsInRlbXBsYXRlT2JqZWN0IiwicmF3IiwicmVzdWx0IiwicmVkdWNlIiwic3Vic3QiLCJsaXQiLCJodG1sRXNjYXBlIiwic2xpY2UiLCJzdHIiLCJyZXBsYWNlIiw4LCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9kaXN0YW5jZURpc3BhdGNoZXIiLCJfZGlzdGFuY2VEaXNwYXRjaGVyMiIsIl91dGlscyIsIkRpc3RhbmNlQWN0aW9ucyIsImRpc3BhdGNoIiwidHlwZSIsIlZBTFVFX0NIQU5HRUQiLCJkYXRhIiwidW5pdCIsIlVOSVRfQ0hBTkdFRCIsImRlZmluZUNvbnN0UHJvcGVydHkiLCJTeW1ib2wiLCIuLi90b29scy91dGlscy5qcyIsIi4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qcyIsOSwiRGlzdGFuY2UiLCJfcmVmJHVuaXQiLCJfcmVmJHZhbHVlIiwicGFyc2VJbnQiLDEwLCJfZGlzcGF0Y2hlciIsIl9kaXNwYXRjaGVyMiIsIi4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMiLDExLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwic3RyaW5ncyIsImZyZWV6ZSIsImluaXRNb2R1bGUiLCIkY29udGFpbmVyIiwiZWxlbWVudE1hcCIsIiRkaXN0YW5jZSIsImNvbmZpZ01hcCIsImh0bWwiLCJzZXRFbGVtZW50TWFwIiwic2V0RWxlbWVudEhhbmRsZXJzIiwiZGlzdGFuY2VTdG9yZSIsIl9kaXN0YW5jZVN0b3JlMiIsIm9uQ2hhbmdlIiwicmVmcmVzaFVuaXQiLCJkaXN0YW5jZSIsIl9kaXN0YW5jZUFjdGlvbnMyIiwiY2hhbmdlVW5pdCIsInVucmVnaXN0ZXJMaXN0ZW5lciIsIiR1bml0IiwiJGlucHV0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY2hhbmdlVmFsdWUiLCJfdGVtcGxhdGVPYmplY3QiLCJfZG9tIiwiX2RvbTIiLCJfZGlzdGFuY2VBY3Rpb25zIiwiX2Rpc3RhbmNlU3RvcmUiLCIuL2Rpc3RhbmNlLmFjdGlvbnMuanMiLCIuL2Rpc3RhbmNlLnN0b3JlLmpzIiwiZG9tLmpzIiwxMiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc3RvcmUiLCJfc3RvcmUyIiwiX2Rpc3RhbmNlQ2xhc3MiLCJfZGlzdGFuY2VDbGFzczIiLCJEaXN0YW5jZVN0b3JlIiwiX1N0b3JlIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsImxpc3RlbmVyIiwicmVnaXN0ZXIiLCJjaGFuZ2UiLCJ1bnJlZ2lzdGVyIiwiLi4vdG9vbHMvc3RvcmUuanMiLCIuL2Rpc3RhbmNlLmNsYXNzLmpzIiwxMywxNCwiX2hlYWRlciIsImhlYWRlciIsIl9pbnB1dHNDb250YWluZXIiLCJpbnB1dHNDb250YWluZXIiLCJfcmVzdWx0c0NvbnRhaW5lciIsInJlc3VsdHNDb250YWluZXIiLCIkaGVhZGVyQ29udGFpbmVyIiwiJGlucHV0c0NvbnRhaW5lciIsIiRyZXN1bHRzQ29udGFpbmVyIiwiLi9oZWFkZXIvaGVhZGVyLmpzIiwiLi9pbnB1dHMvaW5wdXRzLWNvbnRhaW5lci5qcyIsIi4vcmVzdWx0cy9yZXN1bHRzLWNvbnRhaW5lci5qcyIsMTUsIiRpbnB1dENvbnRhaW5lciIsInF1YW50aXR5IiwiJGlucHV0UXVhbnRpdHkiLCIkaW5wdXREaXN0YW5jZSIsIl9xdWFudGl0eSIsIl9kaXN0YW5jZSIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzIiwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuanMiLDE2LCJfcXVhbnRpdHlEaXNwYXRjaGVyIiwiX3F1YW50aXR5RGlzcGF0Y2hlcjIiLCJRdWFudGl0eUFjdGlvbnMiLCIuL3F1YW50aXR5LmRpc3BhdGNoZXIuanMiLDE3LCJRdWFudGl0eSIsMTgsMTksIiRxdWFudGl0eSIsInF1YW50aXR5U3RvcmUiLCJfcXVhbnRpdHlTdG9yZTIiLCJfcXVhbnRpdHlBY3Rpb25zMiIsIl9xdWFudGl0eUFjdGlvbnMiLCJfcXVhbnRpdHlTdG9yZSIsIi4vcXVhbnRpdHkuYWN0aW9ucy5qcyIsIi4vcXVhbnRpdHkuc3RvcmUuanMiLDIwLCJfcXVhbnRpdHlDbGFzcyIsIl9xdWFudGl0eUNsYXNzMiIsIlF1YW50aXR5U3RvcmUiLCIuL3F1YW50aXR5LmNsYXNzLmpzIiwyMSwiRnVlbENvbnN1bXB0aW9ucyIsIl9yZWYkcXVhbnRpdHkiLCJfcmVmJGRpc3RhbmNlIiwidG9TdHJpbmciLDIyLCIkZnVlbENvbnN1bXB0aW9uIiwiZnVlbENvbnN1bXB0aW9uU3RvcmUiLCJfZnVlbENvbnN1bXB0aW9uU3RvcmUyIiwicmVmcmVzaEZ1ZWxDb25zdW1wdGlvbiIsInJlc3VsdHMiLCIkZnVlbFVuaXQiLCIkZnVlbFZhbHVlIiwiX2Z1ZWxDb25zdW1wdGlvblN0b3JlIiwiLi9mdWVsLWNvbnN1bXB0aW9uLnN0b3JlLmpzIiwyMywiX3Jlc3VsdHNBY3Rpb25zIiwiX3Jlc3VsdHNBY3Rpb25zMiIsIl9yZXN1bHRzRGlzcGF0Y2hlciIsIl9yZXN1bHRzRGlzcGF0Y2hlcjIiLCJfZnVlbENvbnN1bXB0aW9uQ2xhc3MiLCJfZnVlbENvbnN1bXB0aW9uQ2xhc3MyIiwiRnVlbENvbnN1bXB0aW9uU3RvcmUiLCJjYWxjIiwiUkVTVUxUX0NIQU5HRUQiLCIuLi8uLi90b29scy9zdG9yZS5qcyIsIi4uL3Jlc3VsdHMuYWN0aW9ucy5qcyIsIi4uL3Jlc3VsdHMuZGlzcGF0Y2hlci5qcyIsIi4vZnVlbC1jb25zdW1wdGlvbi5jbGFzcy5qcyIsMjQsInJlc3VsdHNTdG9yZSIsIl9yZXN1bHRzU3RvcmUyIiwiZnVlbENvbXN1cHRpb24iLCIkZnVlbENvbXN1cHRpb24iLCJ1cGRhdGVSZXN1bHRzIiwiX2Z1ZWxDb25zdW1wdGlvbiIsIl9yZXN1bHRzU3RvcmUiLCIuL2Z1ZWwtY29uc3VtcHRpb24vZnVlbC1jb25zdW1wdGlvbi5qcyIsIi4vcmVzdWx0cy5zdG9yZS5qcyIsMjUsIlJlc3VsdHNBY3Rpb25zIiwiLi9yZXN1bHRzLmRpc3BhdGNoZXIuanMiLDI2LDI3LCJSZXN1bHRzU3RvcmUiLCJfdXBkYXRlUXVhbnRpdHlDbGFzcyIsIl91cGRhdGVEaXN0YW5jZUNsYXNzIiwiY2hhbmdlUmVzdWx0IiwiLi4vZGlzdGFuY2UvZGlzdGFuY2UuYWN0aW9ucy5qcyIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmNsYXNzLmpzIiwiLi4vZGlzdGFuY2UvZGlzdGFuY2UuZGlzcGF0Y2hlci5qcyIsIi4uL3F1YW50aXR5L3F1YW50aXR5LmFjdGlvbnMuanMiLCIuLi9xdWFudGl0eS9xdWFudGl0eS5jbGFzcy5qcyIsIi4uL3F1YW50aXR5L3F1YW50aXR5LmRpc3BhdGNoZXIuanMiLCIuL3Jlc3VsdHMuYWN0aW9ucy5qcyIsMjgsIkRpc3BhdGNoZXIiLCJfbGlzdGVuZXJzIiwiTWFwIiwiZm9yRWFjaCIsImNhbGxiYWNrIiwic2V0IiwyOSwiU3RvcmUiLDMwLCJwcm9wIl0sIm1hcHBpbmdzIjoiQ0FBQSxRQUFVQSxHQUFFQyxFQUFFQyxFQUFFQyxHQUFHLFFBQVNDLEdBQUVDLEVBQUVDLEdBQUcsSUFBSUosRUFBRUcsR0FBRyxDQUFDLElBQUlKLEVBQUVJLEdBQUcsQ0FBQyxHQUFJRSxHQUFrQixrQkFBVEMsVUFBcUJBLE9BQVEsS0FBSUYsR0FBR0MsRUFBRSxNQUFPQSxHQUFFRixHQUFFLEVBQUksSUFBR0ksRUFBRSxNQUFPQSxHQUFFSixHQUFFLEVBQUksSUFBSUssR0FBRSxHQUFJQyxPQUFNLHVCQUF1Qk4sRUFBRSxJQUFLLE1BQU1LLEdBQUVFLEtBQUssbUJBQW1CRixFQUFFLEdBQUlHLEdBQUVYLEVBQUVHLElBQUlTLFdBQVliLEdBQUVJLEdBQUcsR0FBR1UsS0FBS0YsRUFBRUMsUUFBUSxTQUFTZCxHQUFHLEdBQUlFLEdBQUVELEVBQUVJLEdBQUcsR0FBR0wsRUFBRyxPQUFPSSxHQUFFRixFQUFFQSxFQUFFRixJQUFJYSxFQUFFQSxFQUFFQyxRQUFRZCxFQUFFQyxFQUFFQyxFQUFFQyxHQUFHLE1BQU9ELEdBQUVHLEdBQUdTLFFBQWtELElBQUksR0FBMUNMLEdBQWtCLGtCQUFURCxVQUFxQkEsUUFBZ0JILEVBQUUsRUFBRUEsRUFBRUYsRUFBRWEsT0FB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QnNHLE9BSTNCa0gsSUFHVHZWLEdBQUFBLFdBQWtCdVYsT0FFWkMsSUFBSSxTQUFTOVYsRUFBUVUsRUFBT0osR0FDbEMsWUFNQSxTQUFTc0ssR0FBb0JoSyxFQUFLbVYsRUFBTTNULEdBQ3RDcEIsT0FBT21CLGVBQWV2QixFQUFLbVYsR0FDekJsTSxZQUFZLEVBQ1pFLFVBQVUsRUFDVkQsY0FBYyxFQUNkMUgsTUFBT0EsSUFUWHBCLE9BQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVFzSyxvQkFBc0JBLFlBVW5CIiwiZmlsZSI6ImJ1bmRsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaHRtbCA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbC5qcycpO1xuXG52YXIgX2h0bWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHRtbCk7XG5cbnZhciBfbWFuaXB1bGF0aW9uID0gcmVxdWlyZSgnLi9tYW5pcHVsYXRpb24uanMnKTtcblxudmFyIF9maW5kID0gcmVxdWlyZSgnLi9maW5kLmpzJyk7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZSgnLi9zdHlsZXMuanMnKTtcblxudmFyIHN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zdHlsZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBkanModGVtcGxhdGUpIHtcbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gKDAsIF9maW5kLmZpbmQpKHRlbXBsYXRlKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRlbXBsYXRlKSkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdWJzdHMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBzdWJzdHNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfaHRtbDIuZGVmYXVsdC5hcHBseSh1bmRlZmluZWQsIFt0ZW1wbGF0ZV0uY29uY2F0KHN1YnN0cykpO1xuICB9XG59XG5cbmRqcy5jcmVhdGUgPSBfbWFuaXB1bGF0aW9uLmNyZWF0ZTtcbmRqcy5jc3MgPSBzdHlsZXMuY3NzO1xuZGpzLmFkZENsYXNzID0gc3R5bGVzLmFkZENsYXNzO1xuZGpzLnJlbW92ZUNsYXNzID0gc3R5bGVzLnJlbW92ZUNsYXNzO1xuZGpzLnRvZ2dsZUNsYXNzID0gc3R5bGVzLnRvZ2dsZUNsYXNzO1xuZGpzLmNvbnRhaW5zQ2xhc3MgPSBzdHlsZXMuY29udGFpbnNDbGFzcztcbmRqcy5maW5kID0gX2ZpbmQuZmluZDtcbmRqcy5maW5kQWxsID0gX2ZpbmQuZmluZEFsbDtcbmRqcy5yZW1vdmUgPSBfbWFuaXB1bGF0aW9uLnJlbW92ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZGpzO1xufSx7XCIuLi91dGlsL2h0bWwuanNcIjo3LFwiLi9maW5kLmpzXCI6MyxcIi4vbWFuaXB1bGF0aW9uLmpzXCI6NCxcIi4vc3R5bGVzLmpzXCI6NX1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGpzZnk7XG5cbnZhciBfZCA9IHJlcXVpcmUoJy4vZC5qcycpO1xuXG52YXIgX2QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGRqc2Z5KG5vZGUpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDtcblxuICBub2RlLmZpbmQgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmZpbmQoc3RyaW5nLCBub2RlKTtcbiAgfTtcbiAgbm9kZS5maW5kQWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5maW5kQWxsKHN0cmluZywgbm9kZSk7XG4gIH07XG4gIG5vZGUuY3JlYXRlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBlbGVtZW50ID0gX2QyLmRlZmF1bHQuY3JlYXRlKHN0cmluZyk7XG5cbiAgICBub2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG5cbiAgbm9kZS5jc3MgPSBmdW5jdGlvbiAoY3NzU3R5bGVzKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmNzcyhub2RlLCBjc3NTdHlsZXMpO1xuICB9O1xuICBub2RlLmFkZENsYXNzID0gZnVuY3Rpb24gKGNsYXNzTGlzdCkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5hZGRDbGFzcyhub2RlLCBjbGFzc0xpc3QpO1xuICB9O1xuICBub2RlLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzVG9SZW1vdmUpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQucmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NUb1JlbW92ZSk7XG4gIH07XG4gIG5vZGUudG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lLCBmb3JjZSkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC50b2dnbGVDbGFzcyhub2RlLCBjbGFzc05hbWUsIGZvcmNlKTtcbiAgfTtcbiAgbm9kZS5jb250YWluc0NsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5jb250YWluc0NsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gIH07XG4gIG5vZGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBub2RlVG9SZW1vdmUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBub2RlIDogYXJndW1lbnRzWzBdO1xuXG4gICAgdmFyIG9sZE5vZGUgPSBfZDIuZGVmYXVsdC5yZW1vdmUobm9kZVRvUmVtb3ZlKTtcbiAgICBub2RlID0gbnVsbDtcblxuICAgIHJldHVybiBvbGROb2RlO1xuICB9O1xuXG4gIHJldHVybiBub2RlO1xufVxufSx7XCIuL2QuanNcIjoxfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZXhwb3J0cy5maW5kQWxsID0gZmluZEFsbDtcblxudmFyIF9kanNmeSA9IHJlcXVpcmUoJy4vZGpzZnknKTtcblxudmFyIF9kanNmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kanNmeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGZpbmQoc3RyaW5nKSB7XG4gIHZhciByb290RWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGRvY3VtZW50IDogYXJndW1lbnRzWzFdO1xuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShyb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKHN0cmluZykpO1xufVxuXG5mdW5jdGlvbiBmaW5kQWxsKHN0cmluZykge1xuICB2YXIgcm9vdEVsZW1lbnQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBkb2N1bWVudCA6IGFyZ3VtZW50c1sxXTtcblxuICByZXR1cm4gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzdHJpbmcpO1xufVxufSx7XCIuL2Rqc2Z5XCI6Mn1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5leHBvcnRzLnJlbW92ZSA9IHJlbW92ZTtcblxudmFyIF9kanNmeSA9IHJlcXVpcmUoJy4vZGpzZnkuanMnKTtcblxudmFyIF9kanNmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kanNmeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZShzdHJpbmcpIHtcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICB2YXIgZWxlbWVudCA9IGZyYWdtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcblxuICBlbGVtZW50LmlubmVySFRNTCA9IHN0cmluZy50cmltKCk7XG5cbiAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5sYXN0Q2hpbGQ7XG4gIH1cblxuICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkoZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxufSx7XCIuL2Rqc2Z5LmpzXCI6Mn1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jc3MgPSBjc3M7XG5leHBvcnRzLmFkZENsYXNzID0gYWRkQ2xhc3M7XG5leHBvcnRzLmNvbnRhaW5zQ2xhc3MgPSBjb250YWluc0NsYXNzO1xuZXhwb3J0cy5yZW1vdmVDbGFzcyA9IHJlbW92ZUNsYXNzO1xuZXhwb3J0cy50b2dnbGVDbGFzcyA9IHRvZ2dsZUNsYXNzO1xuXG52YXIgX2Rqc2Z5ID0gcmVxdWlyZSgnLi9kanNmeScpO1xuXG52YXIgX2Rqc2Z5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rqc2Z5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gRWRnZSAvIElFXG52YXIgTVMgPSAnbXMnO1xuLy8gQ2hyb21lIC8gU2FmYXJpXG52YXIgV0VCS0lUID0gJ3dlYmtpdCc7XG4vLyBGaXJlZm94XG52YXIgTU9aID0gJ21veic7XG4vLyBPcGVyYVxudmFyIE8gPSAnbyc7XG52YXIgWFYgPSAneHYnO1xuLy8gS0RFXG52YXIgS0hUTUwgPSAna2h0bWwnO1xuXG52YXIgUFJFRklYSUVTID0gW01TLCBXRUJLSVQsIE1PWiwgTywgWFYsIEtIVE1MXTtcblxudmFyIENTU19QUkVGSVhFRCA9IHtcbiAgZmxvYXQ6ICdjc3NGbG9hdCdcbn07XG5cbmZ1bmN0aW9uIGNzcyhub2RlLCBjc3NTdHlsZXMpIHtcbiAgaWYgKCFub2RlIHx8IG5vZGUubm9kZVR5cGUgPT09IDggfHwgbm9kZS5ub2RlVHlwZSA9PT0gMyB8fCAhbm9kZS5zdHlsZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGNzc1N0eWxlcykge1xuICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjc3NTdHlsZXMsIGtleSkpIHtcbiAgICAgIHZhciBrZXlQcmVmaXhlZCA9IGdldFN0eWxlV2l0aFByZWZpeEtleSh7XG4gICAgICAgIHN0eWxlTGlzdDogbm9kZS5zdHlsZSxcbiAgICAgICAgc3R5bGVUb0NoZWNrOiBrZXlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoa2V5UHJlZml4ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZVtrZXlQcmVmaXhlZF0gPSBjc3NTdHlsZXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkobm9kZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIGNsYXNzTGlzdCkge1xuICB2YXIgY3VycmVudENsYXNzTGlzdCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuXG4gIGNsYXNzTGlzdCA9IHBhcnNlQXJyYXkoY2xhc3NMaXN0KSB8fCBbXTtcblxuICBpZiAoY2xhc3NMaXN0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gY2xhc3NMaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWNsYXNzTGlzdFtpXS50cmltKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdkanMuYWRkQ2xhc3MoKTogRW1wdHkgc3RyaW5ncyBhcmUgbm90IHZhbGlkIGNsYXNzIG5hbWUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250YWluc0NsYXNzSW50b0xpc3QoY3VycmVudENsYXNzTGlzdCwgY2xhc3NMaXN0W2ldKSkge1xuICAgICAgICBjdXJyZW50Q2xhc3NMaXN0ICs9ICcgJyArIGNsYXNzTGlzdFtpXS50cmltKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VycmVudENsYXNzTGlzdC50cmltKCkpO1xuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShub2RlKTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNDbGFzcyhub2RlLCBjbGFzc05hbWUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZWxlbWVudCBtdXN0IGJlIG5vdCBlbXB0eS4nKTtcbiAgfVxuXG4gIGFzc2VydENsYXNzTmFtZShjbGFzc05hbWUpO1xuXG4gIHJldHVybiBjb250YWluc0NsYXNzSW50b0xpc3Qobm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyksIGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzVG9SZW1vdmUpIHtcbiAgdmFyIGN1cnJlbnRDbGFzc0xpc3QgPSBnZXRDdXJyZW50Q2xhc3NMaXN0KG5vZGUpO1xuXG4gIGNsYXNzVG9SZW1vdmUgPSBwYXJzZUFycmF5KGNsYXNzVG9SZW1vdmUpIHx8IFtdO1xuXG4gIGlmICghY3VycmVudENsYXNzTGlzdC5sZW5ndGggfHwgIWNsYXNzVG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xuICB9XG5cbiAgaWYgKGNsYXNzVG9SZW1vdmUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGNsYXNzVG9SZW1vdmVJbnRlcmFjdGlvbjogZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGNsYXNzVG9SZW1vdmUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc1RvUmVtb3ZlW2ldO1xuICAgICAgYXNzZXJ0Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG5cbiAgICAgIGN1cnJlbnRDbGFzc0xpc3RJbnRlcmFjdGlvbjogZm9yICh2YXIgeSA9IDAsIF9sZW5ndGggPSBjdXJyZW50Q2xhc3NMaXN0Lmxlbmd0aDsgeSA8IF9sZW5ndGg7IHkrKykge1xuICAgICAgICBpZiAoY2xhc3NOYW1lID09PSBjdXJyZW50Q2xhc3NMaXN0W3ldKSB7XG4gICAgICAgICAgY3VycmVudENsYXNzTGlzdC5zcGxpY2UoeSwgMSk7XG4gICAgICAgICAgY29udGludWUgY2xhc3NUb1JlbW92ZUludGVyYWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VycmVudENsYXNzTGlzdC5qb2luKCcgJykpO1xuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShub2RlKTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lLCBmb3JjZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlbGVtZW50IG11c3QgYmUgbm90IGVtcHR5LicpO1xuICB9XG5cbiAgYXNzZXJ0Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG5cbiAgdmFyIGN1cnJlbnRDbGFzc0xpc3QgPSBnZXRDdXJyZW50Q2xhc3NMaXN0KG5vZGUpO1xuXG4gIGlmIChjb250YWluc0NsYXNzSW50b0xpc3QoY3VycmVudENsYXNzTGlzdCwgY2xhc3NOYW1lKSkge1xuICAgIGlmICghZm9yY2UpIHtcbiAgICAgIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChmb3JjZSAhPT0gZmFsc2UpIHtcbiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50Q2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIHBhcnNlQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpIHx8IFtdO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDbGFzc05hbWUoY2xhc3NOYW1lKSB7XG4gIGlmICghY2xhc3NOYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2xhc3NOYW1lIHByb3ZpZGVkIChcXCcnICsgY2xhc3NOYW1lICsgJ1xcJykgbXVzdCBiZSBub3QgZW1wdHkuJyk7XG4gIH1cblxuICBpZiAoY29udGFpbnNXaGl0ZXNwYWNlcyhjbGFzc05hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2xhc3NOYW1lIHByb3ZpZGVkIChcXCcnICsgY2xhc3NOYW1lICsgJ1xcJykgY29udGFpbnMgSFRNTCBzcGFjZSBjaGFyYWN0ZXJzLCB3aGljaCBhcmUgbm90IHZhbGlkLicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zV2hpdGVzcGFjZXMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2goL1xccy8pO1xufVxuXG5mdW5jdGlvbiBjb250YWluc0NsYXNzSW50b0xpc3QoY2xhc3NMaXN0LCBjbGFzc1RvQ2hlY2spIHtcbiAgY2xhc3NMaXN0ID0gcGFyc2VBcnJheShjbGFzc0xpc3QpIHx8IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjbGFzc0xpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY2xhc3NMaXN0W2ldLnRyaW0oKSA9PT0gY2xhc3NUb0NoZWNrLnRyaW0oKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwYXJzZUFycmF5KGNsYXNzTGlzdCkge1xuICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc0xpc3QgPSBjbGFzc0xpc3Quc3BsaXQoJyAnKTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc0xpc3Q7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlV2l0aFByZWZpeEtleShfcmVmKSB7XG4gIHZhciBzdHlsZUxpc3QgPSBfcmVmLnN0eWxlTGlzdDtcbiAgdmFyIHN0eWxlVG9DaGVjayA9IF9yZWYuc3R5bGVUb0NoZWNrO1xuXG4gIGlmIChzdHlsZVRvQ2hlY2sgaW4gc3R5bGVMaXN0KSB7XG4gICAgcmV0dXJuIHN0eWxlVG9DaGVjaztcbiAgfVxuXG4gIGlmIChzdHlsZVRvQ2hlY2sgaW4gQ1NTX1BSRUZJWEVEKSB7XG4gICAgcmV0dXJuIENTU19QUkVGSVhFRFtzdHlsZVRvQ2hlY2tdO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IFBSRUZJWElFUy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBzdHlsZVdpdGhQcmVmaXggPSAnJyArIFBSRUZJWElFU1tpXSArIHN0eWxlVG9DaGVja1swXS50b1VwcGVyQ2FzZSgpICsgc3R5bGVUb0NoZWNrLnN1YnN0cmluZygxKTtcblxuICAgIGlmIChzdHlsZVdpdGhQcmVmaXggaW4gc3R5bGVMaXN0KSB7XG4gICAgICBDU1NfUFJFRklYRURbc3R5bGVUb0NoZWNrXSA9IHN0eWxlV2l0aFByZWZpeDtcbiAgICAgIHJldHVybiBDU1NfUFJFRklYRURbc3R5bGVUb0NoZWNrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG59LHtcIi4vZGpzZnlcIjoyfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZCA9IHJlcXVpcmUoJy4vZGpzL2QuanMnKTtcblxudmFyIF9kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2QyLmRlZmF1bHQ7XG59IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQ7XG4gIH0pO1xufVxuXG52YXIgX2dsb2JhbCA9IHVuZGVmaW5lZDtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIF9nbG9iYWwgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIF9nbG9iYWwgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICBfZ2xvYmFsID0gc2VsZjtcbn0gZWxzZSB7XG4gIF9nbG9iYWwgPSB1bmRlZmluZWQ7XG59XG5cbl9nbG9iYWwuZGpzID0gX2QyLmRlZmF1bHQ7XG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuL2Rqcy9kLmpzXCI6MX1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZztcbmZ1bmN0aW9uIGh0bWxTdHJpbmdGcm9tVGVtcGxhdGVTdHJpbmcodGVtcGxhdGVPYmplY3QpIHtcbiAgdmFyIHJhdyA9IHRlbXBsYXRlT2JqZWN0LnJhdztcblxuICB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdWJzdHMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3Vic3RzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJlc3VsdCA9IHN1YnN0cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgc3Vic3QsIGkpIHtcbiAgICB2YXIgbGl0ID0gcmF3W2ldO1xuXG4gICAgc3Vic3QgPSBBcnJheS5pc0FycmF5KHN1YnN0KSA/IHN1YnN0LmpvaW4oJycpIDogc3Vic3QgKyAnJztcblxuICAgIGlmIChsaXRbbGl0Lmxlbmd0aCAtIDFdID09PSAnJCcpIHtcbiAgICAgIHN1YnN0ID0gaHRtbEVzY2FwZShzdWJzdCk7XG4gICAgICBsaXQgPSBsaXQuc2xpY2UoMCwgLTEpO1xuICAgIH1cblxuICAgIHJlc3VsdCArPSBsaXQ7XG4gICAgcmVzdWx0ICs9IHN1YnN0O1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgJycpO1xuXG4gIHJlc3VsdCArPSByYXdbcmF3Lmxlbmd0aCAtIDFdO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGh0bWxFc2NhcGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdGU7JykucmVwbGFjZSgvJy9nLCAnJiMzOTsnKS5yZXBsYWNlKC9gL2csICcmIzk2OycpO1xufVxufSx7fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VEaXNwYXRjaGVyKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3Rvb2xzL3V0aWxzLmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBEaXN0YW5jZUFjdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaXN0YW5jZUFjdGlvbnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpc3RhbmNlQWN0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGlzdGFuY2VBY3Rpb25zLCBudWxsLCBbe1xuICAgIGtleTogJ2NoYW5nZVZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVmFsdWUodmFsdWUpIHtcbiAgICAgIF9kaXN0YW5jZURpc3BhdGNoZXIyLmRlZmF1bHQuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBEaXN0YW5jZUFjdGlvbnMuVkFMVUVfQ0hBTkdFRCxcbiAgICAgICAgZGF0YTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NoYW5nZVVuaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VVbml0KHVuaXQpIHtcbiAgICAgIF9kaXN0YW5jZURpc3BhdGNoZXIyLmRlZmF1bHQuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBEaXN0YW5jZUFjdGlvbnMuVU5JVF9DSEFOR0VELFxuICAgICAgICBkYXRhOiB1bml0XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGlzdGFuY2VBY3Rpb25zO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGlzdGFuY2VBY3Rpb25zO1xuXG4oMCwgX3V0aWxzLmRlZmluZUNvbnN0UHJvcGVydHkpKERpc3RhbmNlQWN0aW9ucywgJ1ZBTFVFX0NIQU5HRUQnLCBTeW1ib2woKSk7XG4oMCwgX3V0aWxzLmRlZmluZUNvbnN0UHJvcGVydHkpKERpc3RhbmNlQWN0aW9ucywgJ1VOSVRfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcblxufSx7XCIuLi90b29scy91dGlscy5qc1wiOjMwLFwiLi9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzXCI6MTB9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRGlzdGFuY2UgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaXN0YW5jZShfcmVmKSB7XG4gICAgdmFyIF9yZWYkdW5pdCA9IF9yZWYudW5pdDtcbiAgICB2YXIgdW5pdCA9IF9yZWYkdW5pdCA9PT0gdW5kZWZpbmVkID8gJ0ttJyA6IF9yZWYkdW5pdDtcbiAgICB2YXIgX3JlZiR2YWx1ZSA9IF9yZWYudmFsdWU7XG4gICAgdmFyIHZhbHVlID0gX3JlZiR2YWx1ZSA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkdmFsdWU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzdGFuY2UpO1xuXG4gICAgdGhpcy51bml0ID0gdW5pdDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGlzdGFuY2UsIFt7XG4gICAga2V5OiAnc2V0VmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGlzdGFuY2U7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXN0YW5jZTtcblxufSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Rpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi90b29scy9kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfZGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IF9kaXNwYXRjaGVyMi5kZWZhdWx0KCk7XG5cbn0se1wiLi4vdG9vbHMvZGlzcGF0Y2hlci5qc1wiOjI4fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtZGlzdGFuY2VcIj5cXG4gICAgICA8aW5wdXQgY2xhc3M9XCJmZS1pbnB1dHNfX2lucHV0IGZlLWRpc3RhbmNlX19pbnB1dFwiIHR5cGU9XCJudW1iZXJcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLXVuaXQgZmUtZGlzdGFuY2VfX3VuaXRcIj57JCR1bml0fTwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSwgWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLWRpc3RhbmNlXCI+XFxuICAgICAgPGlucHV0IGNsYXNzPVwiZmUtaW5wdXRzX19pbnB1dCBmZS1kaXN0YW5jZV9faW5wdXRcIiB0eXBlPVwibnVtYmVyXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJmZS11bml0IGZlLWRpc3RhbmNlX191bml0XCI+eyQkdW5pdH08L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgJ10pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0TW9kdWxlID0gaW5pdE1vZHVsZTtcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmFjdGlvbnMuanMnKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VBY3Rpb25zKTtcblxudmFyIF9kaXN0YW5jZVN0b3JlID0gcmVxdWlyZSgnLi9kaXN0YW5jZS5zdG9yZS5qcycpO1xuXG52YXIgX2Rpc3RhbmNlU3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VTdG9yZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkZGlzdGFuY2U6IG51bGwsXG4gICRpbnB1dDogbnVsbCxcbiAgJHVuaXQ6IG51bGxcbn07XG5cbnZhciBkaXN0YW5jZVN0b3JlID0gdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpbml0TW9kdWxlKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kZGlzdGFuY2UgPSAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG4gIHNldEVsZW1lbnRIYW5kbGVycygpO1xuXG4gIGRpc3RhbmNlU3RvcmUgPSBuZXcgX2Rpc3RhbmNlU3RvcmUyLmRlZmF1bHQoKTtcbiAgZGlzdGFuY2VTdG9yZS5vbkNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgcmVmcmVzaFVuaXQoZGlzdGFuY2VTdG9yZS5kaXN0YW5jZS51bml0KTtcbiAgfSk7XG5cbiAgX2Rpc3RhbmNlQWN0aW9uczIuZGVmYXVsdC5jaGFuZ2VVbml0KCdLbScpO1xuICBkaXN0YW5jZVN0b3JlLnVucmVnaXN0ZXJMaXN0ZW5lcigpO1xufVxuXG5mdW5jdGlvbiByZWZyZXNoVW5pdCh1bml0KSB7XG4gIGVsZW1lbnRNYXAuJHVuaXQuaW5uZXJIVE1MID0gdW5pdDtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG4gIGVsZW1lbnRNYXAuJGlucHV0ID0gZWxlbWVudE1hcC4kZGlzdGFuY2UuZmluZCgnLmZlLWRpc3RhbmNlX19pbnB1dCcpO1xuICBlbGVtZW50TWFwLiR1bml0ID0gZWxlbWVudE1hcC4kZGlzdGFuY2UuZmluZCgnLmZlLWRpc3RhbmNlX191bml0Jyk7XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnRIYW5kbGVycygpIHtcbiAgZWxlbWVudE1hcC4kaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LmNoYW5nZVZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gIH0pO1xufVxuXG59LHtcIi4vZGlzdGFuY2UuYWN0aW9ucy5qc1wiOjgsXCIuL2Rpc3RhbmNlLnN0b3JlLmpzXCI6MTIsXCJkb20uanNcIjo2fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3RvcmUgPSByZXF1aXJlKCcuLi90b29scy9zdG9yZS5qcycpO1xuXG52YXIgX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3JlKTtcblxudmFyIF9kaXN0YW5jZUNsYXNzID0gcmVxdWlyZSgnLi9kaXN0YW5jZS5jbGFzcy5qcycpO1xuXG52YXIgX2Rpc3RhbmNlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VDbGFzcyk7XG5cbnZhciBfZGlzdGFuY2VBY3Rpb25zID0gcmVxdWlyZSgnLi9kaXN0YW5jZS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlQWN0aW9ucyk7XG5cbnZhciBfZGlzdGFuY2VEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlRGlzcGF0Y2hlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERpc3RhbmNlU3RvcmUgPSAoZnVuY3Rpb24gKF9TdG9yZSkge1xuICBfaW5oZXJpdHMoRGlzdGFuY2VTdG9yZSwgX1N0b3JlKTtcblxuICBmdW5jdGlvbiBEaXN0YW5jZVN0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXN0YW5jZVN0b3JlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihEaXN0YW5jZVN0b3JlKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHt9KTtcblxuICAgIF90aGlzLmxpc3RlbmVyID0gX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHN3aXRjaCAobGlzdGVuZXIudHlwZSkge1xuICAgICAgICBjYXNlIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuVkFMVUVfQ0hBTkdFRDpcbiAgICAgICAgICBfdGhpcy5kaXN0YW5jZSA9IG5ldyBfZGlzdGFuY2VDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB1bml0OiBfdGhpcy5kaXN0YW5jZS51bml0LFxuICAgICAgICAgICAgdmFsdWU6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX2Rpc3RhbmNlQWN0aW9uczIuZGVmYXVsdC5VTklUX0NIQU5HRUQ6XG4gICAgICAgICAgX3RoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzLmRpc3RhbmNlLnZhbHVlLFxuICAgICAgICAgICAgdW5pdDogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNoYW5nZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaXN0YW5jZVN0b3JlLCBbe1xuICAgIGtleTogJ3VucmVnaXN0ZXJMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcigpIHtcbiAgICAgIF9kaXN0YW5jZURpc3BhdGNoZXIyLmRlZmF1bHQudW5yZWdpc3Rlcih0aGlzLmxpc3RlbmVyKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGlzdGFuY2VTdG9yZTtcbn0pKF9zdG9yZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERpc3RhbmNlU3RvcmU7XG5cbn0se1wiLi4vdG9vbHMvc3RvcmUuanNcIjoyOSxcIi4vZGlzdGFuY2UuYWN0aW9ucy5qc1wiOjgsXCIuL2Rpc3RhbmNlLmNsYXNzLmpzXCI6OSxcIi4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qc1wiOjEwfV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8aGVhZGVyIGNsYXNzPVwiZmUtaGVhZGVyXCI+XFxuICAgICAgPGgxPkZ1ZWwgRWNvbm9teTwvaDE+XFxuICAgIDwvaGVhZGVyPlxcbiAgJ10sIFsnXFxuICAgIDxoZWFkZXIgY2xhc3M9XCJmZS1oZWFkZXJcIj5cXG4gICAgICA8aDE+RnVlbCBFY29ub215PC9oMT5cXG4gICAgPC9oZWFkZXI+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cbnZhciBjb25maWdNYXAgPSB7XG4gIGh0bWw6ICgwLCBfZG9tMi5kZWZhdWx0KShfdGVtcGxhdGVPYmplY3QpXG59O1xuXG5mdW5jdGlvbiBpbml0TW9kdWxlKCRjb250YWluZXIpIHtcbiAgJGNvbnRhaW5lci5jcmVhdGUoY29uZmlnTWFwLmh0bWwpO1xufVxuXG59LHtcImRvbS5qc1wiOjZ9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfaGVhZGVyID0gcmVxdWlyZSgnLi9oZWFkZXIvaGVhZGVyLmpzJyk7XG5cbnZhciBoZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGVhZGVyKTtcblxudmFyIF9pbnB1dHNDb250YWluZXIgPSByZXF1aXJlKCcuL2lucHV0cy9pbnB1dHMtY29udGFpbmVyLmpzJyk7XG5cbnZhciBpbnB1dHNDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaW5wdXRzQ29udGFpbmVyKTtcblxudmFyIF9yZXN1bHRzQ29udGFpbmVyID0gcmVxdWlyZSgnLi9yZXN1bHRzL3Jlc3VsdHMtY29udGFpbmVyLmpzJyk7XG5cbnZhciByZXN1bHRzQ29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3Jlc3VsdHNDb250YWluZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgJGhlYWRlckNvbnRhaW5lciA9ICgwLCBfZG9tMi5kZWZhdWx0KSgnLmZlLWpzLWhlYWRlcicpO1xudmFyICRpbnB1dHNDb250YWluZXIgPSAoMCwgX2RvbTIuZGVmYXVsdCkoJy5mZS1qcy1pbnB1dHMtY29udGFpbmVyJyk7XG52YXIgJHJlc3VsdHNDb250YWluZXIgPSAoMCwgX2RvbTIuZGVmYXVsdCkoJy5mZS1qcy1yZXN1bHRzLWNvbnRhaW5lcicpO1xuXG5oZWFkZXIuaW5pdE1vZHVsZSgkaGVhZGVyQ29udGFpbmVyKTtcbmlucHV0c0NvbnRhaW5lci5pbml0TW9kdWxlKCRpbnB1dHNDb250YWluZXIpO1xucmVzdWx0c0NvbnRhaW5lci5pbml0TW9kdWxlKCRyZXN1bHRzQ29udGFpbmVyKTtcblxufSx7XCIuL2hlYWRlci9oZWFkZXIuanNcIjoxMyxcIi4vaW5wdXRzL2lucHV0cy1jb250YWluZXIuanNcIjoxNSxcIi4vcmVzdWx0cy9yZXN1bHRzLWNvbnRhaW5lci5qc1wiOjI0LFwiZG9tLmpzXCI6Nn1dLDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90ZW1wbGF0ZU9iamVjdCA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLWlucHV0cy1jb250YWluZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzIGZlLWpzLXF1YW50aXR5XCI+PC9kaXY+XFxuXFxuICAgICAgPGRpdiBjbGFzcz1cImZlLWlucHV0cyBmZS1qcy1kaXN0YW5jZVwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICddLCBbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzLWNvbnRhaW5lclwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMgZmUtanMtcXVhbnRpdHlcIj48L2Rpdj5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzIGZlLWpzLWRpc3RhbmNlXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgJ10pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0TW9kdWxlID0gaW5pdE1vZHVsZTtcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9xdWFudGl0eSA9IHJlcXVpcmUoJy4uL3F1YW50aXR5L3F1YW50aXR5LmpzJyk7XG5cbnZhciBxdWFudGl0eSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9xdWFudGl0eSk7XG5cbnZhciBfZGlzdGFuY2UgPSByZXF1aXJlKCcuLi9kaXN0YW5jZS9kaXN0YW5jZS5qcycpO1xuXG52YXIgZGlzdGFuY2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZGlzdGFuY2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cbnZhciBjb25maWdNYXAgPSB7XG4gIGh0bWw6ICgwLCBfZG9tMi5kZWZhdWx0KShfdGVtcGxhdGVPYmplY3QpXG59O1xuXG52YXIgZWxlbWVudE1hcCA9IHtcbiAgJGNvbnRhaW5lcjogbnVsbCxcbiAgJGlucHV0Q29udGFpbmVyOiBudWxsLFxuICAkaW5wdXRRdWFudGl0eTogbnVsbCxcbiAgJGlucHV0RGlzdGFuY2U6IG51bGxcbn07XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRpbnB1dENvbnRhaW5lciA9ICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcblxuICBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpO1xuXG4gIHF1YW50aXR5LmluaXRNb2R1bGUoZWxlbWVudE1hcC4kaW5wdXRRdWFudGl0eSk7XG4gIGRpc3RhbmNlLmluaXRNb2R1bGUoZWxlbWVudE1hcC4kaW5wdXREaXN0YW5jZSk7XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICBlbGVtZW50TWFwLiRpbnB1dFF1YW50aXR5ID0gZWxlbWVudE1hcC4kaW5wdXRDb250YWluZXIuZmluZCgnLmZlLWpzLXF1YW50aXR5Jyk7XG4gIGVsZW1lbnRNYXAuJGlucHV0RGlzdGFuY2UgPSBlbGVtZW50TWFwLiRpbnB1dENvbnRhaW5lci5maW5kKCcuZmUtanMtZGlzdGFuY2UnKTtcbn1cblxufSx7XCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5qc1wiOjExLFwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuanNcIjoxOSxcImRvbS5qc1wiOjZ9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9xdWFudGl0eURpc3BhdGNoZXIgPSByZXF1aXJlKCcuL3F1YW50aXR5LmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9xdWFudGl0eURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlEaXNwYXRjaGVyKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3Rvb2xzL3V0aWxzLmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBRdWFudGl0eUFjdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBRdWFudGl0eUFjdGlvbnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1YW50aXR5QWN0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUXVhbnRpdHlBY3Rpb25zLCBudWxsLCBbe1xuICAgIGtleTogJ2NoYW5nZVZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVmFsdWUodmFsdWUpIHtcbiAgICAgIF9xdWFudGl0eURpc3BhdGNoZXIyLmRlZmF1bHQuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBRdWFudGl0eUFjdGlvbnMuVkFMVUVfQ0hBTkdFRCxcbiAgICAgICAgZGF0YTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NoYW5nZVVuaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VVbml0KHVuaXQpIHtcbiAgICAgIF9xdWFudGl0eURpc3BhdGNoZXIyLmRlZmF1bHQuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBRdWFudGl0eUFjdGlvbnMuVU5JVF9DSEFOR0VELFxuICAgICAgICBkYXRhOiB1bml0XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUXVhbnRpdHlBY3Rpb25zO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUXVhbnRpdHlBY3Rpb25zO1xuXG4oMCwgX3V0aWxzLmRlZmluZUNvbnN0UHJvcGVydHkpKFF1YW50aXR5QWN0aW9ucywgJ1ZBTFVFX0NIQU5HRUQnLCBTeW1ib2woKSk7XG4oMCwgX3V0aWxzLmRlZmluZUNvbnN0UHJvcGVydHkpKFF1YW50aXR5QWN0aW9ucywgJ1VOSVRfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcblxufSx7XCIuLi90b29scy91dGlscy5qc1wiOjMwLFwiLi9xdWFudGl0eS5kaXNwYXRjaGVyLmpzXCI6MTh9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFF1YW50aXR5ID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUXVhbnRpdHkoX3JlZikge1xuICAgIHZhciBfcmVmJHVuaXQgPSBfcmVmLnVuaXQ7XG4gICAgdmFyIHVuaXQgPSBfcmVmJHVuaXQgPT09IHVuZGVmaW5lZCA/ICdMJyA6IF9yZWYkdW5pdDtcbiAgICB2YXIgX3JlZiR2YWx1ZSA9IF9yZWYudmFsdWU7XG4gICAgdmFyIHZhbHVlID0gX3JlZiR2YWx1ZSA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkdmFsdWU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVhbnRpdHkpO1xuXG4gICAgdGhpcy51bml0ID0gdW5pdDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUXVhbnRpdHksIFt7XG4gICAga2V5OiAnc2V0VmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUXVhbnRpdHk7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBRdWFudGl0eTtcblxufSx7fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Rpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi90b29scy9kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfZGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IF9kaXNwYXRjaGVyMi5kZWZhdWx0KCk7XG5cbn0se1wiLi4vdG9vbHMvZGlzcGF0Y2hlci5qc1wiOjI4fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtcXVhbnRpdHlcIj5cXG4gICAgICA8aW5wdXQgY2xhc3M9XCJmZS1pbnB1dHNfX2lucHV0IGZlLXF1YW50aXR5X19pbnB1dFwiIHR5cGU9XCJudW1iZXJcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLXVuaXQgZmUtcXVhbnRpdHlfX3VuaXRcIj57JCR1bml0fTwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSwgWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLXF1YW50aXR5XCI+XFxuICAgICAgPGlucHV0IGNsYXNzPVwiZmUtaW5wdXRzX19pbnB1dCBmZS1xdWFudGl0eV9faW5wdXRcIiB0eXBlPVwibnVtYmVyXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJmZS11bml0IGZlLXF1YW50aXR5X191bml0XCI+eyQkdW5pdH08L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgJ10pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0TW9kdWxlID0gaW5pdE1vZHVsZTtcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMgPSByZXF1aXJlKCcuL3F1YW50aXR5LmFjdGlvbnMuanMnKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlBY3Rpb25zKTtcblxudmFyIF9xdWFudGl0eVN0b3JlID0gcmVxdWlyZSgnLi9xdWFudGl0eS5zdG9yZS5qcycpO1xuXG52YXIgX3F1YW50aXR5U3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlTdG9yZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkcXVhbnRpdHk6IG51bGwsXG4gICRpbnB1dDogbnVsbCxcbiAgJHVuaXQ6IG51bGxcbn07XG5cbnZhciBxdWFudGl0eVN0b3JlID0gdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpbml0TW9kdWxlKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kcXVhbnRpdHkgPSAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG4gIHNldEVsZW1lbnRIYW5kbGVycygpO1xuXG4gIHF1YW50aXR5U3RvcmUgPSBuZXcgX3F1YW50aXR5U3RvcmUyLmRlZmF1bHQoKTtcbiAgcXVhbnRpdHlTdG9yZS5vbkNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgcmVmcmVzaFVuaXQocXVhbnRpdHlTdG9yZS5xdWFudGl0eS51bml0KTtcbiAgfSk7XG5cbiAgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5jaGFuZ2VVbml0KCdMJyk7XG4gIHF1YW50aXR5U3RvcmUudW5yZWdpc3Rlckxpc3RlbmVyKCk7XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hVbml0KHVuaXQpIHtcbiAgZWxlbWVudE1hcC4kdW5pdC5pbm5lckhUTUwgPSB1bml0O1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kaW5wdXQgPSBlbGVtZW50TWFwLiRxdWFudGl0eS5maW5kKCcuZmUtcXVhbnRpdHlfX2lucHV0Jyk7XG4gIGVsZW1lbnRNYXAuJHVuaXQgPSBlbGVtZW50TWFwLiRxdWFudGl0eS5maW5kKCcuZmUtcXVhbnRpdHlfX3VuaXQnKTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudEhhbmRsZXJzKCkge1xuICBlbGVtZW50TWFwLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuY2hhbmdlVmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfSk7XG59XG5cbn0se1wiLi9xdWFudGl0eS5hY3Rpb25zLmpzXCI6MTYsXCIuL3F1YW50aXR5LnN0b3JlLmpzXCI6MjAsXCJkb20uanNcIjo2fV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3RvcmUgPSByZXF1aXJlKCcuLi90b29scy9zdG9yZS5qcycpO1xuXG52YXIgX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3JlKTtcblxudmFyIF9xdWFudGl0eUNsYXNzID0gcmVxdWlyZSgnLi9xdWFudGl0eS5jbGFzcy5qcycpO1xuXG52YXIgX3F1YW50aXR5Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlDbGFzcyk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zID0gcmVxdWlyZSgnLi9xdWFudGl0eS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5QWN0aW9ucyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9xdWFudGl0eS5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5RGlzcGF0Y2hlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFF1YW50aXR5U3RvcmUgPSAoZnVuY3Rpb24gKF9TdG9yZSkge1xuICBfaW5oZXJpdHMoUXVhbnRpdHlTdG9yZSwgX1N0b3JlKTtcblxuICBmdW5jdGlvbiBRdWFudGl0eVN0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWFudGl0eVN0b3JlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihRdWFudGl0eVN0b3JlKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnF1YW50aXR5ID0gbmV3IF9xdWFudGl0eUNsYXNzMi5kZWZhdWx0KHt9KTtcblxuICAgIF90aGlzLmxpc3RlbmVyID0gX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHN3aXRjaCAobGlzdGVuZXIudHlwZSkge1xuICAgICAgICBjYXNlIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuVkFMVUVfQ0hBTkdFRDpcbiAgICAgICAgICBfdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB1bml0OiBfdGhpcy5xdWFudGl0eS51bml0LFxuICAgICAgICAgICAgdmFsdWU6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5VTklUX0NIQU5HRUQ6XG4gICAgICAgICAgX3RoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzLnF1YW50aXR5LnZhbHVlLFxuICAgICAgICAgICAgdW5pdDogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNoYW5nZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWFudGl0eVN0b3JlLCBbe1xuICAgIGtleTogJ3VucmVnaXN0ZXJMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcigpIHtcbiAgICAgIF9xdWFudGl0eURpc3BhdGNoZXIyLmRlZmF1bHQudW5yZWdpc3Rlcih0aGlzLmxpc3RlbmVyKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUXVhbnRpdHlTdG9yZTtcbn0pKF9zdG9yZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFF1YW50aXR5U3RvcmU7XG5cbn0se1wiLi4vdG9vbHMvc3RvcmUuanNcIjoyOSxcIi4vcXVhbnRpdHkuYWN0aW9ucy5qc1wiOjE2LFwiLi9xdWFudGl0eS5jbGFzcy5qc1wiOjE3LFwiLi9xdWFudGl0eS5kaXNwYXRjaGVyLmpzXCI6MTh9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRnVlbENvbnN1bXB0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZ1ZWxDb25zdW1wdGlvbnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZ1ZWxDb25zdW1wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZ1ZWxDb25zdW1wdGlvbnMsIG51bGwsIFt7XG4gICAga2V5OiBcImNhbGNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsYyhfcmVmKSB7XG4gICAgICB2YXIgX3JlZiRxdWFudGl0eSA9IF9yZWYucXVhbnRpdHk7XG4gICAgICB2YXIgcXVhbnRpdHkgPSBfcmVmJHF1YW50aXR5ID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkcXVhbnRpdHk7XG4gICAgICB2YXIgX3JlZiRkaXN0YW5jZSA9IF9yZWYuZGlzdGFuY2U7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBfcmVmJGRpc3RhbmNlID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkZGlzdGFuY2U7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgICB1bml0OiBkaXN0YW5jZS51bml0ICsgXCIvXCIgKyBxdWFudGl0eS51bml0XG4gICAgICB9O1xuXG4gICAgICBpZiAoIXF1YW50aXR5LnZhbHVlIHx8ICFkaXN0YW5jZS52YWx1ZSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXN1bHQudmFsdWUgPSBkaXN0YW5jZS52YWx1ZSAvIHF1YW50aXR5LnZhbHVlO1xuXG4gICAgICByZXN1bHQudmFsdWUgPSByZXN1bHQudmFsdWUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRnVlbENvbnN1bXB0aW9ucztcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZ1ZWxDb25zdW1wdGlvbnM7XG5cbn0se31dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90ZW1wbGF0ZU9iamVjdCA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLWZ1ZWwtY29uc3VtcHRpb25cIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLWpzLXZhbHVlXCI+ODg8L3NwYW4+IDxzcGFuIGNsYXNzPVwiZmUtdW5pdFwiPkttL0w8L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgJ10sIFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1mdWVsLWNvbnN1bXB0aW9uXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJmZS1qcy12YWx1ZVwiPjg4PC9zcGFuPiA8c3BhbiBjbGFzcz1cImZlLXVuaXRcIj5LbS9MPC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfZnVlbENvbnN1bXB0aW9uU3RvcmUgPSByZXF1aXJlKCcuL2Z1ZWwtY29uc3VtcHRpb24uc3RvcmUuanMnKTtcblxudmFyIF9mdWVsQ29uc3VtcHRpb25TdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mdWVsQ29uc3VtcHRpb25TdG9yZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkZnVlbENvbnN1bXB0aW9uOiBudWxsLFxuICAkZnVlbFVuaXQ6IG51bGwsXG4gICRmdWVsVmFsdWU6IG51bGxcbn07XG5cbnZhciBmdWVsQ29uc3VtcHRpb25TdG9yZSA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxDb25zdW1wdGlvbiA9ICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcbiAgc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKTtcblxuICBmdWVsQ29uc3VtcHRpb25TdG9yZSA9IG5ldyBfZnVlbENvbnN1bXB0aW9uU3RvcmUyLmRlZmF1bHQoKTtcblxuICBmdWVsQ29uc3VtcHRpb25TdG9yZS5vbkNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgcmVmcmVzaEZ1ZWxDb25zdW1wdGlvbihmdWVsQ29uc3VtcHRpb25TdG9yZS5yZXN1bHRzKTtcbiAgfSk7XG5cbiAgZnVlbENvbnN1bXB0aW9uU3RvcmUuY2hhbmdlKCk7XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hGdWVsQ29uc3VtcHRpb24ocmVzdWx0cykge1xuICBlbGVtZW50TWFwLiRmdWVsVW5pdC5pbm5lckhUTUwgPSByZXN1bHRzLnVuaXQ7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxWYWx1ZS5pbm5lckhUTUwgPSByZXN1bHRzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kZnVlbFVuaXQgPSBlbGVtZW50TWFwLiRmdWVsQ29uc3VtcHRpb24uZmluZCgnLmZlLXVuaXQnKTtcbiAgZWxlbWVudE1hcC4kZnVlbFZhbHVlID0gZWxlbWVudE1hcC4kZnVlbENvbnN1bXB0aW9uLmZpbmQoJy5mZS1qcy12YWx1ZScpO1xufVxuXG59LHtcIi4vZnVlbC1jb25zdW1wdGlvbi5zdG9yZS5qc1wiOjIzLFwiZG9tLmpzXCI6Nn1dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3Rvb2xzL3N0b3JlLmpzJyk7XG5cbnZhciBfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmUpO1xuXG52YXIgX3Jlc3VsdHNBY3Rpb25zID0gcmVxdWlyZSgnLi4vcmVzdWx0cy5hY3Rpb25zLmpzJyk7XG5cbnZhciBfcmVzdWx0c0FjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzdWx0c0FjdGlvbnMpO1xuXG52YXIgX3Jlc3VsdHNEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vcmVzdWx0cy5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcmVzdWx0c0Rpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzdWx0c0Rpc3BhdGNoZXIpO1xuXG52YXIgX2Z1ZWxDb25zdW1wdGlvbkNsYXNzID0gcmVxdWlyZSgnLi9mdWVsLWNvbnN1bXB0aW9uLmNsYXNzLmpzJyk7XG5cbnZhciBfZnVlbENvbnN1bXB0aW9uQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVlbENvbnN1bXB0aW9uQ2xhc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBGdWVsQ29uc3VtcHRpb25TdG9yZSA9IChmdW5jdGlvbiAoX1N0b3JlKSB7XG4gIF9pbmhlcml0cyhGdWVsQ29uc3VtcHRpb25TdG9yZSwgX1N0b3JlKTtcblxuICBmdW5jdGlvbiBGdWVsQ29uc3VtcHRpb25TdG9yZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnVlbENvbnN1bXB0aW9uU3RvcmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZ1ZWxDb25zdW1wdGlvblN0b3JlKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnJlc3VsdHMgPSBfZnVlbENvbnN1bXB0aW9uQ2xhc3MyLmRlZmF1bHQuY2FsYyh7fSk7XG5cbiAgICBfcmVzdWx0c0Rpc3BhdGNoZXIyLmRlZmF1bHQucmVnaXN0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBzd2l0Y2ggKGxpc3RlbmVyLnR5cGUpIHtcbiAgICAgICAgY2FzZSBfcmVzdWx0c0FjdGlvbnMyLmRlZmF1bHQuUkVTVUxUX0NIQU5HRUQ6XG4gICAgICAgICAgX3RoaXMucmVzdWx0cyA9IF9mdWVsQ29uc3VtcHRpb25DbGFzczIuZGVmYXVsdC5jYWxjKGxpc3RlbmVyLmRhdGEpO1xuICAgICAgICAgIF90aGlzLmNoYW5nZShfdGhpcy5yZXN1bHRzKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBGdWVsQ29uc3VtcHRpb25TdG9yZTtcbn0pKF9zdG9yZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZ1ZWxDb25zdW1wdGlvblN0b3JlO1xuXG59LHtcIi4uLy4uL3Rvb2xzL3N0b3JlLmpzXCI6MjksXCIuLi9yZXN1bHRzLmFjdGlvbnMuanNcIjoyNSxcIi4uL3Jlc3VsdHMuZGlzcGF0Y2hlci5qc1wiOjI2LFwiLi9mdWVsLWNvbnN1bXB0aW9uLmNsYXNzLmpzXCI6MjF9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1yZXN1bHRzLWNvbnRhaW5lclwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1qcy1mdWVsLWNvbnN1bXB0aW9uXCIgc3R5bGU9XCJoZWlnaHQ6MTAwJVwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICddLCBbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtcmVzdWx0cy1jb250YWluZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtanMtZnVlbC1jb25zdW1wdGlvblwiIHN0eWxlPVwiaGVpZ2h0OjEwMCVcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX2Z1ZWxDb25zdW1wdGlvbiA9IHJlcXVpcmUoJy4vZnVlbC1jb25zdW1wdGlvbi9mdWVsLWNvbnN1bXB0aW9uLmpzJyk7XG5cbnZhciBmdWVsQ29tc3VwdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mdWVsQ29uc3VtcHRpb24pO1xuXG52YXIgX3Jlc3VsdHNTdG9yZSA9IHJlcXVpcmUoJy4vcmVzdWx0cy5zdG9yZS5qcycpO1xuXG52YXIgX3Jlc3VsdHNTdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzU3RvcmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cbnZhciByZXN1bHRzU3RvcmUgPSB1bmRlZmluZWQ7XG5cbnZhciBjb25maWdNYXAgPSB7XG4gIGh0bWw6ICgwLCBfZG9tMi5kZWZhdWx0KShfdGVtcGxhdGVPYmplY3QpXG59O1xuXG52YXIgZWxlbWVudE1hcCA9IHtcbiAgJGNvbnRhaW5lcjogbnVsbCxcbiAgJHJlc3VsdHNDb250YWluZXI6IG51bGwsXG4gICRmdWVsQ29tc3VwdGlvbjogbnVsbFxufTtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJHJlc3VsdHNDb250YWluZXIgPSAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG5cbiAgcmVzdWx0c1N0b3JlID0gbmV3IF9yZXN1bHRzU3RvcmUyLmRlZmF1bHQoKTtcblxuICBmdWVsQ29tc3VwdGlvbi5pbml0TW9kdWxlKGVsZW1lbnRNYXAuJGZ1ZWxDb21zdXB0aW9uKTtcblxuICByZXN1bHRzU3RvcmUudXBkYXRlUmVzdWx0cygpO1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kZnVlbENvbXN1cHRpb24gPSBlbGVtZW50TWFwLiRyZXN1bHRzQ29udGFpbmVyLmZpbmQoJy5mZS1qcy1mdWVsLWNvbnN1bXB0aW9uJyk7XG59XG5cbn0se1wiLi9mdWVsLWNvbnN1bXB0aW9uL2Z1ZWwtY29uc3VtcHRpb24uanNcIjoyMixcIi4vcmVzdWx0cy5zdG9yZS5qc1wiOjI3LFwiZG9tLmpzXCI6Nn1dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Jlc3VsdHNEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9yZXN1bHRzLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9yZXN1bHRzRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzRGlzcGF0Y2hlcik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi90b29scy91dGlscy5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUmVzdWx0c0FjdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZXN1bHRzQWN0aW9ucygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzdWx0c0FjdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3VsdHNBY3Rpb25zLCBudWxsLCBbe1xuICAgIGtleTogJ2NoYW5nZVJlc3VsdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVJlc3VsdCh2YWx1ZSkge1xuICAgICAgX3Jlc3VsdHNEaXNwYXRjaGVyMi5kZWZhdWx0LmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogUmVzdWx0c0FjdGlvbnMuUkVTVUxUX0NIQU5HRUQsXG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzdWx0c0FjdGlvbnM7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZXN1bHRzQWN0aW9ucztcblxuKDAsIF91dGlscy5kZWZpbmVDb25zdFByb3BlcnR5KShSZXN1bHRzQWN0aW9ucywgJ1JFU1VMVF9DSEFOR0VEJywgU3ltYm9sKCkpO1xuXG59LHtcIi4uL3Rvb2xzL3V0aWxzLmpzXCI6MzAsXCIuL3Jlc3VsdHMuZGlzcGF0Y2hlci5qc1wiOjI2fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Rpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi90b29scy9kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfZGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IF9kaXNwYXRjaGVyMi5kZWZhdWx0KCk7XG5cbn0se1wiLi4vdG9vbHMvZGlzcGF0Y2hlci5qc1wiOjI4fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3RvcmUgPSByZXF1aXJlKCcuLi90b29scy9zdG9yZS5qcycpO1xuXG52YXIgX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3JlKTtcblxudmFyIF9xdWFudGl0eUNsYXNzID0gcmVxdWlyZSgnLi4vcXVhbnRpdHkvcXVhbnRpdHkuY2xhc3MuanMnKTtcblxudmFyIF9xdWFudGl0eUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5Q2xhc3MpO1xuXG52YXIgX3F1YW50aXR5QWN0aW9ucyA9IHJlcXVpcmUoJy4uL3F1YW50aXR5L3F1YW50aXR5LmFjdGlvbnMuanMnKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlBY3Rpb25zKTtcblxudmFyIF9xdWFudGl0eURpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9xdWFudGl0eS9xdWFudGl0eS5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5RGlzcGF0Y2hlcik7XG5cbnZhciBfZGlzdGFuY2VDbGFzcyA9IHJlcXVpcmUoJy4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmNsYXNzLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUNsYXNzKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMgPSByZXF1aXJlKCcuLi9kaXN0YW5jZS9kaXN0YW5jZS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlQWN0aW9ucyk7XG5cbnZhciBfZGlzdGFuY2VEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vZGlzdGFuY2UvZGlzdGFuY2UuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZURpc3BhdGNoZXIpO1xuXG52YXIgX3Jlc3VsdHNBY3Rpb25zID0gcmVxdWlyZSgnLi9yZXN1bHRzLmFjdGlvbnMuanMnKTtcblxudmFyIF9yZXN1bHRzQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzQWN0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlc3VsdHNTdG9yZSA9IChmdW5jdGlvbiAoX1N0b3JlKSB7XG4gIF9pbmhlcml0cyhSZXN1bHRzU3RvcmUsIF9TdG9yZSk7XG5cbiAgZnVuY3Rpb24gUmVzdWx0c1N0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXN1bHRzU3RvcmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlc3VsdHNTdG9yZSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7fSk7XG4gICAgX3RoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe30pO1xuXG4gICAgX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIF90aGlzLl91cGRhdGVRdWFudGl0eUNsYXNzKGxpc3RlbmVyKTtcblxuICAgICAgX3RoaXMudXBkYXRlUmVzdWx0cygpO1xuICAgIH0pO1xuXG4gICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIF90aGlzLl91cGRhdGVEaXN0YW5jZUNsYXNzKGxpc3RlbmVyKTtcblxuICAgICAgX3RoaXMudXBkYXRlUmVzdWx0cygpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXN1bHRzU3RvcmUsIFt7XG4gICAga2V5OiAnX3VwZGF0ZVF1YW50aXR5Q2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlUXVhbnRpdHlDbGFzcyhsaXN0ZW5lcikge1xuICAgICAgc3dpdGNoIChsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgIGNhc2UgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5WQUxVRV9DSEFOR0VEOlxuICAgICAgICAgIHRoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdW5pdDogdGhpcy5xdWFudGl0eS51bml0LFxuICAgICAgICAgICAgdmFsdWU6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5VTklUX0NIQU5HRUQ6XG4gICAgICAgICAgdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5xdWFudGl0eS52YWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoYW5nZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ191cGRhdGVEaXN0YW5jZUNsYXNzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZURpc3RhbmNlQ2xhc3MobGlzdGVuZXIpIHtcbiAgICAgIHN3aXRjaCAobGlzdGVuZXIudHlwZSkge1xuICAgICAgICBjYXNlIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuVkFMVUVfQ0hBTkdFRDpcbiAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHVuaXQ6IHRoaXMuZGlzdGFuY2UudW5pdCxcbiAgICAgICAgICAgIHZhbHVlOiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuVU5JVF9DSEFOR0VEOlxuICAgICAgICAgIHRoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuZGlzdGFuY2UudmFsdWUsXG4gICAgICAgICAgICB1bml0OiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFuZ2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVSZXN1bHRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUmVzdWx0cygpIHtcbiAgICAgIF9yZXN1bHRzQWN0aW9uczIuZGVmYXVsdC5jaGFuZ2VSZXN1bHQoe1xuICAgICAgICBxdWFudGl0eTogdGhpcy5xdWFudGl0eSxcbiAgICAgICAgZGlzdGFuY2U6IHRoaXMuZGlzdGFuY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXN1bHRzU3RvcmU7XG59KShfc3RvcmUyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZXN1bHRzU3RvcmU7XG5cbn0se1wiLi4vZGlzdGFuY2UvZGlzdGFuY2UuYWN0aW9ucy5qc1wiOjgsXCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5jbGFzcy5qc1wiOjksXCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzXCI6MTAsXCIuLi9xdWFudGl0eS9xdWFudGl0eS5hY3Rpb25zLmpzXCI6MTYsXCIuLi9xdWFudGl0eS9xdWFudGl0eS5jbGFzcy5qc1wiOjE3LFwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuZGlzcGF0Y2hlci5qc1wiOjE4LFwiLi4vdG9vbHMvc3RvcmUuanNcIjoyOSxcIi4vcmVzdWx0cy5hY3Rpb25zLmpzXCI6MjV9XSwyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRGlzcGF0Y2hlciA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpc3BhdGNoZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpc3BhdGNoZXIpO1xuXG4gICAgdGhpcy5fbGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERpc3BhdGNoZXIsIFt7XG4gICAga2V5OiBcImRpc3BhdGNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoKG9iaikge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcihvYmopO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlZ2lzdGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBTeW1ib2woKTtcblxuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNldChsaXN0ZW5lciwgY2FsbGJhY2spO1xuXG4gICAgICByZXR1cm4gbGlzdGVuZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVucmVnaXN0ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlcihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXNwYXRjaGVyO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGlzcGF0Y2hlcjtcblxufSx7fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFN0b3JlID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0b3JlKTtcblxuICAgIHRoaXMuX2xpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdG9yZSwgW3tcbiAgICBrZXk6IFwiY2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZSgpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gbGlzdGVuZXIoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkNoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZShjYWxsYmFjaykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gU3ltYm9sKCk7XG5cbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zZXQobGlzdGVuZXIsIGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnJlZ2lzdGVyQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJDaGFuZ2UobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RvcmU7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTdG9yZTtcblxufSx7fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmluZUNvbnN0UHJvcGVydHkgPSBkZWZpbmVDb25zdFByb3BlcnR5O1xuZnVuY3Rpb24gZGVmaW5lQ29uc3RQcm9wZXJ0eShvYmosIHByb3AsIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxufSx7fV19LHt9LFsxNF0pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaRzl0TG1wekwyUnBjM1F2WkdwekwyUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaRzl0TG1wekwyUnBjM1F2WkdwekwyUnFjMlo1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJSdmJTNXFjeTlrYVhOMEwyUnFjeTltYVc1a0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyUnZiUzVxY3k5a2FYTjBMMlJxY3k5dFlXNXBjSFZzWVhScGIyNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaRzl0TG1wekwyUnBjM1F2WkdwekwzTjBlV3hsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5a2IyMHVhbk12WkdsemRDOXBibVJsZUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5a2IyMHVhbk12WkdsemRDOTFkR2xzTDJoMGJXd3Vhbk1pTENKd2RXSnNhV012YzNKakwyUnBjM1JoYm1ObEwyUnBjM1JoYm1ObExtRmpkR2x2Ym5NdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDJScGMzUmhibU5sTDJScGMzUmhibU5sTG1Oc1lYTnpMbXB6SWl3aWNIVmliR2xqTDNOeVl5OWthWE4wWVc1alpTOWthWE4wWVc1alpTNWthWE53WVhSamFHVnlMbXB6SWl3aWNIVmliR2xqTDNOeVl5OWthWE4wWVc1alpTOWthWE4wWVc1alpTNXFjeUlzSW5CMVlteHBZeTl6Y21NdlpHbHpkR0Z1WTJVdlpHbHpkR0Z1WTJVdWMzUnZjbVV1YW5NaUxDSndkV0pzYVdNdmMzSmpMMmhsWVdSbGNpOW9aV0ZrWlhJdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDJsdVpHVjRMbXB6SWl3aWNIVmliR2xqTDNOeVl5OXBibkIxZEhNdmFXNXdkWFJ6TFdOdmJuUmhhVzVsY2k1cWN5SXNJbkIxWW14cFl5OXpjbU12Y1hWaGJuUnBkSGt2Y1hWaGJuUnBkSGt1WVdOMGFXOXVjeTVxY3lJc0luQjFZbXhwWXk5emNtTXZjWFZoYm5ScGRIa3ZjWFZoYm5ScGRIa3VZMnhoYzNNdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNGMVlXNTBhWFI1TDNGMVlXNTBhWFI1TG1ScGMzQmhkR05vWlhJdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNGMVlXNTBhWFI1TDNGMVlXNTBhWFI1TG1weklpd2ljSFZpYkdsakwzTnlZeTl4ZFdGdWRHbDBlUzl4ZFdGdWRHbDBlUzV6ZEc5eVpTNXFjeUlzSW5CMVlteHBZeTl6Y21NdmNtVnpkV3gwY3k5bWRXVnNMV052Ym5OMWJYQjBhVzl1TDJaMVpXd3RZMjl1YzNWdGNIUnBiMjR1WTJ4aGMzTXVhbk1pTENKd2RXSnNhV012YzNKakwzSmxjM1ZzZEhNdlpuVmxiQzFqYjI1emRXMXdkR2x2Ymk5bWRXVnNMV052Ym5OMWJYQjBhVzl1TG1weklpd2ljSFZpYkdsakwzTnlZeTl5WlhOMWJIUnpMMloxWld3dFkyOXVjM1Z0Y0hScGIyNHZablZsYkMxamIyNXpkVzF3ZEdsdmJpNXpkRzl5WlM1cWN5SXNJbkIxWW14cFl5OXpjbU12Y21WemRXeDBjeTl5WlhOMWJIUnpMV052Ym5SaGFXNWxjaTVxY3lJc0luQjFZbXhwWXk5emNtTXZjbVZ6ZFd4MGN5OXlaWE4xYkhSekxtRmpkR2x2Ym5NdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNKbGMzVnNkSE12Y21WemRXeDBjeTVrYVhOd1lYUmphR1Z5TG1weklpd2ljSFZpYkdsakwzTnlZeTl5WlhOMWJIUnpMM0psYzNWc2RITXVjM1J2Y21VdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNSdmIyeHpMMlJwYzNCaGRHTm9aWEl1YW5NaUxDSndkV0pzYVdNdmMzSmpMM1J2YjJ4ekwzTjBiM0psTG1weklpd2ljSFZpYkdsakwzTnlZeTkwYjI5c2N5OTFkR2xzY3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNMVEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjJSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRlRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkRkRTFCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVNMVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN096czdPenRKUTI1RGNVSXNaVUZCWlR0WFFVRm1MR1ZCUVdVN01FSkJRV1lzWlVGQlpUczdPMlZCUVdZc1pVRkJaVHM3WjBOQlEyWXNTMEZCU3l4RlFVRkZPMEZCUTNoQ0xHMURRVUZ0UWl4UlFVRlJMRU5CUVVNN1FVRkRNVUlzV1VGQlNTeEZRVUZGTEdWQlFXVXNRMEZCUXl4aFFVRmhPMEZCUTI1RExGbEJRVWtzUlVGQlJTeExRVUZMTzA5QlExb3NRMEZCUXl4RFFVRkRPMHRCUTBvN096c3JRa0ZGYVVJc1NVRkJTU3hGUVVGRk8wRkJRM1JDTEcxRFFVRnRRaXhSUVVGUkxFTkJRVU03UVVGRE1VSXNXVUZCU1N4RlFVRkZMR1ZCUVdVc1EwRkJReXhaUVVGWk8wRkJRMnhETEZsQlFVa3NSVUZCUlN4SlFVRkpPMDlCUTFnc1EwRkJReXhEUVVGRE8wdEJRMG83T3p0VFFXSnJRaXhsUVVGbE96czdhMEpCUVdZc1pVRkJaVHM3UVVGblFuQkRMRmRCYkVKUkxHMUNRVUZ0UWl4RlFXdENVQ3hsUVVGbExFVkJRVVVzWlVGQlpTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRhRVVzVjBGdVFsRXNiVUpCUVcxQ0xFVkJiVUpRTEdWQlFXVXNSVUZCUlN4alFVRmpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdPenM3T3pzN096czdPenRKUTNCQ01VTXNVVUZCVVR0QlFVTXpRaXhYUVVSdFFpeFJRVUZSTEU5QlEwODdlVUpCUVhKQ0xFbEJRVWs3VVVGQlNpeEpRVUZKTERaQ1FVRkRMRWxCUVVrN01FSkJRVVVzUzBGQlN6dFJRVUZNTEV0QlFVc3NPRUpCUVVNc1EwRkJRenM3TUVKQlJGb3NVVUZCVVRzN1FVRkZla0lzVVVGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRha0lzVVVGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1IwRkRjRUk3TzJWQlNtdENMRkZCUVZFN096WkNRVTFzUWl4TFFVRkxMRVZCUVVVN1FVRkRaQ3hWUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVNNVFqczdPMU5CVW10Q0xGRkJRVkU3T3p0clFrRkJVaXhSUVVGUk96czdPenM3T3pzN096czdPenM3YTBKRFJXUXNNRUpCUVdkQ096czdPenM3T3pzN08xRkRjVUptTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096czdPenM3T3pzN096czdRVUZzUWpGQ0xFbEJRVWtzVTBGQlV5eEhRVUZITzBGQlEyUXNUVUZCU1N4eFEwRkxTRHREUVVOR0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4VlFVRlZMRWRCUVVjN1FVRkRaaXhaUVVGVkxFVkJRVVVzU1VGQlNUdEJRVU5vUWl4WFFVRlRMRVZCUVVVc1NVRkJTVHRCUVVObUxGRkJRVTBzUlVGQlJTeEpRVUZKTzBGQlExb3NUMEZCU3l4RlFVRkZMRWxCUVVrN1EwRkRXaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NZVUZCWVN4WlFVRkJMRU5CUVVNN08wRkJSVmdzVTBGQlV5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTNKRExGbEJRVlVzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEZWtRc1pVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlF6RkNMRzlDUVVGclFpeEZRVUZGTEVOQlFVTTdPMEZCUlhKQ0xHVkJRV0VzUjBGQlJ5dzJRa0ZCYlVJc1EwRkJRenRCUVVOd1F5eGxRVUZoTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZjN1FVRkRhRU1zWlVGQlZ5eERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE1VTXNRMEZCUXl4RFFVRkRPenRCUVVWSUxEUkNRVUZuUWl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGFrTXNaVUZCWVN4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTTdRMEZEY0VNN08wRkJSVVFzVTBGQlV5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNwQ0xGbEJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJRenREUVVOdVF6czdRVUZGUkN4VFFVRlRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGFrTXNXVUZCVlN4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRGJrTXNXVUZCVlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzBGQlEzSkZMRmxCUVZVc1EwRkJReXhMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0RFFVTndSVHM3UVVGRlJDeFRRVUZUTEd0Q1FVRnJRaXhIUVVGSE8wRkJRelZDTEZsQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZNc1MwRkJTeXhGUVVGRk8wRkJRekZFTERoQ1FVRm5RaXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRIUVVOcVJDeERRVUZETEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VNM1EyOUNMR0ZCUVdFN1dVRkJZaXhoUVVGaE96dEJRVU5vUXl4WFFVUnRRaXhoUVVGaExFZEJRMnhDT3pCQ1FVUkxMR0ZCUVdFN08zVkZRVUZpTEdGQlFXRTdPMEZCU1RsQ0xGVkJRVXNzVVVGQlVTeEhRVUZITERSQ1FVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVZxUXl4VlFVRkxMRkZCUVZFc1IwRkJSeXcyUWtGQmJVSXNVVUZCVVN4RFFVRkRMRlZCUVVNc1VVRkJVU3hGUVVGTE8wRkJRM2hFTEdOQlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrN1FVRkRjRUlzWVVGQlN5d3dRa0ZCWjBJc1lVRkJZVHRCUVVOb1F5eG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNaMEpCUVVrc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eEpRVUZKTzBGQlEzaENMR2xDUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY2tJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PenRCUVVGQkxFRkJSVklzWVVGQlN5d3dRa0ZCWjBJc1dVRkJXVHRCUVVNdlFpeG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNhVUpCUVVzc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eExRVUZMTzBGQlF6RkNMR2RDUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY0VJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PMEZCUVVFc1QwRkRVRHM3UVVGRlJDeFpRVUZMTEUxQlFVMHNSVUZCUlN4RFFVRkRPMHRCUTJZc1EwRkJReXhEUVVGRE96dEhRVU5LT3p0bFFUTkNhMElzWVVGQllUczdlVU5CTmtKWU8wRkJRMjVDTEcxRFFVRnRRaXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUXpsRE96czdVMEV2UW10Q0xHRkJRV0U3T3p0clFrRkJZaXhoUVVGaE96czdPenM3T3pzN08xRkRTV3hDTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096czdPMEZCVWpGQ0xFbEJRVWtzVTBGQlV5eEhRVUZITzBGQlEyUXNUVUZCU1N4eFEwRkpTRHREUVVOR0xFTkJRVU03TzBGQlJVc3NVMEZCVXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRM0pETEZsQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBOQlEyNURPenM3T3pzN096czdPenRKUTFaWExFMUJRVTA3T3pzN1NVRkRUaXhsUVVGbE96czdPMGxCUTJZc1owSkJRV2RDT3pzN096czdRVUZGTlVJc1NVRkJTU3huUWtGQlowSXNSMEZCUnl4dFFrRkJTU3hsUVVGbExFTkJRVU1zUTBGQlF6dEJRVU0xUXl4SlFVRkpMR2RDUVVGblFpeEhRVUZITEcxQ1FVRkpMSGxDUVVGNVFpeERRVUZETEVOQlFVTTdRVUZEZEVRc1NVRkJTU3hwUWtGQmFVSXNSMEZCUnl4dFFrRkJTU3d3UWtGQk1FSXNRMEZCUXl4RFFVRkRPenRCUVVWNFJDeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdRVUZEY0VNc1pVRkJaU3hEUVVGRExGVkJRVlVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8wRkJRemRETEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE96czdPenM3T3pzN08xRkRVeTlDTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096dEpRWEJDWkN4UlFVRlJPenM3TzBsQlExSXNVVUZCVVRzN096czdPenM3UVVGRmNFSXNTVUZCU1N4VFFVRlRMRWRCUVVjN1FVRkRaQ3hOUVVGSkxIRkRRVTFJTzBOQlEwWXNRMEZCUXpzN1FVRkZSaXhKUVVGSkxGVkJRVlVzUjBGQlJ6dEJRVU5tTEZsQlFWVXNSVUZCUlN4SlFVRkpPMEZCUTJoQ0xHbENRVUZsTEVWQlFVVXNTVUZCU1R0QlFVTnlRaXhuUWtGQll5eEZRVUZGTEVsQlFVazdRVUZEY0VJc1owSkJRV01zUlVGQlJTeEpRVUZKTzBOQlEzSkNMRU5CUVVNN08wRkJSVXNzVTBGQlV5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTNKRExGbEJRVlVzUTBGQlF5eGxRVUZsTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlM5RUxHVkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1FVRkZNVUlzVlVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03UVVGREwwTXNWVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdRMEZEYUVRN08wRkJSVVFzVTBGQlV5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTJwRExGbEJRVlVzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUTI1RExGbEJRVlVzUTBGQlF5eGpRVUZqTEVkQlFVY3NWVUZCVlN4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRCUVVNdlJTeFpRVUZWTEVOQlFVTXNZMEZCWXl4SFFVRkhMRlZCUVZVc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03UTBGRGFFWTdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUXk5Q2IwSXNaVUZCWlR0WFFVRm1MR1ZCUVdVN01FSkJRV1lzWlVGQlpUczdPMlZCUVdZc1pVRkJaVHM3WjBOQlEyWXNTMEZCU3l4RlFVRkZPMEZCUTNoQ0xHMURRVUZ0UWl4UlFVRlJMRU5CUVVNN1FVRkRNVUlzV1VGQlNTeEZRVUZGTEdWQlFXVXNRMEZCUXl4aFFVRmhPMEZCUTI1RExGbEJRVWtzUlVGQlJTeExRVUZMTzA5QlExb3NRMEZCUXl4RFFVRkRPMHRCUTBvN096c3JRa0ZGYVVJc1NVRkJTU3hGUVVGRk8wRkJRM1JDTEcxRFFVRnRRaXhSUVVGUkxFTkJRVU03UVVGRE1VSXNXVUZCU1N4RlFVRkZMR1ZCUVdVc1EwRkJReXhaUVVGWk8wRkJRMnhETEZsQlFVa3NSVUZCUlN4SlFVRkpPMDlCUTFnc1EwRkJReXhEUVVGRE8wdEJRMG83T3p0VFFXSnJRaXhsUVVGbE96czdhMEpCUVdZc1pVRkJaVHM3UVVGblFuQkRMRmRCYkVKUkxHMUNRVUZ0UWl4RlFXdENVQ3hsUVVGbExFVkJRVVVzWlVGQlpTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRhRVVzVjBGdVFsRXNiVUpCUVcxQ0xFVkJiVUpRTEdWQlFXVXNSVUZCUlN4alFVRmpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdPenM3T3pzN096czdPenRKUTNCQ01VTXNVVUZCVVR0QlFVTXpRaXhYUVVSdFFpeFJRVUZSTEU5QlEwMDdlVUpCUVhCQ0xFbEJRVWs3VVVGQlNpeEpRVUZKTERaQ1FVRkRMRWRCUVVjN01FSkJRVVVzUzBGQlN6dFJRVUZNTEV0QlFVc3NPRUpCUVVNc1EwRkJRenM3TUVKQlJGZ3NVVUZCVVRzN1FVRkZla0lzVVVGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRha0lzVVVGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1IwRkRjRUk3TzJWQlNtdENMRkZCUVZFN096WkNRVTFzUWl4TFFVRkxMRVZCUVVVN1FVRkRaQ3hWUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVNNVFqczdPMU5CVW10Q0xGRkJRVkU3T3p0clFrRkJVaXhSUVVGUk96czdPenM3T3pzN096czdPenM3YTBKRFJXUXNNRUpCUVdkQ096czdPenM3T3pzN08xRkRjVUptTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096czdPenM3T3pzN096czdRVUZzUWpGQ0xFbEJRVWtzVTBGQlV5eEhRVUZITzBGQlEyUXNUVUZCU1N4eFEwRkxTRHREUVVOR0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4VlFVRlZMRWRCUVVjN1FVRkRaaXhaUVVGVkxFVkJRVVVzU1VGQlNUdEJRVU5vUWl4WFFVRlRMRVZCUVVVc1NVRkJTVHRCUVVObUxGRkJRVTBzUlVGQlJTeEpRVUZKTzBGQlExb3NUMEZCU3l4RlFVRkZMRWxCUVVrN1EwRkRXaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NZVUZCWVN4WlFVRkJMRU5CUVVNN08wRkJSVmdzVTBGQlV5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTNKRExGbEJRVlVzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEZWtRc1pVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlF6RkNMRzlDUVVGclFpeEZRVUZGTEVOQlFVTTdPMEZCUlhKQ0xHVkJRV0VzUjBGQlJ5dzJRa0ZCYlVJc1EwRkJRenRCUVVOd1F5eGxRVUZoTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZjN1FVRkRhRU1zWlVGQlZ5eERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE1VTXNRMEZCUXl4RFFVRkRPenRCUVVWSUxEUkNRVUZuUWl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFFTXNaVUZCWVN4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTTdRMEZEY0VNN08wRkJSVVFzVTBGQlV5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNwQ0xGbEJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJRenREUVVOdVF6czdRVUZGUkN4VFFVRlRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGFrTXNXVUZCVlN4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRGJrTXNXVUZCVlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzBGQlEzSkZMRmxCUVZVc1EwRkJReXhMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0RFFVTndSVHM3UVVGRlJDeFRRVUZUTEd0Q1FVRnJRaXhIUVVGSE8wRkJRelZDTEZsQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZNc1MwRkJTeXhGUVVGRk8wRkJRekZFTERoQ1FVRm5RaXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRIUVVOcVJDeERRVUZETEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VNM1EyOUNMR0ZCUVdFN1dVRkJZaXhoUVVGaE96dEJRVU5vUXl4WFFVUnRRaXhoUVVGaExFZEJRMnhDT3pCQ1FVUkxMR0ZCUVdFN08zVkZRVUZpTEdGQlFXRTdPMEZCU1RsQ0xGVkJRVXNzVVVGQlVTeEhRVUZITERSQ1FVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVZxUXl4VlFVRkxMRkZCUVZFc1IwRkJSeXcyUWtGQmJVSXNVVUZCVVN4RFFVRkRMRlZCUVVNc1VVRkJVU3hGUVVGTE8wRkJRM2hFTEdOQlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrN1FVRkRjRUlzWVVGQlN5d3dRa0ZCWjBJc1lVRkJZVHRCUVVOb1F5eG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNaMEpCUVVrc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eEpRVUZKTzBGQlEzaENMR2xDUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY2tJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PenRCUVVGQkxFRkJSVklzWVVGQlN5d3dRa0ZCWjBJc1dVRkJXVHRCUVVNdlFpeG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNhVUpCUVVzc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eExRVUZMTzBGQlF6RkNMR2RDUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY0VJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PMEZCUVVFc1QwRkRVRHM3UVVGRlJDeFpRVUZMTEUxQlFVMHNSVUZCUlN4RFFVRkRPMHRCUTJZc1EwRkJReXhEUVVGRE96dEhRVU5LT3p0bFFUTkNhMElzWVVGQllUczdlVU5CTmtKWU8wRkJRMjVDTEcxRFFVRnRRaXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUXpsRE96czdVMEV2UW10Q0xHRkJRV0U3T3p0clFrRkJZaXhoUVVGaE96czdPenM3T3pzN096czdPMGxEVG1Jc1owSkJRV2RDTzFkQlFXaENMR2RDUVVGblFqc3dRa0ZCYUVJc1owSkJRV2RDT3pzN1pVRkJhRUlzWjBKQlFXZENPenNyUWtGRFN6c3JRa0ZCTTBJc1VVRkJVVHRWUVVGU0xGRkJRVkVzYVVOQlFVTXNSVUZCUlRzclFrRkJSU3hSUVVGUk8xVkJRVklzVVVGQlVTeHBRMEZCUXl4RlFVRkZPenRCUVVOdVF5eFZRVUZKTEUxQlFVMHNSMEZCUnp0QlFVTllMR0ZCUVVzc1JVRkJSU3hEUVVGRE8wRkJRMUlzV1VGQlNTeEZRVUZMTEZGQlFWRXNRMEZCUXl4SlFVRkpMRk5CUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzUVVGQlJUdFBRVU14UXl4RFFVRkRPenRCUVVWR0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU4wUXl4bFFVRlBMRTFCUVUwc1EwRkJRenRQUVVObU96dEJRVVZFTEZsQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRPenRCUVVVdlF5eFpRVUZOTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU40UkN4aFFVRlBMRTFCUVUwc1EwRkJRenRMUVVObU96czdVMEZtYTBJc1owSkJRV2RDT3pzN2EwSkJRV2hDTEdkQ1FVRm5RanM3T3pzN096czdPenRSUTNGQ2NrSXNWVUZCVlN4SFFVRldMRlZCUVZVN096czdPenM3T3pzN096czdPMEZCYWtJeFFpeEpRVUZKTEZOQlFWTXNSMEZCUnp0QlFVTmtMRTFCUVVrc2NVTkJTVWc3UTBGRFJpeERRVUZET3p0QlFVVkdMRWxCUVVrc1ZVRkJWU3hIUVVGSE8wRkJRMllzV1VGQlZTeEZRVUZGTEVsQlFVazdRVUZEYUVJc2EwSkJRV2RDTEVWQlFVVXNTVUZCU1R0QlFVTjBRaXhYUVVGVExFVkJRVVVzU1VGQlNUdEJRVU5tTEZsQlFWVXNSVUZCUlN4SlFVRkpPME5CUTJwQ0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4dlFrRkJiMElzV1VGQlFTeERRVUZET3p0QlFVVnNRaXhUUVVGVExGVkJRVlVzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEY2tNc1dVRkJWU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJoRkxHVkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1FVRkZNVUlzYzBKQlFXOUNMRWRCUVVjc2IwTkJRVEJDTEVOQlFVTTdPMEZCUld4RUxITkNRVUZ2UWl4RFFVRkRMRkZCUVZFc1EwRkJReXhaUVVGWE8wRkJRM1pETERCQ1FVRnpRaXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wZEJRM1JFTEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3h6UWtGQmIwSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenREUVVNdlFqczdRVUZGUkN4VFFVRlRMSE5DUVVGelFpeERRVUZETEU5QlFVOHNSVUZCUlR0QlFVTjJReXhaUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRemxETEZsQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTTdRMEZEYWtRN08wRkJSVVFzVTBGQlV5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTJwRExGbEJRVlVzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUTI1RExGbEJRVlVzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOd1JTeFpRVUZWTEVOQlFVTXNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03UTBGRE1VVTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlEzQkRiMElzYjBKQlFXOUNPMWxCUVhCQ0xHOUNRVUZ2UWpzN1FVRkRka01zVjBGRWJVSXNiMEpCUVc5Q0xFZEJRM3BDT3pCQ1FVUkxMRzlDUVVGdlFqczdkVVZCUVhCQ0xHOUNRVUZ2UWpzN1FVRkpja01zVlVGQlN5eFBRVUZQTEVkQlFVY3NLMEpCUVdsQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXpzN1FVRkZla01zWjBOQlFXbENMRkZCUVZFc1EwRkJReXhWUVVGRExGRkJRVkVzUlVGQlN6dEJRVU4wUXl4alFVRlBMRkZCUVZFc1EwRkJReXhKUVVGSk8wRkJRM0JDTEdGQlFVc3NlVUpCUVRKQ0xHTkJRV003UVVGRE5VTXNaMEpCUVVzc1QwRkJUeXhIUVVGSExDdENRVUZwUWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzQkVMR2RDUVVGTExFMUJRVTBzUTBGQlF5eE5RVUZMTEU5QlFVOHNRMEZCUXl4RFFVRkRPenRCUVVVeFFpeG5Ra0ZCVFR0QlFVRkJMRTlCUTFBN1MwRkRSaXhEUVVGRExFTkJRVU03TzBkQlEwbzdPMU5CWm10Q0xHOUNRVUZ2UWpzN08ydENRVUZ3UWl4dlFrRkJiMEk3T3pzN096czdPenM3VVVOaGVrSXNWVUZCVlN4SFFVRldMRlZCUVZVN096czdPenM3TzBsQmJrSmtMR05CUVdNN096czdPenM3T3pzN096dEJRVWN4UWl4SlFVRkpMRmxCUVZrc1dVRkJRU3hEUVVGRE96dEJRVVZxUWl4SlFVRkpMRk5CUVZNc1IwRkJSenRCUVVOa0xFMUJRVWtzY1VOQlNVZzdRMEZEUml4RFFVRkRPenRCUVVWR0xFbEJRVWtzVlVGQlZTeEhRVUZITzBGQlEyWXNXVUZCVlN4RlFVRkZMRWxCUVVrN1FVRkRhRUlzYlVKQlFXbENMRVZCUVVVc1NVRkJTVHRCUVVOMlFpeHBRa0ZCWlN4RlFVRkZMRWxCUVVrN1EwRkRkRUlzUTBGQlF6czdRVUZGU3l4VFFVRlRMRlZCUVZVc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGNrTXNXVUZCVlN4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEycEZMR1ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZGTVVJc1kwRkJXU3hIUVVGSExEUkNRVUZyUWl4RFFVRkRPenRCUVVWc1F5eG5Ra0ZCWXl4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdPMEZCUlhSRUxHTkJRVmtzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0RFFVTTVRanM3UVVGRlJDeFRRVUZUTEdGQlFXRXNRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRha01zV1VGQlZTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkRia01zV1VGQlZTeERRVUZETEdWQlFXVXNSMEZCUnl4VlFVRlZMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVOQlFVTTdRMEZETTBZN096czdPenM3T3pzN096czdPenM3T3pzN096dEpReTlDYjBJc1kwRkJZenRYUVVGa0xHTkJRV003TUVKQlFXUXNZMEZCWXpzN08yVkJRV1FzWTBGQll6czdhVU5CUTJJc1MwRkJTeXhGUVVGRk8wRkJRM3BDTEd0RFFVRnJRaXhSUVVGUkxFTkJRVU03UVVGRGVrSXNXVUZCU1N4RlFVRkZMR05CUVdNc1EwRkJReXhqUVVGak8wRkJRMjVETEZsQlFVa3NSVUZCUlN4TFFVRkxPMDlCUTFvc1EwRkJReXhEUVVGRE8wdEJRMG83T3p0VFFVNXJRaXhqUVVGak96czdhMEpCUVdRc1kwRkJZenM3UVVGVGJrTXNWMEZZVVN4dFFrRkJiVUlzUlVGWFVDeGpRVUZqTEVWQlFVVXNaMEpCUVdkQ0xFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXpzN096czdPenM3T3pzN096czdPMnRDUTFacVJDd3dRa0ZCWjBJN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUTFWV0xGbEJRVms3V1VGQldpeFpRVUZaT3p0QlFVTXZRaXhYUVVSdFFpeFpRVUZaTEVkQlEycENPekJDUVVSTExGbEJRVms3TzNWRlFVRmFMRmxCUVZrN08wRkJTVGRDTEZWQlFVc3NVVUZCVVN4SFFVRkhMRFJDUVVGaExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEycERMRlZCUVVzc1VVRkJVU3hIUVVGSExEUkNRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVWcVF5eHBRMEZCYlVJc1VVRkJVU3hEUVVGRExGVkJRVU1zVVVGQlVTeEZRVUZMTzBGQlEzaERMRmxCUVVzc2IwSkJRVzlDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN08wRkJSWEJETEZsQlFVc3NZVUZCWVN4RlFVRkZMRU5CUVVNN1MwRkRkRUlzUTBGQlF5eERRVUZET3p0QlFVVklMR2xEUVVGdFFpeFJRVUZSTEVOQlFVTXNWVUZCUXl4UlFVRlJMRVZCUVVzN1FVRkRlRU1zV1VGQlN5eHZRa0ZCYjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6czdRVUZGY0VNc1dVRkJTeXhoUVVGaExFVkJRVVVzUTBGQlF6dExRVU4wUWl4RFFVRkRMRU5CUVVNN08wZEJRMG83TzJWQmJFSnJRaXhaUVVGWk96dDVRMEZ2UWxZc1VVRkJVU3hGUVVGRk8wRkJRemRDTEdOQlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrN1FVRkRjRUlzWVVGQlN5d3dRa0ZCWjBJc1lVRkJZVHRCUVVOb1F5eGpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRFJDUVVGaE8wRkJRek5DTEdkQ1FVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTzBGQlEzaENMR2xDUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY2tJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PenRCUVVGQkxFRkJSVklzWVVGQlN5d3dRa0ZCWjBJc1dVRkJXVHRCUVVNdlFpeGpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRFJDUVVGaE8wRkJRek5DTEdsQ1FVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTzBGQlF6RkNMR2RDUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY0VJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PMEZCUVVFc1QwRkRVRHM3UVVGRlJDeFZRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1MwRkRaanM3TzNsRFFVVnZRaXhSUVVGUkxFVkJRVVU3UVVGRE4wSXNZMEZCVHl4UlFVRlJMRU5CUVVNc1NVRkJTVHRCUVVOd1FpeGhRVUZMTERCQ1FVRm5RaXhoUVVGaE8wRkJRMmhETEdOQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNaMEpCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVazdRVUZEZUVJc2FVSkJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1R0WFFVTnlRaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NaMEpCUVUwN08wRkJRVUVzUVVGRlVpeGhRVUZMTERCQ1FVRm5RaXhaUVVGWk8wRkJReTlDTEdOQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNhVUpCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVczdRVUZETVVJc1owSkJRVWtzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1R0WFFVTndRaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NaMEpCUVUwN1FVRkJRU3hQUVVOUU96dEJRVVZFTEZWQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRMUVVObU96czdiME5CUldVN1FVRkRaQ3dyUWtGQlpTeFpRVUZaTEVOQlFVTTdRVUZETVVJc1owSkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVR0QlFVTjJRaXhuUWtGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJPMDlCUTNoQ0xFTkJRVU1zUTBGQlF6dExRVU5LT3pzN1UwRnlSV3RDTEZsQlFWazdPenRyUWtGQldpeFpRVUZaT3pzN096czdPenM3T3pzN08wbERXbG9zVlVGQlZUdEJRVU0zUWl4WFFVUnRRaXhWUVVGVkxFZEJRMlk3TUVKQlJFc3NWVUZCVlRzN1FVRkZNMElzVVVGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8wZEJRemRDT3p0bFFVaHJRaXhWUVVGVk96czJRa0ZMY0VJc1IwRkJSeXhGUVVGRk8wRkJRMW9zVlVGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJReXhSUVVGUk8yVkJRVXNzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXp0UFFVRkJMRU5CUVVNc1EwRkJRenRMUVVOMFJEczdPelpDUVVWUkxGRkJRVkVzUlVGQlJUdEJRVU5xUWl4VlFVRkpMRkZCUVZFc1IwRkJSeXhOUVVGTkxFVkJRVVVzUTBGQlF6czdRVUZGZUVJc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE96dEJRVVY0UXl4aFFVRlBMRkZCUVZFc1EwRkJRenRMUVVOcVFqczdPeXRDUVVWVkxGRkJRVkVzUlVGQlJUdEJRVU51UWl4aFFVRlBMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUTNwRE96czdVMEZ1UW10Q0xGVkJRVlU3T3p0clFrRkJWaXhWUVVGVk96czdPenM3T3pzN096czdPMGxEUVZZc1MwRkJTenRCUVVONFFpeFhRVVJ0UWl4TFFVRkxMRWRCUTFZN01FSkJSRXNzUzBGQlN6czdRVUZGZEVJc1VVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGRCUXpkQ096dGxRVWhyUWl4TFFVRkxPenMyUWtGTFpqdEJRVU5RTEZWQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVU1zVVVGQlVUdGxRVUZMTEZGQlFWRXNSVUZCUlR0UFFVRkJMRU5CUVVNc1EwRkJRenRMUVVOdVJEczdPelpDUVVWUkxGRkJRVkVzUlVGQlJUdEJRVU5xUWl4VlFVRkpMRkZCUVZFc1IwRkJSeXhOUVVGTkxFVkJRVVVzUTBGQlF6czdRVUZGZUVJc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE96dEJRVVY0UXl4aFFVRlBMRkZCUVZFc1EwRkJRenRMUVVOcVFqczdPM0ZEUVVWblFpeFJRVUZSTEVWQlFVVTdRVUZEZWtJc1lVRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRMUVVONlF6czdPMU5CYmtKclFpeExRVUZMT3pzN2EwSkJRVXdzUzBGQlN6czdPenM3T3pzN1VVTkJWaXh0UWtGQmJVSXNSMEZCYmtJc2JVSkJRVzFDTzBGQlFUVkNMRk5CUVZNc2JVSkJRVzFDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVU3UVVGRGNFUXNVVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlF5OUNMR05CUVZVc1JVRkJSU3hKUVVGSk8wRkJRMmhDTEZsQlFWRXNSVUZCUlN4TFFVRkxPMEZCUTJZc1owSkJRVmtzUlVGQlJTeExRVUZMTzBGQlEyNUNMRk5CUVVzc1JVRkJSU3hMUVVGTE8wZEJRMklzUTBGQlF5eERRVUZETzBOQlEwb2lMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCbEtIUXNiaXh5S1h0bWRXNWpkR2x2YmlCektHOHNkU2w3YVdZb0lXNWJiMTBwZTJsbUtDRjBXMjlkS1h0MllYSWdZVDEwZVhCbGIyWWdjbVZ4ZFdseVpUMDlYQ0ptZFc1amRHbHZibHdpSmlaeVpYRjFhWEpsTzJsbUtDRjFKaVpoS1hKbGRIVnliaUJoS0c4c0lUQXBPMmxtS0drcGNtVjBkWEp1SUdrb2J5d2hNQ2s3ZG1GeUlHWTlibVYzSUVWeWNtOXlLRndpUTJGdWJtOTBJR1pwYm1RZ2JXOWtkV3hsSUNkY0lpdHZLMXdpSjF3aUtUdDBhSEp2ZHlCbUxtTnZaR1U5WENKTlQwUlZURVZmVGs5VVgwWlBWVTVFWENJc1puMTJZWElnYkQxdVcyOWRQWHRsZUhCdmNuUnpPbnQ5ZlR0MFcyOWRXekJkTG1OaGJHd29iQzVsZUhCdmNuUnpMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnVQWFJiYjExYk1WMWJaVjA3Y21WMGRYSnVJSE1vYmo5dU9tVXBmU3hzTEd3dVpYaHdiM0owY3l4bExIUXNiaXh5S1gxeVpYUjFjbTRnYmx0dlhTNWxlSEJ2Y25SemZYWmhjaUJwUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN1ptOXlLSFpoY2lCdlBUQTdienh5TG14bGJtZDBhRHR2S3lzcGN5aHlXMjlkS1R0eVpYUjFjbTRnYzMwcElpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVhHNTJZWElnWDJoMGJXd2dQU0J5WlhGMWFYSmxLQ2N1TGk5MWRHbHNMMmgwYld3dWFuTW5LVHRjYmx4dWRtRnlJRjlvZEcxc01pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyaDBiV3dwTzF4dVhHNTJZWElnWDIxaGJtbHdkV3hoZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR2YldGdWFYQjFiR0YwYVc5dUxtcHpKeWs3WEc1Y2JuWmhjaUJmWm1sdVpDQTlJSEpsY1hWcGNtVW9KeTR2Wm1sdVpDNXFjeWNwTzF4dVhHNTJZWElnWDNOMGVXeGxjeUE5SUhKbGNYVnBjbVVvSnk0dmMzUjViR1Z6TG1wekp5azdYRzVjYm5aaGNpQnpkSGxzWlhNZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WWGFXeGtZMkZ5WkNoZmMzUjViR1Z6S1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFYybHNaR05oY21Rb2IySnFLU0I3SUdsbUlDaHZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VwSUhzZ2NtVjBkWEp1SUc5aWFqc2dmU0JsYkhObElIc2dkbUZ5SUc1bGQwOWlhaUE5SUh0OU95QnBaaUFvYjJKcUlDRTlJRzUxYkd3cElIc2dabTl5SUNoMllYSWdhMlY1SUdsdUlHOWlhaWtnZXlCcFppQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzlpYWl3Z2EyVjVLU2tnYm1WM1QySnFXMnRsZVYwZ1BTQnZZbXBiYTJWNVhUc2dmU0I5SUc1bGQwOWlhaTVrWldaaGRXeDBJRDBnYjJKcU95QnlaWFIxY200Z2JtVjNUMkpxT3lCOUlIMWNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wm5WdVkzUnBiMjRnWkdwektIUmxiWEJzWVhSbEtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2RHVnRjR3hoZEdVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZ3dMQ0JmWm1sdVpDNW1hVzVrS1NoMFpXMXdiR0YwWlNrN1hHNGdJSDBnWld4elpTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDBaVzF3YkdGMFpTa3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQmZiR1Z1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUN3Z2MzVmljM1J6SUQwZ1FYSnlZWGtvWDJ4bGJpQStJREVnUHlCZmJHVnVJQzBnTVNBNklEQXBMQ0JmYTJWNUlEMGdNVHNnWDJ0bGVTQThJRjlzWlc0N0lGOXJaWGtyS3lrZ2UxeHVJQ0FnSUNBZ2MzVmljM1J6VzE5clpYa2dMU0F4WFNBOUlHRnlaM1Z0Wlc1MGMxdGZhMlY1WFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdYMmgwYld3eUxtUmxabUYxYkhRdVlYQndiSGtvZFc1a1pXWnBibVZrTENCYmRHVnRjR3hoZEdWZExtTnZibU5oZENoemRXSnpkSE1wS1R0Y2JpQWdmVnh1ZlZ4dVhHNWthbk11WTNKbFlYUmxJRDBnWDIxaGJtbHdkV3hoZEdsdmJpNWpjbVZoZEdVN1hHNWthbk11WTNOeklEMGdjM1I1YkdWekxtTnpjenRjYm1ScWN5NWhaR1JEYkdGemN5QTlJSE4wZVd4bGN5NWhaR1JEYkdGemN6dGNibVJxY3k1eVpXMXZkbVZEYkdGemN5QTlJSE4wZVd4bGN5NXlaVzF2ZG1WRGJHRnpjenRjYm1ScWN5NTBiMmRuYkdWRGJHRnpjeUE5SUhOMGVXeGxjeTUwYjJkbmJHVkRiR0Z6Y3p0Y2JtUnFjeTVqYjI1MFlXbHVjME5zWVhOeklEMGdjM1I1YkdWekxtTnZiblJoYVc1elEyeGhjM003WEc1a2FuTXVabWx1WkNBOUlGOW1hVzVrTG1acGJtUTdYRzVrYW5NdVptbHVaRUZzYkNBOUlGOW1hVzVrTG1acGJtUkJiR3c3WEc1a2FuTXVjbVZ0YjNabElEMGdYMjFoYm1sd2RXeGhkR2x2Ymk1eVpXMXZkbVU3WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHUnFjenNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JrYW5ObWVUdGNibHh1ZG1GeUlGOWtJRDBnY21WeGRXbHlaU2duTGk5a0xtcHpKeWs3WEc1Y2JuWmhjaUJmWkRJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5a0tUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wm5WdVkzUnBiMjRnWkdwelpua29ibTlrWlNrZ2UxeHVJQ0JwWmlBb0lXNXZaR1VwSUhKbGRIVnliaUJ1ZFd4c08xeHVYRzRnSUc1dlpHVXVabWx1WkNBOUlHWjFibU4wYVc5dUlDaHpkSEpwYm1jcElIdGNiaUFnSUNCeVpYUjFjbTRnWDJReUxtUmxabUYxYkhRdVptbHVaQ2h6ZEhKcGJtY3NJRzV2WkdVcE8xeHVJQ0I5TzF4dUlDQnViMlJsTG1acGJtUkJiR3dnUFNCbWRXNWpkR2x2YmlBb2MzUnlhVzVuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTG1acGJtUkJiR3dvYzNSeWFXNW5MQ0J1YjJSbEtUdGNiaUFnZlR0Y2JpQWdibTlrWlM1amNtVmhkR1VnUFNCbWRXNWpkR2x2YmlBb2MzUnlhVzVuS1NCN1hHNGdJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQmZaREl1WkdWbVlYVnNkQzVqY21WaGRHVW9jM1J5YVc1bktUdGNibHh1SUNBZ0lHNXZaR1V1WVhCd1pXNWtRMmhwYkdRb1pXeGxiV1Z1ZENrN1hHNWNiaUFnSUNCeVpYUjFjbTRnWld4bGJXVnVkRHRjYmlBZ2ZUdGNibHh1SUNCdWIyUmxMbU56Y3lBOUlHWjFibU4wYVc5dUlDaGpjM05UZEhsc1pYTXBJSHRjYmlBZ0lDQnlaWFIxY200Z1gyUXlMbVJsWm1GMWJIUXVZM056S0c1dlpHVXNJR056YzFOMGVXeGxjeWs3WEc0Z0lIMDdYRzRnSUc1dlpHVXVZV1JrUTJ4aGMzTWdQU0JtZFc1amRHbHZiaUFvWTJ4aGMzTk1hWE4wS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTG1Ga1pFTnNZWE56S0c1dlpHVXNJR05zWVhOelRHbHpkQ2s3WEc0Z0lIMDdYRzRnSUc1dlpHVXVjbVZ0YjNabFEyeGhjM01nUFNCbWRXNWpkR2x2YmlBb1kyeGhjM05VYjFKbGJXOTJaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmZaREl1WkdWbVlYVnNkQzV5WlcxdmRtVkRiR0Z6Y3lodWIyUmxMQ0JqYkdGemMxUnZVbVZ0YjNabEtUdGNiaUFnZlR0Y2JpQWdibTlrWlM1MGIyZG5iR1ZEYkdGemN5QTlJR1oxYm1OMGFXOXVJQ2hqYkdGemMwNWhiV1VzSUdadmNtTmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOWtNaTVrWldaaGRXeDBMblJ2WjJkc1pVTnNZWE56S0c1dlpHVXNJR05zWVhOelRtRnRaU3dnWm05eVkyVXBPMXh1SUNCOU8xeHVJQ0J1YjJSbExtTnZiblJoYVc1elEyeGhjM01nUFNCbWRXNWpkR2x2YmlBb1kyeGhjM05PWVcxbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUY5a01pNWtaV1poZFd4MExtTnZiblJoYVc1elEyeGhjM01vYm05a1pTd2dZMnhoYzNOT1lXMWxLVHRjYmlBZ2ZUdGNiaUFnYm05a1pTNXlaVzF2ZG1VZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUc1dlpHVlViMUpsYlc5MlpTQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQRDBnTUNCOGZDQmhjbWQxYldWdWRITmJNRjBnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JRzV2WkdVZ09pQmhjbWQxYldWdWRITmJNRjA3WEc1Y2JpQWdJQ0IyWVhJZ2IyeGtUbTlrWlNBOUlGOWtNaTVrWldaaGRXeDBMbkpsYlc5MlpTaHViMlJsVkc5U1pXMXZkbVVwTzF4dUlDQWdJRzV2WkdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnY21WMGRYSnVJRzlzWkU1dlpHVTdYRzRnSUgwN1hHNWNiaUFnY21WMGRYSnVJRzV2WkdVN1hHNTlJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NW1hVzVrSUQwZ1ptbHVaRHRjYm1WNGNHOXlkSE11Wm1sdVpFRnNiQ0E5SUdacGJtUkJiR3c3WEc1Y2JuWmhjaUJmWkdwelpua2dQU0J5WlhGMWFYSmxLQ2N1TDJScWMyWjVKeWs3WEc1Y2JuWmhjaUJmWkdwelpua3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZaR3B6Wm5rcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVtZFc1amRHbHZiaUJtYVc1a0tITjBjbWx1WnlrZ2UxeHVJQ0IyWVhJZ2NtOXZkRVZzWlcxbGJuUWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHc5SURFZ2ZId2dZWEpuZFcxbGJuUnpXekZkSUQwOVBTQjFibVJsWm1sdVpXUWdQeUJrYjJOMWJXVnVkQ0E2SUdGeVozVnRaVzUwYzFzeFhUdGNibHh1SUNCeVpYUjFjbTRnS0RBc0lGOWthbk5tZVRJdVpHVm1ZWFZzZENrb2NtOXZkRVZzWlcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loemRISnBibWNwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWm1sdVpFRnNiQ2h6ZEhKcGJtY3BJSHRjYmlBZ2RtRnlJSEp2YjNSRmJHVnRaVzUwSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBOFBTQXhJSHg4SUdGeVozVnRaVzUwYzFzeFhTQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z1pHOWpkVzFsYm5RZ09pQmhjbWQxYldWdWRITmJNVjA3WEc1Y2JpQWdjbVYwZFhKdUlISnZiM1JGYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29jM1J5YVc1bktUdGNibjBpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVsZUhCdmNuUnpMbU55WldGMFpTQTlJR055WldGMFpUdGNibVY0Y0c5eWRITXVjbVZ0YjNabElEMGdjbVZ0YjNabE8xeHVYRzUyWVhJZ1gyUnFjMlo1SUQwZ2NtVnhkV2x5WlNnbkxpOWthbk5tZVM1cWN5Y3BPMXh1WEc1MllYSWdYMlJxYzJaNU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyUnFjMlo1S1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVablZ1WTNScGIyNGdZM0psWVhSbEtITjBjbWx1WnlrZ2UxeHVJQ0IyWVhJZ1puSmhaMjFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRWIyTjFiV1Z1ZEVaeVlXZHRaVzUwS0NrN1hHNGdJSFpoY2lCbGJHVnRaVzUwSUQwZ1puSmhaMjFsYm5RdVlYQndaVzVrUTJocGJHUW9aRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWtwTzF4dVhHNGdJR1ZzWlcxbGJuUXVhVzV1WlhKSVZFMU1JRDBnYzNSeWFXNW5MblJ5YVcwb0tUdGNibHh1SUNCcFppQW9aV3hsYldWdWRDNWphR2xzWkU1dlpHVnpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUdWc1pXMWxiblFnUFNCbGJHVnRaVzUwTG14aGMzUkRhR2xzWkR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlBb01Dd2dYMlJxYzJaNU1pNWtaV1poZFd4MEtTaGxiR1Z0Wlc1MExtTnNiMjVsVG05a1pTaDBjblZsS1NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJXOTJaU2h1YjJSbEtTQjdYRzRnSUdsbUlDaHViMlJsTG5CaGNtVnVkRTV2WkdVcElIdGNiaUFnSUNCeVpYUjFjbTRnYm05a1pTNXdZWEpsYm5ST2IyUmxMbkpsYlc5MlpVTm9hV3hrS0c1dlpHVXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzUxYkd3N1hHNTlJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWpjM01nUFNCamMzTTdYRzVsZUhCdmNuUnpMbUZrWkVOc1lYTnpJRDBnWVdSa1EyeGhjM003WEc1bGVIQnZjblJ6TG1OdmJuUmhhVzV6UTJ4aGMzTWdQU0JqYjI1MFlXbHVjME5zWVhOek8xeHVaWGh3YjNKMGN5NXlaVzF2ZG1WRGJHRnpjeUE5SUhKbGJXOTJaVU5zWVhOek8xeHVaWGh3YjNKMGN5NTBiMmRuYkdWRGJHRnpjeUE5SUhSdloyZHNaVU5zWVhOek8xeHVYRzUyWVhJZ1gyUnFjMlo1SUQwZ2NtVnhkV2x5WlNnbkxpOWthbk5tZVNjcE8xeHVYRzUyWVhJZ1gyUnFjMlo1TWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJScWMyWjVLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dUx5OGdSV1JuWlNBdklFbEZYRzUyWVhJZ1RWTWdQU0FuYlhNbk8xeHVMeThnUTJoeWIyMWxJQzhnVTJGbVlYSnBYRzUyWVhJZ1YwVkNTMGxVSUQwZ0ozZGxZbXRwZENjN1hHNHZMeUJHYVhKbFptOTRYRzUyWVhJZ1RVOWFJRDBnSjIxdmVpYzdYRzR2THlCUGNHVnlZVnh1ZG1GeUlFOGdQU0FuYnljN1hHNTJZWElnV0ZZZ1BTQW5lSFluTzF4dUx5OGdTMFJGWEc1MllYSWdTMGhVVFV3Z1BTQW5hMmgwYld3bk8xeHVYRzUyWVhJZ1VGSkZSa2xZU1VWVElEMGdXMDFUTENCWFJVSkxTVlFzSUUxUFdpd2dUeXdnV0ZZc0lFdElWRTFNWFR0Y2JseHVkbUZ5SUVOVFUxOVFVa1ZHU1ZoRlJDQTlJSHRjYmlBZ1pteHZZWFE2SUNkamMzTkdiRzloZENkY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUdOemN5aHViMlJsTENCamMzTlRkSGxzWlhNcElIdGNiaUFnYVdZZ0tDRnViMlJsSUh4OElHNXZaR1V1Ym05a1pWUjVjR1VnUFQwOUlEZ2dmSHdnYm05a1pTNXViMlJsVkhsd1pTQTlQVDBnTXlCOGZDQWhibTlrWlM1emRIbHNaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdOemMxTjBlV3hsY3lrZ2UxeHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaGpjM05UZEhsc1pYTXNJR3RsZVNrcElIdGNiaUFnSUNBZ0lIWmhjaUJyWlhsUWNtVm1hWGhsWkNBOUlHZGxkRk4wZVd4bFYybDBhRkJ5WldacGVFdGxlU2g3WEc0Z0lDQWdJQ0FnSUhOMGVXeGxUR2x6ZERvZ2JtOWtaUzV6ZEhsc1pTeGNiaUFnSUNBZ0lDQWdjM1I1YkdWVWIwTm9aV05yT2lCclpYbGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2EyVjVVSEpsWm1sNFpXUXBJSHRjYmlBZ0lDQWdJQ0FnYm05a1pTNXpkSGxzWlZ0clpYbFFjbVZtYVhobFpGMGdQU0JqYzNOVGRIbHNaWE5iYTJWNVhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z0tEQXNJRjlrYW5ObWVUSXVaR1ZtWVhWc2RDa29ibTlrWlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdGa1pFTnNZWE56S0c1dlpHVXNJR05zWVhOelRHbHpkQ2tnZTF4dUlDQjJZWElnWTNWeWNtVnVkRU5zWVhOelRHbHpkQ0E5SUc1dlpHVXVaMlYwUVhSMGNtbGlkWFJsS0NkamJHRnpjeWNwSUh4OElDY25PMXh1WEc0Z0lHTnNZWE56VEdsemRDQTlJSEJoY25ObFFYSnlZWGtvWTJ4aGMzTk1hWE4wS1NCOGZDQmJYVHRjYmx4dUlDQnBaaUFvWTJ4aGMzTk1hWE4wSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diR1Z1WjNSb0lEMGdZMnhoYzNOTWFYTjBMbXhsYm1kMGFEc2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnBaaUFvSVdOc1lYTnpUR2x6ZEZ0cFhTNTBjbWx0S0NrcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRk41Ym5SaGVFVnljbTl5S0Nka2FuTXVZV1JrUTJ4aGMzTW9LVG9nUlcxd2RIa2djM1J5YVc1bmN5QmhjbVVnYm05MElIWmhiR2xrSUdOc1lYTnpJRzVoYldVbktUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0NGamIyNTBZV2x1YzBOc1lYTnpTVzUwYjB4cGMzUW9ZM1Z5Y21WdWRFTnNZWE56VEdsemRDd2dZMnhoYzNOTWFYTjBXMmxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFEyeGhjM05NYVhOMElDczlJQ2NnSnlBcklHTnNZWE56VEdsemRGdHBYUzUwY21sdEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5d2dZM1Z5Y21WdWRFTnNZWE56VEdsemRDNTBjbWx0S0NrcE8xeHVYRzRnSUhKbGRIVnliaUFvTUN3Z1gyUnFjMlo1TWk1a1pXWmhkV3gwS1NodWIyUmxLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZMjl1ZEdGcGJuTkRiR0Z6Y3lodWIyUmxMQ0JqYkdGemMwNWhiV1VwSUh0Y2JpQWdhV1lnS0NGdWIyUmxLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFVhR1VnWld4bGJXVnVkQ0J0ZFhOMElHSmxJRzV2ZENCbGJYQjBlUzRuS1R0Y2JpQWdmVnh1WEc0Z0lHRnpjMlZ5ZEVOc1lYTnpUbUZ0WlNoamJHRnpjMDVoYldVcE8xeHVYRzRnSUhKbGRIVnliaUJqYjI1MFlXbHVjME5zWVhOelNXNTBiMHhwYzNRb2JtOWtaUzVuWlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56Snlrc0lHTnNZWE56VG1GdFpTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxiVzkyWlVOc1lYTnpLRzV2WkdVc0lHTnNZWE56Vkc5U1pXMXZkbVVwSUh0Y2JpQWdkbUZ5SUdOMWNuSmxiblJEYkdGemMweHBjM1FnUFNCblpYUkRkWEp5Wlc1MFEyeGhjM05NYVhOMEtHNXZaR1VwTzF4dVhHNGdJR05zWVhOelZHOVNaVzF2ZG1VZ1BTQndZWEp6WlVGeWNtRjVLR05zWVhOelZHOVNaVzF2ZG1VcElIeDhJRnRkTzF4dVhHNGdJR2xtSUNnaFkzVnljbVZ1ZEVOc1lYTnpUR2x6ZEM1c1pXNW5kR2dnZkh3Z0lXTnNZWE56Vkc5U1pXMXZkbVV1YkdWdVozUm9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZ3dMQ0JmWkdwelpua3lMbVJsWm1GMWJIUXBLRzV2WkdVcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0dOc1lYTnpWRzlTWlcxdmRtVWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTa2dlMXh1SUNBZ0lHTnNZWE56Vkc5U1pXMXZkbVZKYm5SbGNtRmpkR2x2YmpvZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd4bGJtZDBhQ0E5SUdOc1lYTnpWRzlTWlcxdmRtVXViR1Z1WjNSb095QnBJRHdnYkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJqYkdGemMwNWhiV1VnUFNCamJHRnpjMVJ2VW1WdGIzWmxXMmxkTzF4dUlDQWdJQ0FnWVhOelpYSjBRMnhoYzNOT1lXMWxLR05zWVhOelRtRnRaU2s3WEc1Y2JpQWdJQ0FnSUdOMWNuSmxiblJEYkdGemMweHBjM1JKYm5SbGNtRmpkR2x2YmpvZ1ptOXlJQ2gyWVhJZ2VTQTlJREFzSUY5c1pXNW5kR2dnUFNCamRYSnlaVzUwUTJ4aGMzTk1hWE4wTG14bGJtZDBhRHNnZVNBOElGOXNaVzVuZEdnN0lIa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMnhoYzNOT1lXMWxJRDA5UFNCamRYSnlaVzUwUTJ4aGMzTk1hWE4wVzNsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRU5zWVhOelRHbHpkQzV6Y0d4cFkyVW9lU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVWdZMnhoYzNOVWIxSmxiVzkyWlVsdWRHVnlZV04wYVc5dU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5d2dZM1Z5Y21WdWRFTnNZWE56VEdsemRDNXFiMmx1S0NjZ0p5a3BPMXh1WEc0Z0lISmxkSFZ5YmlBb01Dd2dYMlJxYzJaNU1pNWtaV1poZFd4MEtTaHViMlJsS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZEc5bloyeGxRMnhoYzNNb2JtOWtaU3dnWTJ4aGMzTk9ZVzFsTENCbWIzSmpaU2tnZTF4dUlDQnBaaUFvSVc1dlpHVXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JsYkdWdFpXNTBJRzExYzNRZ1ltVWdibTkwSUdWdGNIUjVMaWNwTzF4dUlDQjlYRzVjYmlBZ1lYTnpaWEowUTJ4aGMzTk9ZVzFsS0dOc1lYTnpUbUZ0WlNrN1hHNWNiaUFnZG1GeUlHTjFjbkpsYm5SRGJHRnpjMHhwYzNRZ1BTQm5aWFJEZFhKeVpXNTBRMnhoYzNOTWFYTjBLRzV2WkdVcE8xeHVYRzRnSUdsbUlDaGpiMjUwWVdsdWMwTnNZWE56U1c1MGIweHBjM1FvWTNWeWNtVnVkRU5zWVhOelRHbHpkQ3dnWTJ4aGMzTk9ZVzFsS1NrZ2UxeHVJQ0FnSUdsbUlDZ2habTl5WTJVcElIdGNiaUFnSUNBZ0lISmxiVzkyWlVOc1lYTnpLRzV2WkdVc0lHTnNZWE56VG1GdFpTazdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHbG1JQ2htYjNKalpTQWhQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJR0ZrWkVOc1lYTnpLRzV2WkdVc0lHTnNZWE56VG1GdFpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlDZ3dMQ0JmWkdwelpua3lMbVJsWm1GMWJIUXBLRzV2WkdVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkRkWEp5Wlc1MFEyeGhjM05NYVhOMEtHNXZaR1VwSUh0Y2JpQWdjbVYwZFhKdUlIQmhjbk5sUVhKeVlYa29ibTlrWlM1blpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5a3BJSHg4SUZ0ZE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaGMzTmxjblJEYkdGemMwNWhiV1VvWTJ4aGMzTk9ZVzFsS1NCN1hHNGdJR2xtSUNnaFkyeGhjM05PWVcxbEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdZMnhoYzNOT1lXMWxJSEJ5YjNacFpHVmtJQ2hjWENjbklDc2dZMnhoYzNOT1lXMWxJQ3NnSjF4Y0p5a2diWFZ6ZENCaVpTQnViM1FnWlcxd2RIa3VKeWs3WEc0Z0lIMWNibHh1SUNCcFppQW9ZMjl1ZEdGcGJuTlhhR2wwWlhOd1lXTmxjeWhqYkdGemMwNWhiV1VwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RVYUdVZ1kyeGhjM05PWVcxbElIQnliM1pwWkdWa0lDaGNYQ2NuSUNzZ1kyeGhjM05PWVcxbElDc2dKMXhjSnlrZ1kyOXVkR0ZwYm5NZ1NGUk5UQ0J6Y0dGalpTQmphR0Z5WVdOMFpYSnpMQ0IzYUdsamFDQmhjbVVnYm05MElIWmhiR2xrTGljcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR052Ym5SaGFXNXpWMmhwZEdWemNHRmpaWE1vYzNSeWFXNW5LU0I3WEc0Z0lISmxkSFZ5YmlCemRISnBibWN1YldGMFkyZ29MMXhjY3k4cE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamIyNTBZV2x1YzBOc1lYTnpTVzUwYjB4cGMzUW9ZMnhoYzNOTWFYTjBMQ0JqYkdGemMxUnZRMmhsWTJzcElIdGNiaUFnWTJ4aGMzTk1hWE4wSUQwZ2NHRnljMlZCY25KaGVTaGpiR0Z6YzB4cGMzUXBJSHg4SUZ0ZE8xeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzWlc1bmRHZ2dQU0JqYkdGemMweHBjM1F1YkdWdVozUm9PeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvWTJ4aGMzTk1hWE4wVzJsZExuUnlhVzBvS1NBOVBUMGdZMnhoYzNOVWIwTm9aV05yTG5SeWFXMG9LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndZWEp6WlVGeWNtRjVLR05zWVhOelRHbHpkQ2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR05zWVhOelRHbHpkQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCamJHRnpjMHhwYzNRZ1BTQmpiR0Z6YzB4cGMzUXVjM0JzYVhRb0p5QW5LVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJqYkdGemMweHBjM1E3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEZOMGVXeGxWMmwwYUZCeVpXWnBlRXRsZVNoZmNtVm1LU0I3WEc0Z0lIWmhjaUJ6ZEhsc1pVeHBjM1FnUFNCZmNtVm1Mbk4wZVd4bFRHbHpkRHRjYmlBZ2RtRnlJSE4wZVd4bFZHOURhR1ZqYXlBOUlGOXlaV1l1YzNSNWJHVlViME5vWldOck8xeHVYRzRnSUdsbUlDaHpkSGxzWlZSdlEyaGxZMnNnYVc0Z2MzUjViR1ZNYVhOMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMGVXeGxWRzlEYUdWamF6dGNiaUFnZlZ4dVhHNGdJR2xtSUNoemRIbHNaVlJ2UTJobFkyc2dhVzRnUTFOVFgxQlNSVVpKV0VWRUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUVOVFUxOVFVa1ZHU1ZoRlJGdHpkSGxzWlZSdlEyaGxZMnRkTzF4dUlDQjlYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd4bGJtZDBhQ0E5SUZCU1JVWkpXRWxGVXk1c1pXNW5kR2c3SUdrZ1BDQnNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCemRIbHNaVmRwZEdoUWNtVm1hWGdnUFNBbkp5QXJJRkJTUlVaSldFbEZVMXRwWFNBcklITjBlV3hsVkc5RGFHVmphMXN3WFM1MGIxVndjR1Z5UTJGelpTZ3BJQ3NnYzNSNWJHVlViME5vWldOckxuTjFZbk4wY21sdVp5Z3hLVHRjYmx4dUlDQWdJR2xtSUNoemRIbHNaVmRwZEdoUWNtVm1hWGdnYVc0Z2MzUjViR1ZNYVhOMEtTQjdYRzRnSUNBZ0lDQkRVMU5mVUZKRlJrbFlSVVJiYzNSNWJHVlViME5vWldOclhTQTlJSE4wZVd4bFYybDBhRkJ5WldacGVEdGNiaUFnSUNBZ0lISmxkSFZ5YmlCRFUxTmZVRkpGUmtsWVJVUmJjM1I1YkdWVWIwTm9aV05yWFR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdYMlFnUFNCeVpYRjFhWEpsS0NjdUwyUnFjeTlrTG1wekp5azdYRzVjYm5aaGNpQmZaRElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjlrS1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVhV1lnS0hSNWNHVnZaaUJsZUhCdmNuUnpJRDA5UFNBbmIySnFaV04wSnlBbUppQjBlWEJsYjJZZ2JXOWtkV3hsSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWtNaTVrWldaaGRXeDBPMXh1ZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwSUh0Y2JpQWdaR1ZtYVc1bEtGdGRMQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTzF4dUlDQjlLVHRjYm4xY2JseHVkbUZ5SUY5bmJHOWlZV3dnUFNCMWJtUmxabWx1WldRN1hHNWNibWxtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNCZloyeHZZbUZzSUQwZ2QybHVaRzkzTzF4dWZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1oyeHZZbUZzSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQmZaMnh2WW1Gc0lEMGdaMnh2WW1Gc08xeHVmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdjMlZzWmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdYMmRzYjJKaGJDQTlJSE5sYkdZN1hHNTlJR1ZzYzJVZ2UxeHVJQ0JmWjJ4dlltRnNJRDBnZFc1a1pXWnBibVZrTzF4dWZWeHVYRzVmWjJ4dlltRnNMbVJxY3lBOUlGOWtNaTVrWldaaGRXeDBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR2gwYld4VGRISnBibWRHY205dFZHVnRjR3hoZEdWVGRISnBibWM3WEc1bWRXNWpkR2x2YmlCb2RHMXNVM1J5YVc1blJuSnZiVlJsYlhCc1lYUmxVM1J5YVc1bktIUmxiWEJzWVhSbFQySnFaV04wS1NCN1hHNGdJSFpoY2lCeVlYY2dQU0IwWlcxd2JHRjBaVTlpYW1WamRDNXlZWGM3WEc1Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0JtYjNJZ0tIWmhjaUJmYkdWdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDd2djM1ZpYzNSeklEMGdRWEp5WVhrb1gyeGxiaUErSURFZ1B5QmZiR1Z1SUMwZ01TQTZJREFwTENCZmEyVjVJRDBnTVRzZ1gydGxlU0E4SUY5c1pXNDdJRjlyWlhrckt5a2dlMXh1SUNBZ0lITjFZbk4wYzF0ZmEyVjVJQzBnTVYwZ1BTQmhjbWQxYldWdWRITmJYMnRsZVYwN1hHNGdJSDFjYmx4dUlDQnlaWE4xYkhRZ1BTQnpkV0p6ZEhNdWNtVmtkV05sS0daMWJtTjBhVzl1SUNoeVpYTjFiSFFzSUhOMVluTjBMQ0JwS1NCN1hHNGdJQ0FnZG1GeUlHeHBkQ0E5SUhKaGQxdHBYVHRjYmx4dUlDQWdJSE4xWW5OMElEMGdRWEp5WVhrdWFYTkJjbkpoZVNoemRXSnpkQ2tnUHlCemRXSnpkQzVxYjJsdUtDY25LU0E2SUhOMVluTjBJQ3NnSnljN1hHNWNiaUFnSUNCcFppQW9iR2wwVzJ4cGRDNXNaVzVuZEdnZ0xTQXhYU0E5UFQwZ0p5UW5LU0I3WEc0Z0lDQWdJQ0J6ZFdKemRDQTlJR2gwYld4RmMyTmhjR1VvYzNWaWMzUXBPMXh1SUNBZ0lDQWdiR2wwSUQwZ2JHbDBMbk5zYVdObEtEQXNJQzB4S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhOMWJIUWdLejBnYkdsME8xeHVJQ0FnSUhKbGMzVnNkQ0FyUFNCemRXSnpkRHRjYmx4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDBzSUNjbktUdGNibHh1SUNCeVpYTjFiSFFnS3owZ2NtRjNXM0poZHk1c1pXNW5kR2dnTFNBeFhUdGNibHh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9kRzFzUlhOallYQmxLSE4wY2lrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5TG5KbGNHeGhZMlVvTHlZdlp5d2dKeVpoYlhBN0p5a3VjbVZ3YkdGalpTZ3ZQaTluTENBbkptZDBPeWNwTG5KbGNHeGhZMlVvTHp3dlp5d2dKeVpzZERzbktTNXlaWEJzWVdObEtDOWNJaTluTENBbkpuRjFiM1JsT3ljcExuSmxjR3hoWTJVb0x5Y3ZaeXdnSnlZak16azdKeWt1Y21Wd2JHRmpaU2d2WUM5bkxDQW5KaU01TmpzbktUdGNibjBpTENKcGJYQnZjblFnWkdsemRHRnVZMlZFYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR2WkdsemRHRnVZMlV1WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVwYlhCdmNuUWdlMlJsWm1sdVpVTnZibk4wVUhKdmNHVnlkSGw5SUdaeWIyMGdKeTR1TDNSdmIyeHpMM1YwYVd4ekxtcHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSR2x6ZEdGdVkyVkJZM1JwYjI1eklIdGNiaUFnYzNSaGRHbGpJR05vWVc1blpWWmhiSFZsS0haaGJIVmxLU0I3WEc0Z0lDQWdaR2x6ZEdGdVkyVkVhWE53WVhSamFHVnlMbVJwYzNCaGRHTm9LSHRjYmlBZ0lDQWdJSFI1Y0dVNklFUnBjM1JoYm1ObFFXTjBhVzl1Y3k1V1FVeFZSVjlEU0VGT1IwVkVMRnh1SUNBZ0lDQWdaR0YwWVRvZ2RtRnNkV1ZjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJqYUdGdVoyVlZibWwwS0hWdWFYUXBJSHRjYmlBZ0lDQmthWE4wWVc1alpVUnBjM0JoZEdOb1pYSXVaR2x6Y0dGMFkyZ29lMXh1SUNBZ0lDQWdkSGx3WlRvZ1JHbHpkR0Z1WTJWQlkzUnBiMjV6TGxWT1NWUmZRMGhCVGtkRlJDeGNiaUFnSUNBZ0lHUmhkR0U2SUhWdWFYUmNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVYRzVrWldacGJtVkRiMjV6ZEZCeWIzQmxjblI1S0VScGMzUmhibU5sUVdOMGFXOXVjeXdnSjFaQlRGVkZYME5JUVU1SFJVUW5MQ0JUZVcxaWIyd29LU2s3WEc1a1pXWnBibVZEYjI1emRGQnliM0JsY25SNUtFUnBjM1JoYm1ObFFXTjBhVzl1Y3l3Z0oxVk9TVlJmUTBoQlRrZEZSQ2NzSUZONWJXSnZiQ2dwS1R0Y2JseHVJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1JHbHpkR0Z1WTJVZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loN2RXNXBkRDBuUzIwbkxDQjJZV3gxWlQwd2ZTa2dlMXh1SUNBZ0lIUm9hWE11ZFc1cGRDQTlJSFZ1YVhRN1hHNGdJQ0FnZEdocGN5NTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQjlYRzVjYmlBZ2MyVjBWbUZzZFdVb2RtRnNkV1VwSUh0Y2JpQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2NHRnljMlZKYm5Rb2RtRnNkV1VwTzF4dUlDQjlYRzU5SWl3aWFXMXdiM0owSUVScGMzQmhkR05vWlhJZ1puSnZiU0FuTGk0dmRHOXZiSE12WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRzVsZHlCRWFYTndZWFJqYUdWeUtDazdJaXdpYVcxd2IzSjBJR1JxY3lCbWNtOXRJQ2RrYjIwdWFuTW5PMXh1WEc1cGJYQnZjblFnUkdsemRHRnVZMlZCWTNScGIyNXpJR1p5YjIwZ0p5NHZaR2x6ZEdGdVkyVXVZV04wYVc5dWN5NXFjeWM3WEc1cGJYQnZjblFnUkdsemRHRnVZMlZUZEc5eVpTQm1jbTl0SUNjdUwyUnBjM1JoYm1ObExuTjBiM0psTG1wekp6dGNibHh1YkdWMElHTnZibVpwWjAxaGNDQTlJSHRjYmlBZ2FIUnRiRG9nWkdwellGeHVJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSm1aUzFrYVhOMFlXNWpaVndpUGx4dUlDQWdJQ0FnUEdsdWNIVjBJR05zWVhOelBWd2labVV0YVc1d2RYUnpYMTlwYm5CMWRDQm1aUzFrYVhOMFlXNWpaVjlmYVc1d2RYUmNJaUIwZVhCbFBWd2liblZ0WW1WeVhDSStYRzRnSUNBZ0lDQThjM0JoYmlCamJHRnpjejFjSW1abExYVnVhWFFnWm1VdFpHbHpkR0Z1WTJWZlgzVnVhWFJjSWo1N0pDUjFibWwwZlR3dmMzQmhiajVjYmlBZ0lDQThMMlJwZGo1Y2JpQWdZRnh1ZlR0Y2JseHViR1YwSUdWc1pXMWxiblJOWVhBZ1BTQjdYRzRnSUNSamIyNTBZV2x1WlhJNklHNTFiR3dzWEc0Z0lDUmthWE4wWVc1alpUb2diblZzYkN4Y2JpQWdKR2x1Y0hWME9pQnVkV3hzTEZ4dUlDQWtkVzVwZERvZ2JuVnNiRnh1ZlR0Y2JseHViR1YwSUdScGMzUmhibU5sVTNSdmNtVTdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYm1sMFRXOWtkV3hsS0NSamIyNTBZV2x1WlhJcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a1pHbHpkR0Z1WTJVZ1BTQWtZMjl1ZEdGcGJtVnlMbU55WldGMFpTaGpiMjVtYVdkTllYQXVhSFJ0YkNrN1hHNGdJSE5sZEVWc1pXMWxiblJOWVhBb0pHTnZiblJoYVc1bGNpazdYRzRnSUhObGRFVnNaVzFsYm5SSVlXNWtiR1Z5Y3lncE8xeHVYRzRnSUdScGMzUmhibU5sVTNSdmNtVWdQU0J1WlhjZ1JHbHpkR0Z1WTJWVGRHOXlaU2dwTzF4dUlDQmthWE4wWVc1alpWTjBiM0psTG05dVEyaGhibWRsS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhKbFpuSmxjMmhWYm1sMEtHUnBjM1JoYm1ObFUzUnZjbVV1WkdsemRHRnVZMlV1ZFc1cGRDazdYRzRnSUgwcE8xeHVYRzRnSUVScGMzUmhibU5sUVdOMGFXOXVjeTVqYUdGdVoyVlZibWwwS0NkTGJTY3BPMXh1SUNCa2FYTjBZVzVqWlZOMGIzSmxMblZ1Y21WbmFYTjBaWEpNYVhOMFpXNWxjaWdwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ5WldaeVpYTm9WVzVwZENoMWJtbDBLU0I3WEc0Z0lHVnNaVzFsYm5STllYQXVKSFZ1YVhRdWFXNXVaWEpJVkUxTUlEMGdkVzVwZER0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYzJWMFJXeGxiV1Z1ZEUxaGNDZ2tZMjl1ZEdGcGJtVnlLU0I3WEc0Z0lHVnNaVzFsYm5STllYQXVKR052Ym5SaGFXNWxjaUE5SUNSamIyNTBZV2x1WlhJN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdsdWNIVjBJRDBnWld4bGJXVnVkRTFoY0M0a1pHbHpkR0Z1WTJVdVptbHVaQ2duTG1abExXUnBjM1JoYm1ObFgxOXBibkIxZENjcE8xeHVJQ0JsYkdWdFpXNTBUV0Z3TGlSMWJtbDBJRDBnWld4bGJXVnVkRTFoY0M0a1pHbHpkR0Z1WTJVdVptbHVaQ2duTG1abExXUnBjM1JoYm1ObFgxOTFibWwwSnlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhObGRFVnNaVzFsYm5SSVlXNWtiR1Z5Y3lncElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a2FXNXdkWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYVc1d2RYUW5MQ0JtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1SUNBZ0lFUnBjM1JoYm1ObFFXTjBhVzl1Y3k1amFHRnVaMlZXWVd4MVpTaGxkbVZ1ZEM1MFlYSm5aWFF1ZG1Gc2RXVXBPeUFnSUNCY2JpQWdmU2s3WEc1OVhHNGlMQ0pwYlhCdmNuUWdVM1J2Y21VZ1puSnZiU0FuTGk0dmRHOXZiSE12YzNSdmNtVXVhbk1uTzF4dVhHNXBiWEJ2Y25RZ1JHbHpkR0Z1WTJVZ1puSnZiU0FuTGk5a2FYTjBZVzVqWlM1amJHRnpjeTVxY3ljN1hHNXBiWEJ2Y25RZ1JHbHpkR0Z1WTJWQlkzUnBiMjV6SUdaeWIyMGdKeTR2WkdsemRHRnVZMlV1WVdOMGFXOXVjeTVxY3ljN1hHNXBiWEJ2Y25RZ1pHbHpkR0Z1WTJWRWFYTndZWFJqYUdWeUlHWnliMjBnSnk0dlpHbHpkR0Z1WTJVdVpHbHpjR0YwWTJobGNpNXFjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRVJwYzNSaGJtTmxVM1J2Y21VZ1pYaDBaVzVrY3lCVGRHOXlaWHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdjM1Z3WlhJb0tUdGNibHh1SUNBZ0lIUm9hWE11WkdsemRHRnVZMlVnUFNCdVpYY2dSR2x6ZEdGdVkyVW9lMzBwTzF4dVhHNGdJQ0FnZEdocGN5NXNhWE4wWlc1bGNpQTlJR1JwYzNSaGJtTmxSR2x6Y0dGMFkyaGxjaTV5WldkcGMzUmxjaWdvYkdsemRHVnVaWElwSUQwK0lIdGNiaUFnSUNBZ0lITjNhWFJqYUNoc2FYTjBaVzVsY2k1MGVYQmxLU0I3WEc0Z0lDQWdJQ0JqWVhObElFUnBjM1JoYm1ObFFXTjBhVzl1Y3k1V1FVeFZSVjlEU0VGT1IwVkVPbHh1SUNBZ0lDQWdJQ0IwYUdsekxtUnBjM1JoYm1ObElEMGdibVYzSUVScGMzUmhibU5sS0h0Y2JpQWdJQ0FnSUNBZ0lDQjFibWwwT2lCMGFHbHpMbVJwYzNSaGJtTmxMblZ1YVhRc0lGeHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnNhWE4wWlc1bGNpNWtZWFJoWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ0lDQmpZWE5sSUVScGMzUmhibU5sUVdOMGFXOXVjeTVWVGtsVVgwTklRVTVIUlVRNlhHNGdJQ0FnSUNBZ0lIUm9hWE11WkdsemRHRnVZMlVnUFNCdVpYY2dSR2x6ZEdGdVkyVW9lMXh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUIwYUdsekxtUnBjM1JoYm1ObExuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lIVnVhWFE2SUd4cGMzUmxibVZ5TG1SaGRHRmNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhSb2FYTXVZMmhoYm1kbEtDazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0IxYm5KbFoybHpkR1Z5VEdsemRHVnVaWElvS1NCN1hHNGdJQ0FnWkdsemRHRnVZMlZFYVhOd1lYUmphR1Z5TG5WdWNtVm5hWE4wWlhJb2RHaHBjeTVzYVhOMFpXNWxjaWs3WEc0Z0lIMWNibjBpTENKcGJYQnZjblFnWkdweklHWnliMjBnSjJSdmJTNXFjeWM3WEc1Y2JteGxkQ0JqYjI1bWFXZE5ZWEFnUFNCN1hHNGdJR2gwYld3NklHUnFjMkJjYmlBZ0lDQThhR1ZoWkdWeUlHTnNZWE56UFZ3aVptVXRhR1ZoWkdWeVhDSStYRzRnSUNBZ0lDQThhREUrUm5WbGJDQkZZMjl1YjIxNVBDOW9NVDVjYmlBZ0lDQThMMmhsWVdSbGNqNWNiaUFnWUZ4dWZUdGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x1YVhSTmIyUjFiR1VvSkdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0FrWTI5dWRHRnBibVZ5TG1OeVpXRjBaU2hqYjI1bWFXZE5ZWEF1YUhSdGJDazdYRzU5WEc0aUxDSnBiWEJ2Y25RZ1pHcHpJR1p5YjIwZ0oyUnZiUzVxY3ljN1hHNWNibWx0Y0c5eWRDQXFJR0Z6SUdobFlXUmxjaUJtY205dElDY3VMMmhsWVdSbGNpOW9aV0ZrWlhJdWFuTW5PMXh1YVcxd2IzSjBJQ29nWVhNZ2FXNXdkWFJ6UTI5dWRHRnBibVZ5SUdaeWIyMGdKeTR2YVc1d2RYUnpMMmx1Y0hWMGN5MWpiMjUwWVdsdVpYSXVhbk1uTzF4dWFXMXdiM0owSUNvZ1lYTWdjbVZ6ZFd4MGMwTnZiblJoYVc1bGNpQm1jbTl0SUNjdUwzSmxjM1ZzZEhNdmNtVnpkV3gwY3kxamIyNTBZV2x1WlhJdWFuTW5PMXh1WEc1c1pYUWdKR2hsWVdSbGNrTnZiblJoYVc1bGNpQTlJR1JxY3lnbkxtWmxMV3B6TFdobFlXUmxjaWNwTzF4dWJHVjBJQ1JwYm5CMWRITkRiMjUwWVdsdVpYSWdQU0JrYW5Nb0p5NW1aUzFxY3kxcGJuQjFkSE10WTI5dWRHRnBibVZ5SnlrN1hHNXNaWFFnSkhKbGMzVnNkSE5EYjI1MFlXbHVaWElnUFNCa2FuTW9KeTVtWlMxcWN5MXlaWE4xYkhSekxXTnZiblJoYVc1bGNpY3BPMXh1WEc1b1pXRmtaWEl1YVc1cGRFMXZaSFZzWlNna2FHVmhaR1Z5UTI5dWRHRnBibVZ5S1R0Y2JtbHVjSFYwYzBOdmJuUmhhVzVsY2k1cGJtbDBUVzlrZFd4bEtDUnBibkIxZEhORGIyNTBZV2x1WlhJcE8xeHVjbVZ6ZFd4MGMwTnZiblJoYVc1bGNpNXBibWwwVFc5a2RXeGxLQ1J5WlhOMWJIUnpRMjl1ZEdGcGJtVnlLVHRjYmlJc0ltbHRjRzl5ZENCa2FuTWdabkp2YlNBblpHOXRMbXB6Snp0Y2JtbHRjRzl5ZENBcUlHRnpJSEYxWVc1MGFYUjVJR1p5YjIwZ0p5NHVMM0YxWVc1MGFYUjVMM0YxWVc1MGFYUjVMbXB6Snp0Y2JtbHRjRzl5ZENBcUlHRnpJR1JwYzNSaGJtTmxJR1p5YjIwZ0p5NHVMMlJwYzNSaGJtTmxMMlJwYzNSaGJtTmxMbXB6Snp0Y2JseHViR1YwSUdOdmJtWnBaMDFoY0NBOUlIdGNiaUFnYUhSdGJEb2daR3B6SUdCY2JpQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVptVXRhVzV3ZFhSekxXTnZiblJoYVc1bGNsd2lQbHh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1abExXbHVjSFYwY3lCbVpTMXFjeTF4ZFdGdWRHbDBlVndpUGp3dlpHbDJQbHh1WEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVptVXRhVzV3ZFhSeklHWmxMV3B6TFdScGMzUmhibU5sWENJK1BDOWthWFkrWEc0Z0lDQWdQQzlrYVhZK1hHNGdJR0JjYm4wN1hHNWNibXhsZENCbGJHVnRaVzUwVFdGd0lEMGdlMXh1SUNBa1kyOXVkR0ZwYm1WeU9pQnVkV3hzTEZ4dUlDQWthVzV3ZFhSRGIyNTBZV2x1WlhJNklHNTFiR3dzWEc0Z0lDUnBibkIxZEZGMVlXNTBhWFI1T2lCdWRXeHNMRnh1SUNBa2FXNXdkWFJFYVhOMFlXNWpaVG9nYm5Wc2JGeHVmVHRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdsdWFYUk5iMlIxYkdVb0pHTnZiblJoYVc1bGNpa2dlMXh1SUNCbGJHVnRaVzUwVFdGd0xpUnBibkIxZEVOdmJuUmhhVzVsY2lBOUlDUmpiMjUwWVdsdVpYSXVZM0psWVhSbEtHTnZibVpwWjAxaGNDNW9kRzFzS1R0Y2JseHVJQ0J6WlhSRmJHVnRaVzUwVFdGd0tDUmpiMjUwWVdsdVpYSXBPMXh1WEc0Z0lIRjFZVzUwYVhSNUxtbHVhWFJOYjJSMWJHVW9aV3hsYldWdWRFMWhjQzRrYVc1d2RYUlJkV0Z1ZEdsMGVTazdYRzRnSUdScGMzUmhibU5sTG1sdWFYUk5iMlIxYkdVb1pXeGxiV1Z1ZEUxaGNDNGthVzV3ZFhSRWFYTjBZVzVqWlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhObGRFVnNaVzFsYm5STllYQW9KR052Ym5SaGFXNWxjaWtnZTF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJqYjI1MFlXbHVaWElnUFNBa1kyOXVkR0ZwYm1WeU8xeHVJQ0JsYkdWdFpXNTBUV0Z3TGlScGJuQjFkRkYxWVc1MGFYUjVJRDBnWld4bGJXVnVkRTFoY0M0a2FXNXdkWFJEYjI1MFlXbHVaWEl1Wm1sdVpDZ25MbVpsTFdwekxYRjFZVzUwYVhSNUp5azdYRzRnSUdWc1pXMWxiblJOWVhBdUpHbHVjSFYwUkdsemRHRnVZMlVnUFNCbGJHVnRaVzUwVFdGd0xpUnBibkIxZEVOdmJuUmhhVzVsY2k1bWFXNWtLQ2N1Wm1VdGFuTXRaR2x6ZEdGdVkyVW5LVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQnhkV0Z1ZEdsMGVVUnBjM0JoZEdOb1pYSWdabkp2YlNBbkxpOXhkV0Z1ZEdsMGVTNWthWE53WVhSamFHVnlMbXB6Snp0Y2JtbHRjRzl5ZENCN1pHVm1hVzVsUTI5dWMzUlFjbTl3WlhKMGVYMGdabkp2YlNBbkxpNHZkRzl2YkhNdmRYUnBiSE11YW5Nbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCUmRXRnVkR2wwZVVGamRHbHZibk1nZTF4dUlDQnpkR0YwYVdNZ1kyaGhibWRsVm1Gc2RXVW9kbUZzZFdVcElIdGNiaUFnSUNCeGRXRnVkR2wwZVVScGMzQmhkR05vWlhJdVpHbHpjR0YwWTJnb2UxeHVJQ0FnSUNBZ2RIbHdaVG9nVVhWaGJuUnBkSGxCWTNScGIyNXpMbFpCVEZWRlgwTklRVTVIUlVRc1hHNGdJQ0FnSUNCa1lYUmhPaUIyWVd4MVpWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHTm9ZVzVuWlZWdWFYUW9kVzVwZENrZ2UxeHVJQ0FnSUhGMVlXNTBhWFI1UkdsemNHRjBZMmhsY2k1a2FYTndZWFJqYUNoN1hHNGdJQ0FnSUNCMGVYQmxPaUJSZFdGdWRHbDBlVUZqZEdsdmJuTXVWVTVKVkY5RFNFRk9SMFZFTEZ4dUlDQWdJQ0FnWkdGMFlUb2dkVzVwZEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzU5WEc1Y2JtUmxabWx1WlVOdmJuTjBVSEp2Y0dWeWRIa29VWFZoYm5ScGRIbEJZM1JwYjI1ekxDQW5Wa0ZNVlVWZlEwaEJUa2RGUkNjc0lGTjViV0p2YkNncEtUdGNibVJsWm1sdVpVTnZibk4wVUhKdmNHVnlkSGtvVVhWaGJuUnBkSGxCWTNScGIyNXpMQ0FuVlU1SlZGOURTRUZPUjBWRUp5d2dVM2x0WW05c0tDa3BPMXh1WEc0aUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJSZFdGdWRHbDBlU0I3WEc0Z0lHTnZibk4wY25WamRHOXlLSHQxYm1sMFBTZE1KeXdnZG1Gc2RXVTlNSDBwSUh0Y2JpQWdJQ0IwYUdsekxuVnVhWFFnUFNCMWJtbDBPMXh1SUNBZ0lIUm9hWE11ZG1Gc2RXVWdQU0IyWVd4MVpUdGNiaUFnZlZ4dVhHNGdJSE5sZEZaaGJIVmxLSFpoYkhWbEtTQjdYRzRnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJSEJoY25ObFNXNTBLSFpoYkhWbEtUdGNiaUFnZlZ4dWZTSXNJbWx0Y0c5eWRDQkVhWE53WVhSamFHVnlJR1p5YjIwZ0p5NHVMM1J2YjJ4ekwyUnBjM0JoZEdOb1pYSXVhbk1uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCdVpYY2dSR2x6Y0dGMFkyaGxjaWdwT3lJc0ltbHRjRzl5ZENCa2FuTWdabkp2YlNBblpHOXRMbXB6Snp0Y2JseHVhVzF3YjNKMElGRjFZVzUwYVhSNVFXTjBhVzl1Y3lCbWNtOXRJQ2N1TDNGMVlXNTBhWFI1TG1GamRHbHZibk11YW5Nbk8xeHVhVzF3YjNKMElGRjFZVzUwYVhSNVUzUnZjbVVnWm5KdmJTQW5MaTl4ZFdGdWRHbDBlUzV6ZEc5eVpTNXFjeWM3WEc1Y2JteGxkQ0JqYjI1bWFXZE5ZWEFnUFNCN1hHNGdJR2gwYld3NklHUnFjMkJjYmlBZ0lDQThaR2wySUdOc1lYTnpQVndpWm1VdGNYVmhiblJwZEhsY0lqNWNiaUFnSUNBZ0lEeHBibkIxZENCamJHRnpjejFjSW1abExXbHVjSFYwYzE5ZmFXNXdkWFFnWm1VdGNYVmhiblJwZEhsZlgybHVjSFYwWENJZ2RIbHdaVDFjSW01MWJXSmxjbHdpUGx4dUlDQWdJQ0FnUEhOd1lXNGdZMnhoYzNNOVhDSm1aUzExYm1sMElHWmxMWEYxWVc1MGFYUjVYMTkxYm1sMFhDSStleVFrZFc1cGRIMDhMM053WVc0K1hHNGdJQ0FnUEM5a2FYWStYRzRnSUdCY2JuMDdYRzVjYm14bGRDQmxiR1Z0Wlc1MFRXRndJRDBnZTF4dUlDQWtZMjl1ZEdGcGJtVnlPaUJ1ZFd4c0xGeHVJQ0FrY1hWaGJuUnBkSGs2SUc1MWJHd3NYRzRnSUNScGJuQjFkRG9nYm5Wc2JDeGNiaUFnSkhWdWFYUTZJRzUxYkd4Y2JuMDdYRzVjYm14bGRDQnhkV0Z1ZEdsMGVWTjBiM0psTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FXNXBkRTF2WkhWc1pTZ2tZMjl1ZEdGcGJtVnlLU0I3WEc0Z0lHVnNaVzFsYm5STllYQXVKSEYxWVc1MGFYUjVJRDBnSkdOdmJuUmhhVzVsY2k1amNtVmhkR1VvWTI5dVptbG5UV0Z3TG1oMGJXd3BPMXh1SUNCelpYUkZiR1Z0Wlc1MFRXRndLQ1JqYjI1MFlXbHVaWElwTzF4dUlDQnpaWFJGYkdWdFpXNTBTR0Z1Wkd4bGNuTW9LVHRjYmx4dUlDQnhkV0Z1ZEdsMGVWTjBiM0psSUQwZ2JtVjNJRkYxWVc1MGFYUjVVM1J2Y21Vb0tUdGNiaUFnY1hWaGJuUnBkSGxUZEc5eVpTNXZia05vWVc1blpTaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnlaV1p5WlhOb1ZXNXBkQ2h4ZFdGdWRHbDBlVk4wYjNKbExuRjFZVzUwYVhSNUxuVnVhWFFwTzF4dUlDQjlLVHRjYmx4dUlDQlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NdVkyaGhibWRsVlc1cGRDZ25UQ2NwTzF4dUlDQnhkV0Z1ZEdsMGVWTjBiM0psTG5WdWNtVm5hWE4wWlhKTWFYTjBaVzVsY2lncE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpXWnlaWE5vVlc1cGRDaDFibWwwS1NCN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkhWdWFYUXVhVzV1WlhKSVZFMU1JRDBnZFc1cGREdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyVjBSV3hsYldWdWRFMWhjQ2drWTI5dWRHRnBibVZ5S1NCN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdOdmJuUmhhVzVsY2lBOUlDUmpiMjUwWVdsdVpYSTdYRzRnSUdWc1pXMWxiblJOWVhBdUpHbHVjSFYwSUQwZ1pXeGxiV1Z1ZEUxaGNDNGtjWFZoYm5ScGRIa3VabWx1WkNnbkxtWmxMWEYxWVc1MGFYUjVYMTlwYm5CMWRDY3BPMXh1SUNCbGJHVnRaVzUwVFdGd0xpUjFibWwwSUQwZ1pXeGxiV1Z1ZEUxaGNDNGtjWFZoYm5ScGRIa3VabWx1WkNnbkxtWmxMWEYxWVc1MGFYUjVYMTkxYm1sMEp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxkRVZzWlcxbGJuUklZVzVrYkdWeWN5Z3BJSHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGthVzV3ZFhRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmFXNXdkWFFuTENCbWRXNWpkR2x2YmlobGRtVnVkQ2tnZTF4dUlDQWdJRkYxWVc1MGFYUjVRV04wYVc5dWN5NWphR0Z1WjJWV1lXeDFaU2hsZG1WdWRDNTBZWEpuWlhRdWRtRnNkV1VwT3lBZ0lDQmNiaUFnZlNrN1hHNTlJaXdpYVcxd2IzSjBJRk4wYjNKbElHWnliMjBnSnk0dUwzUnZiMnh6TDNOMGIzSmxMbXB6Snp0Y2JseHVhVzF3YjNKMElGRjFZVzUwYVhSNUlHWnliMjBnSnk0dmNYVmhiblJwZEhrdVkyeGhjM011YW5Nbk8xeHVhVzF3YjNKMElGRjFZVzUwYVhSNVFXTjBhVzl1Y3lCbWNtOXRJQ2N1TDNGMVlXNTBhWFI1TG1GamRHbHZibk11YW5Nbk8xeHVhVzF3YjNKMElIRjFZVzUwYVhSNVJHbHpjR0YwWTJobGNpQm1jbTl0SUNjdUwzRjFZVzUwYVhSNUxtUnBjM0JoZEdOb1pYSXVhbk1uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJSZFdGdWRHbDBlVk4wYjNKbElHVjRkR1Z1WkhNZ1UzUnZjbVVnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1eGRXRnVkR2wwZVNBOUlHNWxkeUJSZFdGdWRHbDBlU2g3ZlNrN1hHNWNiaUFnSUNCMGFHbHpMbXhwYzNSbGJtVnlJRDBnY1hWaGJuUnBkSGxFYVhOd1lYUmphR1Z5TG5KbFoybHpkR1Z5S0Noc2FYTjBaVzVsY2lrZ1BUNGdlMXh1SUNBZ0lDQWdjM2RwZEdOb0tHeHBjM1JsYm1WeUxuUjVjR1VwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdVWFZoYm5ScGRIbEJZM1JwYjI1ekxsWkJURlZGWDBOSVFVNUhSVVE2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjWFZoYm5ScGRIa2dQU0J1WlhjZ1VYVmhiblJwZEhrb2UxeHVJQ0FnSUNBZ0lDQWdJSFZ1YVhRNklIUm9hWE11Y1hWaGJuUnBkSGt1ZFc1cGRDd2dYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR3hwYzNSbGJtVnlMbVJoZEdGY2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJR05oYzJVZ1VYVmhiblJwZEhsQlkzUnBiMjV6TGxWT1NWUmZRMGhCVGtkRlJEcGNiaUFnSUNBZ0lDQWdkR2hwY3k1eGRXRnVkR2wwZVNBOUlHNWxkeUJSZFdGdWRHbDBlU2g3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUhSb2FYTXVjWFZoYm5ScGRIa3VkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdkVzVwZERvZ2JHbHpkR1Z1WlhJdVpHRjBZVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHBjeTVqYUdGdVoyVW9LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhWdWNtVm5hWE4wWlhKTWFYTjBaVzVsY2lncElIdGNiaUFnSUNCeGRXRnVkR2wwZVVScGMzQmhkR05vWlhJdWRXNXlaV2RwYzNSbGNpaDBhR2x6TG14cGMzUmxibVZ5S1R0Y2JpQWdmVnh1ZlNJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRVoxWld4RGIyNXpkVzF3ZEdsdmJuTWdlMXh1SUNCemRHRjBhV01nWTJGc1l5aDdjWFZoYm5ScGRIazllMzBzSUdScGMzUmhibU5sUFh0OWZTa2dlMXh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0I3WEc0Z0lDQWdJQ0IyWVd4MVpUb2dNQ3hjYmlBZ0lDQWdJSFZ1YVhRNklHQWtlMlJwYzNSaGJtTmxMblZ1YVhSOUx5UjdjWFZoYm5ScGRIa3VkVzVwZEgxZ1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdsbUlDZ2hjWFZoYm5ScGRIa3VkbUZzZFdVZ2ZId2dJV1JwYzNSaGJtTmxMblpoYkhWbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsYzNWc2RDNTJZV3gxWlNBOUlHUnBjM1JoYm1ObExuWmhiSFZsSUM4Z2NYVmhiblJwZEhrdWRtRnNkV1U3WEc1Y2JpQWdJQ0J5WlhOMWJIUXVkbUZzZFdVZ1BTQnlaWE4xYkhRdWRtRnNkV1V1ZEc5VGRISnBibWNvS1M1emRXSnpkSEpwYm1jb01Dd2dNVEFwTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDFjYm4waUxDSnBiWEJ2Y25RZ1pHcHpJR1p5YjIwZ0oyUnZiUzVxY3ljN1hHNWNibWx0Y0c5eWRDQkdkV1ZzUTI5dWMzVnRjSFJwYjI1VGRHOXlaU0JtY205dElDY3VMMloxWld3dFkyOXVjM1Z0Y0hScGIyNHVjM1J2Y21VdWFuTW5PMXh1WEc1c1pYUWdZMjl1Wm1sblRXRndJRDBnZTF4dUlDQm9kRzFzT2lCa2FuTmdYRzRnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbVpsTFdaMVpXd3RZMjl1YzNWdGNIUnBiMjVjSWo1Y2JpQWdJQ0FnSUR4emNHRnVJR05zWVhOelBWd2labVV0YW5NdGRtRnNkV1ZjSWo0NE9Ed3ZjM0JoYmo0Z1BITndZVzRnWTJ4aGMzTTlYQ0ptWlMxMWJtbDBYQ0krUzIwdlREd3ZjM0JoYmo1Y2JpQWdJQ0E4TDJScGRqNWNiaUFnWUZ4dWZUdGNibHh1YkdWMElHVnNaVzFsYm5STllYQWdQU0I3WEc0Z0lDUmpiMjUwWVdsdVpYSTZJRzUxYkd3c1hHNGdJQ1JtZFdWc1EyOXVjM1Z0Y0hScGIyNDZJRzUxYkd3c1hHNGdJQ1JtZFdWc1ZXNXBkRG9nYm5Wc2JDeGNiaUFnSkdaMVpXeFdZV3gxWlRvZ2JuVnNiRnh1ZlR0Y2JseHViR1YwSUdaMVpXeERiMjV6ZFcxd2RHbHZibE4wYjNKbE8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzVwZEUxdlpIVnNaU2drWTI5dWRHRnBibVZ5S1NCN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdaMVpXeERiMjV6ZFcxd2RHbHZiaUE5SUNSamIyNTBZV2x1WlhJdVkzSmxZWFJsS0dOdmJtWnBaMDFoY0M1b2RHMXNLVHRjYmlBZ2MyVjBSV3hsYldWdWRFMWhjQ2drWTI5dWRHRnBibVZ5S1R0Y2JseHVJQ0JtZFdWc1EyOXVjM1Z0Y0hScGIyNVRkRzl5WlNBOUlHNWxkeUJHZFdWc1EyOXVjM1Z0Y0hScGIyNVRkRzl5WlNncE8xeHVYRzRnSUdaMVpXeERiMjV6ZFcxd2RHbHZibE4wYjNKbExtOXVRMmhoYm1kbEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxabkpsYzJoR2RXVnNRMjl1YzNWdGNIUnBiMjRvWm5WbGJFTnZibk4xYlhCMGFXOXVVM1J2Y21VdWNtVnpkV3gwY3lrN1hHNGdJSDBwTzF4dVhHNGdJR1oxWld4RGIyNXpkVzF3ZEdsdmJsTjBiM0psTG1Ob1lXNW5aU2dwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ5WldaeVpYTm9SblZsYkVOdmJuTjFiWEIwYVc5dUtISmxjM1ZzZEhNcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a1puVmxiRlZ1YVhRdWFXNXVaWEpJVkUxTUlEMGdjbVZ6ZFd4MGN5NTFibWwwTzF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJtZFdWc1ZtRnNkV1V1YVc1dVpYSklWRTFNSUQwZ2NtVnpkV3gwY3k1MllXeDFaVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwUld4bGJXVnVkRTFoY0Nna1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpHTnZiblJoYVc1bGNpQTlJQ1JqYjI1MFlXbHVaWEk3WEc0Z0lHVnNaVzFsYm5STllYQXVKR1oxWld4VmJtbDBJRDBnWld4bGJXVnVkRTFoY0M0a1puVmxiRU52Ym5OMWJYQjBhVzl1TG1acGJtUW9KeTVtWlMxMWJtbDBKeWs3WEc0Z0lHVnNaVzFsYm5STllYQXVKR1oxWld4V1lXeDFaU0E5SUdWc1pXMWxiblJOWVhBdUpHWjFaV3hEYjI1emRXMXdkR2x2Ymk1bWFXNWtLQ2N1Wm1VdGFuTXRkbUZzZFdVbktUdGNibjBpTENKcGJYQnZjblFnVTNSdmNtVWdabkp2YlNBbkxpNHZMaTR2ZEc5dmJITXZjM1J2Y21VdWFuTW5PMXh1WEc1cGJYQnZjblFnVW1WemRXeDBjME52Ym5OMWJYQjBhVzl1YzBGamRHbHZibk1nWm5KdmJTQW5MaTR2Y21WemRXeDBjeTVoWTNScGIyNXpMbXB6Snp0Y2JtbHRjRzl5ZENCeVpYTjFiSFJFYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR1TDNKbGMzVnNkSE11WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVjYm1sdGNHOXlkQ0JHZFdWc1EyOXVjM1Z0Y0hScGIyNXpJR1p5YjIwZ0p5NHZablZsYkMxamIyNXpkVzF3ZEdsdmJpNWpiR0Z6Y3k1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFWjFaV3hEYjI1emRXMXdkR2x2YmxOMGIzSmxJR1Y0ZEdWdVpITWdVM1J2Y21VZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dVhHNGdJQ0FnZEdocGN5NXlaWE4xYkhSeklEMGdSblZsYkVOdmJuTjFiWEIwYVc5dWN5NWpZV3hqS0h0OUtUdGNibHh1SUNBZ0lISmxjM1ZzZEVScGMzQmhkR05vWlhJdWNtVm5hWE4wWlhJb0tHeHBjM1JsYm1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0J6ZDJsMFkyZ29iR2x6ZEdWdVpYSXVkSGx3WlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0JTWlhOMWJIUnpRMjl1YzNWdGNIUnBiMjV6UVdOMGFXOXVjeTVTUlZOVlRGUmZRMGhCVGtkRlJEcGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTjFiSFJ6SUQwZ1JuVmxiRU52Ym5OMWJYQjBhVzl1Y3k1allXeGpLR3hwYzNSbGJtVnlMbVJoZEdFcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Ob1lXNW5aU2gwYUdsekxuSmxjM1ZzZEhNcE8xeHVYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OUlpd2lhVzF3YjNKMElHUnFjeUJtY205dElDZGtiMjB1YW5Nbk8xeHVhVzF3YjNKMElDb2dZWE1nWm5WbGJFTnZiWE4xY0hScGIyNGdabkp2YlNBbkxpOW1kV1ZzTFdOdmJuTjFiWEIwYVc5dUwyWjFaV3d0WTI5dWMzVnRjSFJwYjI0dWFuTW5PMXh1YVcxd2IzSjBJRkpsYzNWc2RITlRkRzl5WlNCbWNtOXRJQ2N1TDNKbGMzVnNkSE11YzNSdmNtVXVhbk1uTzF4dVhHNXNaWFFnY21WemRXeDBjMU4wYjNKbE8xeHVYRzVzWlhRZ1kyOXVabWxuVFdGd0lEMGdlMXh1SUNCb2RHMXNPaUJrYW5OZ1hHNGdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltWmxMWEpsYzNWc2RITXRZMjl1ZEdGcGJtVnlYQ0krWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVptVXRhbk10Wm5WbGJDMWpiMjV6ZFcxd2RHbHZibHdpSUhOMGVXeGxQVndpYUdWcFoyaDBPakV3TUNWY0lqNDhMMlJwZGo1Y2JpQWdJQ0E4TDJScGRqNWNiaUFnWUZ4dWZUdGNibHh1YkdWMElHVnNaVzFsYm5STllYQWdQU0I3WEc0Z0lDUmpiMjUwWVdsdVpYSTZJRzUxYkd3c1hHNGdJQ1J5WlhOMWJIUnpRMjl1ZEdGcGJtVnlPaUJ1ZFd4c0xGeHVJQ0FrWm5WbGJFTnZiWE4xY0hScGIyNDZJRzUxYkd4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYm1sMFRXOWtkV3hsS0NSamIyNTBZV2x1WlhJcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a2NtVnpkV3gwYzBOdmJuUmhhVzVsY2lBOUlDUmpiMjUwWVdsdVpYSXVZM0psWVhSbEtHTnZibVpwWjAxaGNDNW9kRzFzS1R0Y2JpQWdjMlYwUld4bGJXVnVkRTFoY0Nna1kyOXVkR0ZwYm1WeUtUdGNibHh1SUNCeVpYTjFiSFJ6VTNSdmNtVWdQU0J1WlhjZ1VtVnpkV3gwYzFOMGIzSmxLQ2s3WEc0Z0lGeHVJQ0JtZFdWc1EyOXRjM1Z3ZEdsdmJpNXBibWwwVFc5a2RXeGxLR1ZzWlcxbGJuUk5ZWEF1SkdaMVpXeERiMjF6ZFhCMGFXOXVLVHRjYmx4dUlDQnlaWE4xYkhSelUzUnZjbVV1ZFhCa1lYUmxVbVZ6ZFd4MGN5Z3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a1kyOXVkR0ZwYm1WeUlEMGdKR052Ym5SaGFXNWxjanRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtablZsYkVOdmJYTjFjSFJwYjI0Z1BTQmxiR1Z0Wlc1MFRXRndMaVJ5WlhOMWJIUnpRMjl1ZEdGcGJtVnlMbVpwYm1Rb0p5NW1aUzFxY3kxbWRXVnNMV052Ym5OMWJYQjBhVzl1SnlrN1hHNTlJaXdpYVcxd2IzSjBJSEpsYzNWc2RITkVhWE53WVhSamFHVnlJR1p5YjIwZ0p5NHZjbVZ6ZFd4MGN5NWthWE53WVhSamFHVnlMbXB6Snp0Y2JtbHRjRzl5ZENCN1pHVm1hVzVsUTI5dWMzUlFjbTl3WlhKMGVYMGdabkp2YlNBbkxpNHZkRzl2YkhNdmRYUnBiSE11YW5Nbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCU1pYTjFiSFJ6UVdOMGFXOXVjeUI3WEc0Z0lITjBZWFJwWXlCamFHRnVaMlZTWlhOMWJIUW9kbUZzZFdVcElIdGNiaUFnSUNCeVpYTjFiSFJ6UkdsemNHRjBZMmhsY2k1a2FYTndZWFJqYUNoN1hHNGdJQ0FnSUNCMGVYQmxPaUJTWlhOMWJIUnpRV04wYVc5dWN5NVNSVk5WVEZSZlEwaEJUa2RGUkN4Y2JpQWdJQ0FnSUdSaGRHRTZJSFpoYkhWbFhHNGdJQ0FnZlNrN1hHNGdJSDFjYm4xY2JseHVaR1ZtYVc1bFEyOXVjM1JRY205d1pYSjBlU2hTWlhOMWJIUnpRV04wYVc5dWN5d2dKMUpGVTFWTVZGOURTRUZPUjBWRUp5d2dVM2x0WW05c0tDa3BPMXh1SWl3aWFXMXdiM0owSUVScGMzQmhkR05vWlhJZ1puSnZiU0FuTGk0dmRHOXZiSE12WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRzVsZHlCRWFYTndZWFJqYUdWeUtDazdJaXdpYVcxd2IzSjBJRk4wYjNKbElHWnliMjBnSnk0dUwzUnZiMnh6TDNOMGIzSmxMbXB6Snp0Y2JseHVhVzF3YjNKMElGRjFZVzUwYVhSNUlHWnliMjBnSnk0dUwzRjFZVzUwYVhSNUwzRjFZVzUwYVhSNUxtTnNZWE56TG1wekp6dGNibWx0Y0c5eWRDQlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NZ1puSnZiU0FuTGk0dmNYVmhiblJwZEhrdmNYVmhiblJwZEhrdVlXTjBhVzl1Y3k1cWN5YzdYRzVwYlhCdmNuUWdjWFZoYm5ScGRIbEVhWE53WVhSamFHVnlJR1p5YjIwZ0p5NHVMM0YxWVc1MGFYUjVMM0YxWVc1MGFYUjVMbVJwYzNCaGRHTm9aWEl1YW5Nbk8xeHVYRzVwYlhCdmNuUWdSR2x6ZEdGdVkyVWdabkp2YlNBbkxpNHZaR2x6ZEdGdVkyVXZaR2x6ZEdGdVkyVXVZMnhoYzNNdWFuTW5PMXh1YVcxd2IzSjBJRVJwYzNSaGJtTmxRV04wYVc5dWN5Qm1jbTl0SUNjdUxpOWthWE4wWVc1alpTOWthWE4wWVc1alpTNWhZM1JwYjI1ekxtcHpKenRjYm1sdGNHOXlkQ0JrYVhOMFlXNWpaVVJwYzNCaGRHTm9aWElnWm5KdmJTQW5MaTR2WkdsemRHRnVZMlV2WkdsemRHRnVZMlV1WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVjYm1sdGNHOXlkQ0JTWlhOMWJIUnpRV04wYVc5dWN5Qm1jbTl0SUNjdUwzSmxjM1ZzZEhNdVlXTjBhVzl1Y3k1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGSmxjM1ZzZEhOVGRHOXlaU0JsZUhSbGJtUnpJRk4wYjNKbElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JseHVJQ0FnSUhSb2FYTXVjWFZoYm5ScGRIa2dQU0J1WlhjZ1VYVmhiblJwZEhrb2UzMHBPMXh1SUNBZ0lIUm9hWE11WkdsemRHRnVZMlVnUFNCdVpYY2dSR2x6ZEdGdVkyVW9lMzBwTzF4dVhHNGdJQ0FnY1hWaGJuUnBkSGxFYVhOd1lYUmphR1Z5TG5KbFoybHpkR1Z5S0Noc2FYTjBaVzVsY2lrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsVVhWaGJuUnBkSGxEYkdGemN5aHNhWE4wWlc1bGNpazdYRzVjYmlBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVW1WemRXeDBjeWdwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnWkdsemRHRnVZMlZFYVhOd1lYUmphR1Z5TG5KbFoybHpkR1Z5S0Noc2FYTjBaVzVsY2lrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsUkdsemRHRnVZMlZEYkdGemN5aHNhWE4wWlc1bGNpazdYRzVjYmlBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVW1WemRXeDBjeWdwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gzVndaR0YwWlZGMVlXNTBhWFI1UTJ4aGMzTW9iR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQnpkMmwwWTJnb2JHbHpkR1Z1WlhJdWRIbHdaU2tnZTF4dUlDQWdJR05oYzJVZ1VYVmhiblJwZEhsQlkzUnBiMjV6TGxaQlRGVkZYME5JUVU1SFJVUTZYRzRnSUNBZ0lDQjBhR2x6TG5GMVlXNTBhWFI1SUQwZ2JtVjNJRkYxWVc1MGFYUjVLSHRjYmlBZ0lDQWdJQ0FnZFc1cGREb2dkR2hwY3k1eGRXRnVkR2wwZVM1MWJtbDBMQ0JjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJR3hwYzNSbGJtVnlMbVJoZEdGY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUdOaGMyVWdVWFZoYm5ScGRIbEJZM1JwYjI1ekxsVk9TVlJmUTBoQlRrZEZSRHBjYmlBZ0lDQWdJSFJvYVhNdWNYVmhiblJwZEhrZ1BTQnVaWGNnVVhWaGJuUnBkSGtvZTF4dUlDQWdJQ0FnSUNCMllXeDFaVG9nZEdocGN5NXhkV0Z1ZEdsMGVTNTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ2RXNXBkRG9nYkdsemRHVnVaWEl1WkdGMFlWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVZMmhoYm1kbEtDazdYRzRnSUgxY2JseHVJQ0JmZFhCa1lYUmxSR2x6ZEdGdVkyVkRiR0Z6Y3loc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUhOM2FYUmphQ2hzYVhOMFpXNWxjaTUwZVhCbEtTQjdYRzRnSUNBZ1kyRnpaU0JFYVhOMFlXNWpaVUZqZEdsdmJuTXVWa0ZNVlVWZlEwaEJUa2RGUkRwY2JpQWdJQ0FnSUhSb2FYTXVaR2x6ZEdGdVkyVWdQU0J1WlhjZ1JHbHpkR0Z1WTJVb2UxeHVJQ0FnSUNBZ0lDQjFibWwwT2lCMGFHbHpMbVJwYzNSaGJtTmxMblZ1YVhRc0lGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JHbHpkR1Z1WlhJdVpHRjBZVnh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdZMkZ6WlNCRWFYTjBZVzVqWlVGamRHbHZibk11VlU1SlZGOURTRUZPUjBWRU9seHVJQ0FnSUNBZ2RHaHBjeTVrYVhOMFlXNWpaU0E5SUc1bGR5QkVhWE4wWVc1alpTaDdYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQjBhR2x6TG1ScGMzUmhibU5sTG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0IxYm1sME9pQnNhWE4wWlc1bGNpNWtZWFJoWEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1amFHRnVaMlVvS1R0Y2JpQWdmVnh1WEc0Z0lIVndaR0YwWlZKbGMzVnNkSE1vS1NCN1hHNGdJQ0FnVW1WemRXeDBjMEZqZEdsdmJuTXVZMmhoYm1kbFVtVnpkV3gwS0h0Y2JpQWdJQ0FnSUhGMVlXNTBhWFI1T2lCMGFHbHpMbkYxWVc1MGFYUjVMRnh1SUNBZ0lDQWdaR2x6ZEdGdVkyVTZJSFJvYVhNdVpHbHpkR0Z1WTJWY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlNJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRVJwYzNCaGRHTm9aWElnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0IwYUdsekxsOXNhWE4wWlc1bGNuTWdQU0J1WlhjZ1RXRndLQ2s3WEc0Z0lIMWNibHh1SUNCa2FYTndZWFJqYUNodlltb3BJSHRjYmlBZ0lDQjBhR2x6TGw5c2FYTjBaVzVsY25NdVptOXlSV0ZqYUNnb2JHbHpkR1Z1WlhJcElEMCtJR3hwYzNSbGJtVnlLRzlpYWlrcE8xeHVJQ0I5WEc1Y2JpQWdjbVZuYVhOMFpYSW9ZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQnNaWFFnYkdsemRHVnVaWElnUFNCVGVXMWliMndvS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMnhwYzNSbGJtVnljeTV6WlhRb2JHbHpkR1Z1WlhJc0lHTmhiR3hpWVdOcktUdGNibHh1SUNBZ0lISmxkSFZ5YmlCc2FYTjBaVzVsY2p0Y2JpQWdmVnh1WEc0Z0lIVnVjbVZuYVhOMFpYSW9iR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkdsemRHVnVaWEp6TG1SbGJHVjBaU2hzYVhOMFpXNWxjaWs3WEc0Z0lIMWNibjBpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlRkRzl5WlNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMnhwYzNSbGJtVnljeUE5SUc1bGR5Qk5ZWEFvS1R0Y2JpQWdmVnh1WEc0Z0lHTm9ZVzVuWlNncElIdGNiaUFnSUNCMGFHbHpMbDlzYVhOMFpXNWxjbk11Wm05eVJXRmphQ2dvYkdsemRHVnVaWElwSUQwK0lHeHBjM1JsYm1WeUtDa3BPMXh1SUNCOVhHNWNiaUFnYjI1RGFHRnVaMlVvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JzWlhRZ2JHbHpkR1Z1WlhJZ1BTQlRlVzFpYjJ3b0tUdGNibHh1SUNBZ0lIUm9hWE11WDJ4cGMzUmxibVZ5Y3k1elpYUW9iR2x6ZEdWdVpYSXNJR05oYkd4aVlXTnJLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnNhWE4wWlc1bGNqdGNiaUFnZlZ4dVhHNGdJSFZ1Y21WbmFYTjBaWEpEYUdGdVoyVW9iR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkdsemRHVnVaWEp6TG1SbGJHVjBaU2hzYVhOMFpXNWxjaWs3WEc0Z0lIMWNibjBpTENKbGVIQnZjblFnWm5WdVkzUnBiMjRnWkdWbWFXNWxRMjl1YzNSUWNtOXdaWEowZVNodlltb3NJSEJ5YjNBc0lIWmhiSFZsS1NCN1hHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodlltb3NJSEJ5YjNBc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJSGR5YVhSaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExGeHVJQ0FnSUhaaGJIVmxPaUIyWVd4MVpWeHVJQ0I5S1R0Y2JuMGlYWDA9XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
