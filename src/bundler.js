!function e(t,n,u){function i(a,s){if(!n[a]){if(!t[a]){var o="function"==typeof require&&require;if(!s&&o)return o(a,!0);if(r)return r(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return i(n?n:e)},c,c.exports,e,t,n,u)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<u.length;a++)i(u[a]);return i}({1:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e){if("string"==typeof e)return(0,l.find)(e);if(Array.isArray(e)){for(var t=arguments.length,n=Array(t>1?t-1:0),u=1;t>u;u++)n[u-1]=arguments[u];return s["default"].apply(void 0,[e].concat(n))}}Object.defineProperty(n,"__esModule",{value:!0});var a=e("../util/html.js"),s=i(a),o=e("./manipulation.js"),l=e("./find.js"),c=e("./styles.js"),f=u(c);r.create=o.create,r.css=f.css,r.addClass=f.addClass,r.removeClass=f.removeClass,r.toggleClass=f.toggleClass,r.containsClass=f.containsClass,r.find=l.find,r.findAll=l.findAll,r.remove=o.remove,n["default"]=r},{"../util/html.js":7,"./find.js":3,"./manipulation.js":4,"./styles.js":5}],2:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return e?(e.find=function(t){return a["default"].find(t,e)},e.findAll=function(t){return a["default"].findAll(t,e)},e.create=function(t){var n=a["default"].create(t);return e.appendChild(n),n},e.css=function(t){return a["default"].css(e,t)},e.addClass=function(t){return a["default"].addClass(e,t)},e.removeClass=function(t){return a["default"].removeClass(e,t)},e.toggleClass=function(t,n){return a["default"].toggleClass(e,t,n)},e.containsClass=function(t){return a["default"].containsClass(e,t)},e.remove=function(){var t=arguments.length<=0||void 0===arguments[0]?e:arguments[0],n=a["default"].remove(t);return e=null,n},e):null}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=i;var r=e("./d.js"),a=u(r)},{"./d.js":1}],3:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return(0,s["default"])(t.querySelector(e))}function r(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return t.querySelectorAll(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.find=i,n.findAll=r;var a=e("./djsfy"),s=u(a)},{"./djsfy":2}],4:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var t=document.createDocumentFragment(),n=t.appendChild(document.createElement("div"));return n.innerHTML=e.trim(),1===n.childNodes.length&&(n=n.lastChild),(0,s["default"])(n.cloneNode(!0))}function r(e){return e.parentNode?e.parentNode.removeChild(e):null}Object.defineProperty(n,"__esModule",{value:!0}),n.create=i,n.remove=r;var a=e("./djsfy.js"),s=u(a)},{"./djsfy.js":2}],5:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!e||8===e.nodeType||3===e.nodeType||!e.style)return null;for(var n in t)if(Object.hasOwnProperty.call(t,n)){var u=y({styleList:e.style,styleToCheck:n});u&&(e.style[u]=t[n])}return(0,h["default"])(e)}function r(e,t){var n=e.getAttribute("class")||"";if(t=p(t)||[],t instanceof Array)for(var u=0,i=t.length;i>u;u++){if(!t[u].trim())throw new SyntaxError("djs.addClass(): Empty strings are not valid class name");d(n,t[u])||(n+=" "+t[u].trim())}return e.setAttribute("class",n.trim()),(0,h["default"])(e)}function a(e,t){if(!e)throw new Error("The element must be not empty.");return c(t),d(e.getAttribute("class"),t)}function s(e,t){var n=l(e);if(t=p(t)||[],!n.length||!t.length)return(0,h["default"])(e);if(t instanceof Array)e:for(var u=0,i=t.length;i>u;u++){var r=t[u];c(r);for(var a=0,s=n.length;s>a;a++)if(r===n[a]){n.splice(a,1);continue e}}return e.setAttribute("class",n.join(" ")),(0,h["default"])(e)}function o(e,t,n){if(!e)throw new Error("The element must be not empty.");c(t);var u=l(e);return d(u,t)?n||s(e,t):n!==!1&&r(e,t),(0,h["default"])(e)}function l(e){return p(e.getAttribute("class"))||[]}function c(e){if(!e)throw new Error("The className provided ('"+e+"') must be not empty.");if(f(e))throw new Error("The className provided ('"+e+"') contains HTML space characters, which are not valid.")}function f(e){return e.match(/\s/)}function d(e,t){e=p(e)||[];for(var n=0,u=e.length;u>n;n++)if(e[n].trim()===t.trim())return!0;return!1}function p(e){return"string"==typeof e&&(e=e.split(" ")),e}function y(e){var t=e.styleList,n=e.styleToCheck;if(n in t)return n;if(n in C)return C[n];for(var u=0,i=O.length;i>u;u++){var r=""+O[u]+n[0].toUpperCase()+n.substring(1);if(r in t)return C[n]=r,C[n]}return!1}Object.defineProperty(n,"__esModule",{value:!0}),n.css=i,n.addClass=r,n.containsClass=a,n.removeClass=s,n.toggleClass=o;var v=e("./djsfy"),h=u(v),j="ms",_="webkit",b="moz",m="o",g="xv",w="khtml",O=[j,_,b,m,g,w],C={"float":"cssFloat"}},{"./djsfy":2}],6:[function(e,t,n){(function(u){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("./djs/d.js"),a=i(r);"object"==typeof n&&"undefined"!=typeof t?t.exports=a["default"]:"function"==typeof define&&define.amd&&define([],function(){return a["default"]});var s=void 0;s="undefined"!=typeof window?window:"undefined"!=typeof u?u:"undefined"!=typeof self?self:void 0,s.djs=a["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./djs/d.js":1}],7:[function(e,t,n){"use strict";function u(e){for(var t=e.raw,n=void 0,u=arguments.length,r=Array(u>1?u-1:0),a=1;u>a;a++)r[a-1]=arguments[a];return n=r.reduce(function(e,n,u){var r=t[u];return n=Array.isArray(n)?n.join(""):n+"","$"===r[r.length-1]&&(n=i(n),r=r.slice(0,-1)),e+=r,e+=n},""),n+=t[t.length-1]}function i(e){return e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quote;").replace(/'/g,"&#39;").replace(/`/g,"&#96;")}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=u},{}],8:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./distance.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./distance.dispatcher.js":10}],9:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(t){var n=t.unit,i=void 0===n?"Km":n,r=t.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=r},{}],10:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],11:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){j.$distance=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.distance.unit)}),p["default"].changeUnit("Km"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$distance.find(".fe-distance__input"),j.$unit=j.$distance.find(".fe-distance__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=i(['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="text">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="text">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var c=e("dom.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$distance:null,$input:null,$unit:null},_=void 0},{"./distance.actions.js":8,"./distance.store.js":12,"dom.js":6}],12:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./distance.class.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.dispatcher.js"),v=u(y),h=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.distance=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.distance=new f["default"]({unit:e.distance.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.distance=new f["default"]({value:e.distance.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./distance.actions.js":8,"./distance.class.js":9,"./distance.dispatcher.js":10}],13:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){e.create(l.html)}var a=i(['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  '],['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var s=e("dom.js"),o=u(s),l={html:(0,o["default"])(a)}},{"dom.js":6}],14:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("dom.js"),a=i(r),s=e("./header/header.js"),o=u(s),l=e("./inputs/inputs-container.js"),c=u(l),f=e("./results/results-container.js"),d=u(f),p=(0,a["default"])(".fe-js-header"),y=(0,a["default"])(".fe-js-inputs-container"),v=(0,a["default"])(".fe-js-results-container");o.initModule(p),c.initModule(y),d.initModule(v)},{"./header/header.js":13,"./inputs/inputs-container.js":15,"./results/results-container.js":24,"dom.js":6}],15:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){h.$inputContainer=e.create(v.html),s(e),d.initModule(h.$inputQuantity),y.initModule(h.$inputDistance)}function s(e){h.$container=e,h.$inputQuantity=h.$inputContainer.find(".fe-js-quantity"),h.$inputDistance=h.$inputContainer.find(".fe-js-distance")}var o=r(['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  '],['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=i(l),f=e("../quantity/quantity.js"),d=u(f),p=e("../distance/distance.js"),y=u(p),v={html:(0,c["default"])(o)},h={$container:null,$inputContainer:null,$inputQuantity:null,$inputDistance:null}},{"../distance/distance.js":11,"../quantity/quantity.js":19,"dom.js":6}],16:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./quantity.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./quantity.dispatcher.js":18}],17:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(t){var n=t.unit,i=void 0===n?"L":n,r=t.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=r},{}],18:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],19:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){j.$quantity=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.quantity.unit)}),p["default"].changeUnit("L"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$quantity.find(".fe-quantity__input"),j.$unit=j.$quantity.find(".fe-quantity__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=i(['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="text">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="text">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var c=e("dom.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$quantity:null,$input:null,$unit:null},_=void 0},{"./quantity.actions.js":16,"./quantity.store.js":20,"dom.js":6}],20:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./quantity.class.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.dispatcher.js"),v=u(y),h=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.quantity=new f["default"]({unit:e.quantity.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.quantity=new f["default"]({value:e.quantity.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./quantity.actions.js":16,"./quantity.class.js":17,"./quantity.dispatcher.js":18}],21:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e)}return i(e,null,[{key:"calc",value:function(e){var t=e.quantity,n=void 0===t?{}:t,u=e.distance,i=void 0===u?{}:u,r={value:0,unit:i.unit+"/"+n.unit};return n.value&&i.value?(r.value=i.value/n.value,r.value=r.value.toString().substring(0,10),r):r}}]),e}();n["default"]=r},{}],22:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){y.$fuelConsumption=e.create(p.html),s(e),v=new d["default"],v.onChange(function(){a(v.results)}),v.change()}function a(e){y.$fuelUnit.innerHTML=e.unit,y.$fuelValue.innerHTML=e.value}function s(e){y.$container=e,y.$fuelUnit=y.$fuelConsumption.find(".fe-unit"),y.$fuelValue=y.$fuelConsumption.find(".fe-js-value")}var o=i(['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  '],['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var l=e("dom.js"),c=u(l),f=e("./fuel-consumption.store.js"),d=u(f),p={html:(0,c["default"])(o)},y={$container:null,$fuelConsumption:null,$fuelUnit:null,$fuelValue:null},v=void 0},{"./fuel-consumption.store.js":23,"dom.js":6}],23:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../../tools/store.js"),o=u(s),l=e("../results.actions.js"),c=u(l),f=e("../results.dispatcher.js"),d=u(f),p=e("./fuel-consumption.class.js"),y=u(p),v=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.results=y["default"].calc({}),d["default"].register(function(t){switch(t.type){case c["default"].RESULT_CHANGED:e.results=y["default"].calc(t.data),e.change(e.results)}}),e}return a(t,e),t}(o["default"]);n["default"]=v},{"../../tools/store.js":29,"../results.actions.js":25,"../results.dispatcher.js":26,"./fuel-consumption.class.js":21}],24:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){j.$resultsContainer=e.create(h.html),s(e),v=new y["default"],d.initModule(j.$fuelComsuption),v.updateResults()}function s(e){j.$container=e,j.$fuelComsuption=j.$resultsContainer.find(".fe-js-fuel-consumption")}var o=r(['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  '],['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=i(l),f=e("./fuel-consumption/fuel-consumption.js"),d=u(f),p=e("./results.store.js"),y=i(p),v=void 0,h={html:(0,c["default"])(o)},j={$container:null,$resultsContainer:null,$fuelComsuption:null}},{"./fuel-consumption/fuel-consumption.js":22,"./results.store.js":27,"dom.js":6}],25:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./results.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeResult",value:function(t){s["default"].dispatch({type:e.RESULT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"RESULT_CHANGED",Symbol())},{"../tools/utils.js":30,"./results.dispatcher.js":26}],26:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],27:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("../quantity/quantity.class.js"),f=u(c),d=e("../quantity/quantity.actions.js"),p=u(d),y=e("../quantity/quantity.dispatcher.js"),v=u(y),h=e("../distance/distance.class.js"),j=u(h),_=e("../distance/distance.actions.js"),b=u(_),m=e("../distance/distance.dispatcher.js"),g=u(m),w=e("./results.actions.js"),O=u(w),C=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.distance=new j["default"]({}),v["default"].register(function(t){e._updateQuantityClass(t),e.updateResults()}),g["default"].register(function(t){e._updateDistanceClass(t),e.updateResults()}),e}return a(t,e),s(t,[{key:"_updateQuantityClass",value:function(e){switch(e.type){case p["default"].VALUE_CHANGED:this.quantity=new f["default"]({unit:this.quantity.unit,value:e.data});break;case p["default"].UNIT_CHANGED:this.quantity=new f["default"]({value:this.quantity.value,unit:e.data})}this.change()}},{key:"_updateDistanceClass",value:function(e){switch(e.type){case b["default"].VALUE_CHANGED:this.distance=new j["default"]({unit:this.distance.unit,value:e.data});break;case b["default"].UNIT_CHANGED:this.distance=new j["default"]({value:this.distance.value,unit:e.data})}this.change()}},{key:"updateResults",value:function(){O["default"].changeResult({quantity:this.quantity,distance:this.distance})}}]),t}(l["default"]);n["default"]=C},{"../distance/distance.actions.js":8,"../distance/distance.class.js":9,"../distance/distance.dispatcher.js":10,"../quantity/quantity.actions.js":16,"../quantity/quantity.class.js":17,"../quantity/quantity.dispatcher.js":18,"../tools/store.js":29,"./results.actions.js":25}],28:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e),this._listeners=new Map}return i(e,[{key:"dispatch",value:function(e){this._listeners.forEach(function(t){return t(e)})}},{key:"register",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregister",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=r},{}],29:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e),this._listeners=new Map}return i(e,[{key:"change",value:function(){this._listeners.forEach(function(e){return e()})}},{key:"onChange",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregisterChange",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=r},{}],30:[function(e,t,n){"use strict";function u(e,t,n){Object.defineProperty(e,t,{enumerable:!0,writable:!1,configurable:!1,value:n})}Object.defineProperty(n,"__esModule",{value:!0}),n.defineConstProperty=u},{}]},{},[14]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1bmRsZXIuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlZmF1bHQiLCJkanMiLCJ0ZW1wbGF0ZSIsIl9maW5kIiwiZmluZCIsIkFycmF5IiwiaXNBcnJheSIsIl9sZW4iLCJhcmd1bWVudHMiLCJzdWJzdHMiLCJfa2V5IiwiX2h0bWwyIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2h0bWwiLCJfbWFuaXB1bGF0aW9uIiwiX3N0eWxlcyIsInN0eWxlcyIsImNyZWF0ZSIsImNzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImNvbnRhaW5zQ2xhc3MiLCJmaW5kQWxsIiwicmVtb3ZlIiwiLi4vdXRpbC9odG1sLmpzIiwiLi9maW5kLmpzIiwiLi9tYW5pcHVsYXRpb24uanMiLCIuL3N0eWxlcy5qcyIsMiwiZGpzZnkiLCJub2RlIiwic3RyaW5nIiwiX2QyIiwiZWxlbWVudCIsImFwcGVuZENoaWxkIiwiY3NzU3R5bGVzIiwiY2xhc3NMaXN0IiwiY2xhc3NUb1JlbW92ZSIsImNsYXNzTmFtZSIsImZvcmNlIiwibm9kZVRvUmVtb3ZlIiwib2xkTm9kZSIsIl9kIiwiLi9kLmpzIiwzLCJyb290RWxlbWVudCIsImRvY3VtZW50IiwiX2Rqc2Z5MiIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2Rqc2Z5IiwiLi9kanNmeSIsNCwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInRyaW0iLCJjaGlsZE5vZGVzIiwibGFzdENoaWxkIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiLi9kanNmeS5qcyIsNSwibm9kZVR5cGUiLCJzdHlsZSIsImtleVByZWZpeGVkIiwiZ2V0U3R5bGVXaXRoUHJlZml4S2V5Iiwic3R5bGVMaXN0Iiwic3R5bGVUb0NoZWNrIiwiY3VycmVudENsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInBhcnNlQXJyYXkiLCJTeW50YXhFcnJvciIsImNvbnRhaW5zQ2xhc3NJbnRvTGlzdCIsInNldEF0dHJpYnV0ZSIsImFzc2VydENsYXNzTmFtZSIsImdldEN1cnJlbnRDbGFzc0xpc3QiLCJjbGFzc1RvUmVtb3ZlSW50ZXJhY3Rpb24iLCJ5IiwiX2xlbmd0aCIsInNwbGljZSIsImpvaW4iLCJjb250YWluc1doaXRlc3BhY2VzIiwibWF0Y2giLCJjbGFzc1RvQ2hlY2siLCJzcGxpdCIsIl9yZWYiLCJDU1NfUFJFRklYRUQiLCJQUkVGSVhJRVMiLCJzdHlsZVdpdGhQcmVmaXgiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIk1TIiwiV0VCS0lUIiwiTU9aIiwiTyIsIlhWIiwiS0hUTUwiLCJmbG9hdCIsNiwiZ2xvYmFsIiwiZGVmaW5lIiwiYW1kIiwiX2dsb2JhbCIsIndpbmRvdyIsInNlbGYiLCJ0aGlzIiwiLi9kanMvZC5qcyIsNywiaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZyIsInRlbXBsYXRlT2JqZWN0IiwicmF3IiwicmVzdWx0IiwicmVkdWNlIiwic3Vic3QiLCJsaXQiLCJodG1sRXNjYXBlIiwic2xpY2UiLCJzdHIiLCJyZXBsYWNlIiw4LCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9kaXN0YW5jZURpc3BhdGNoZXIiLCJfZGlzdGFuY2VEaXNwYXRjaGVyMiIsIl91dGlscyIsIkRpc3RhbmNlQWN0aW9ucyIsImRpc3BhdGNoIiwidHlwZSIsIlZBTFVFX0NIQU5HRUQiLCJkYXRhIiwidW5pdCIsIlVOSVRfQ0hBTkdFRCIsImRlZmluZUNvbnN0UHJvcGVydHkiLCJTeW1ib2wiLCIuLi90b29scy91dGlscy5qcyIsIi4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qcyIsOSwiRGlzdGFuY2UiLCJfcmVmJHVuaXQiLCJfcmVmJHZhbHVlIiwicGFyc2VJbnQiLDEwLCJfZGlzcGF0Y2hlciIsIl9kaXNwYXRjaGVyMiIsIi4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMiLDExLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwic3RyaW5ncyIsImZyZWV6ZSIsImluaXRNb2R1bGUiLCIkY29udGFpbmVyIiwiZWxlbWVudE1hcCIsIiRkaXN0YW5jZSIsImNvbmZpZ01hcCIsImh0bWwiLCJzZXRFbGVtZW50TWFwIiwic2V0RWxlbWVudEhhbmRsZXJzIiwiZGlzdGFuY2VTdG9yZSIsIl9kaXN0YW5jZVN0b3JlMiIsIm9uQ2hhbmdlIiwicmVmcmVzaFVuaXQiLCJkaXN0YW5jZSIsIl9kaXN0YW5jZUFjdGlvbnMyIiwiY2hhbmdlVW5pdCIsInVucmVnaXN0ZXJMaXN0ZW5lciIsIiR1bml0IiwiJGlucHV0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY2hhbmdlVmFsdWUiLCJfdGVtcGxhdGVPYmplY3QiLCJfZG9tIiwiX2RvbTIiLCJfZGlzdGFuY2VBY3Rpb25zIiwiX2Rpc3RhbmNlU3RvcmUiLCIuL2Rpc3RhbmNlLmFjdGlvbnMuanMiLCIuL2Rpc3RhbmNlLnN0b3JlLmpzIiwiZG9tLmpzIiwxMiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc3RvcmUiLCJfc3RvcmUyIiwiX2Rpc3RhbmNlQ2xhc3MiLCJfZGlzdGFuY2VDbGFzczIiLCJEaXN0YW5jZVN0b3JlIiwiX1N0b3JlIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsImxpc3RlbmVyIiwicmVnaXN0ZXIiLCJjaGFuZ2UiLCJ1bnJlZ2lzdGVyIiwiLi4vdG9vbHMvc3RvcmUuanMiLCIuL2Rpc3RhbmNlLmNsYXNzLmpzIiwxMywxNCwiX2hlYWRlciIsImhlYWRlciIsIl9pbnB1dHNDb250YWluZXIiLCJpbnB1dHNDb250YWluZXIiLCJfcmVzdWx0c0NvbnRhaW5lciIsInJlc3VsdHNDb250YWluZXIiLCIkaGVhZGVyQ29udGFpbmVyIiwiJGlucHV0c0NvbnRhaW5lciIsIiRyZXN1bHRzQ29udGFpbmVyIiwiLi9oZWFkZXIvaGVhZGVyLmpzIiwiLi9pbnB1dHMvaW5wdXRzLWNvbnRhaW5lci5qcyIsIi4vcmVzdWx0cy9yZXN1bHRzLWNvbnRhaW5lci5qcyIsMTUsIiRpbnB1dENvbnRhaW5lciIsInF1YW50aXR5IiwiJGlucHV0UXVhbnRpdHkiLCIkaW5wdXREaXN0YW5jZSIsIl9xdWFudGl0eSIsIl9kaXN0YW5jZSIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzIiwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuanMiLDE2LCJfcXVhbnRpdHlEaXNwYXRjaGVyIiwiX3F1YW50aXR5RGlzcGF0Y2hlcjIiLCJRdWFudGl0eUFjdGlvbnMiLCIuL3F1YW50aXR5LmRpc3BhdGNoZXIuanMiLDE3LCJRdWFudGl0eSIsMTgsMTksIiRxdWFudGl0eSIsInF1YW50aXR5U3RvcmUiLCJfcXVhbnRpdHlTdG9yZTIiLCJfcXVhbnRpdHlBY3Rpb25zMiIsIl9xdWFudGl0eUFjdGlvbnMiLCJfcXVhbnRpdHlTdG9yZSIsIi4vcXVhbnRpdHkuYWN0aW9ucy5qcyIsIi4vcXVhbnRpdHkuc3RvcmUuanMiLDIwLCJfcXVhbnRpdHlDbGFzcyIsIl9xdWFudGl0eUNsYXNzMiIsIlF1YW50aXR5U3RvcmUiLCIuL3F1YW50aXR5LmNsYXNzLmpzIiwyMSwiRnVlbENvbnN1bXB0aW9ucyIsIl9yZWYkcXVhbnRpdHkiLCJfcmVmJGRpc3RhbmNlIiwidG9TdHJpbmciLDIyLCIkZnVlbENvbnN1bXB0aW9uIiwiZnVlbENvbnN1bXB0aW9uU3RvcmUiLCJfZnVlbENvbnN1bXB0aW9uU3RvcmUyIiwicmVmcmVzaEZ1ZWxDb25zdW1wdGlvbiIsInJlc3VsdHMiLCIkZnVlbFVuaXQiLCIkZnVlbFZhbHVlIiwiX2Z1ZWxDb25zdW1wdGlvblN0b3JlIiwiLi9mdWVsLWNvbnN1bXB0aW9uLnN0b3JlLmpzIiwyMywiX3Jlc3VsdHNBY3Rpb25zIiwiX3Jlc3VsdHNBY3Rpb25zMiIsIl9yZXN1bHRzRGlzcGF0Y2hlciIsIl9yZXN1bHRzRGlzcGF0Y2hlcjIiLCJfZnVlbENvbnN1bXB0aW9uQ2xhc3MiLCJfZnVlbENvbnN1bXB0aW9uQ2xhc3MyIiwiRnVlbENvbnN1bXB0aW9uU3RvcmUiLCJjYWxjIiwiUkVTVUxUX0NIQU5HRUQiLCIuLi8uLi90b29scy9zdG9yZS5qcyIsIi4uL3Jlc3VsdHMuYWN0aW9ucy5qcyIsIi4uL3Jlc3VsdHMuZGlzcGF0Y2hlci5qcyIsIi4vZnVlbC1jb25zdW1wdGlvbi5jbGFzcy5qcyIsMjQsInJlc3VsdHNTdG9yZSIsIl9yZXN1bHRzU3RvcmUyIiwiZnVlbENvbXN1cHRpb24iLCIkZnVlbENvbXN1cHRpb24iLCJ1cGRhdGVSZXN1bHRzIiwiX2Z1ZWxDb25zdW1wdGlvbiIsIl9yZXN1bHRzU3RvcmUiLCIuL2Z1ZWwtY29uc3VtcHRpb24vZnVlbC1jb25zdW1wdGlvbi5qcyIsIi4vcmVzdWx0cy5zdG9yZS5qcyIsMjUsIlJlc3VsdHNBY3Rpb25zIiwiLi9yZXN1bHRzLmRpc3BhdGNoZXIuanMiLDI2LDI3LCJSZXN1bHRzU3RvcmUiLCJfdXBkYXRlUXVhbnRpdHlDbGFzcyIsIl91cGRhdGVEaXN0YW5jZUNsYXNzIiwiY2hhbmdlUmVzdWx0IiwiLi4vZGlzdGFuY2UvZGlzdGFuY2UuYWN0aW9ucy5qcyIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmNsYXNzLmpzIiwiLi4vZGlzdGFuY2UvZGlzdGFuY2UuZGlzcGF0Y2hlci5qcyIsIi4uL3F1YW50aXR5L3F1YW50aXR5LmFjdGlvbnMuanMiLCIuLi9xdWFudGl0eS9xdWFudGl0eS5jbGFzcy5qcyIsIi4uL3F1YW50aXR5L3F1YW50aXR5LmRpc3BhdGNoZXIuanMiLCIuL3Jlc3VsdHMuYWN0aW9ucy5qcyIsMjgsIkRpc3BhdGNoZXIiLCJfbGlzdGVuZXJzIiwiTWFwIiwiZm9yRWFjaCIsImNhbGxiYWNrIiwic2V0IiwyOSwiU3RvcmUiLDMwLCJwcm9wIl0sIm1hcHBpbmdzIjoiQ0FBQSxRQUFVQSxHQUFFQyxFQUFFQyxFQUFFQyxHQUFHLFFBQVNDLEdBQUVDLEVBQUVDLEdBQUcsSUFBSUosRUFBRUcsR0FBRyxDQUFDLElBQUlKLEVBQUVJLEdBQUcsQ0FBQyxHQUFJRSxHQUFrQixrQkFBVEMsVUFBcUJBLE9BQVEsS0FBSUYsR0FBR0MsRUFBRSxNQUFPQSxHQUFFRixHQUFFLEVBQUksSUFBR0ksRUFBRSxNQUFPQSxHQUFFSixHQUFFLEVBQUksSUFBSUssR0FBRSxHQUFJQyxPQUFNLHVCQUF1Qk4sRUFBRSxJQUFLLE1BQU1LLEdBQUVFLEtBQUssbUJBQW1CRixFQUFFLEdBQUlHLEdBQUVYLEVBQUVHLElBQUlTLFdBQVliLEdBQUVJLEdBQUcsR0FBR1UsS0FBS0YsRUFBRUMsUUFBUSxTQUFTZCxHQUFHLEdBQUlFLEdBQUVELEVBQUVJLEdBQUcsR0FBR0wsRUFBRyxPQUFPSSxHQUFFRixFQUFFQSxFQUFFRixJQUFJYSxFQUFFQSxFQUFFQyxRQUFRZCxFQUFFQyxFQUFFQyxFQUFFQyxHQUFHLE1BQU9ELEdBQUVHLEdBQUdTLFFBQWtELElBQUksR0FBMUNMLEdBQWtCLGtCQUFURCxVQUFxQkEsUUFBZ0JILEVBQUUsRUFBRUEsRUFBRUYsRUFBRWEsT0FB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QnNHLE9BSTNCa0gsSUFHVHZWLEdBQUFBLFdBQWtCdVYsT0FFWkMsSUFBSSxTQUFTOVYsRUFBUVUsRUFBT0osR0FDbEMsWUFNQSxTQUFTc0ssR0FBb0JoSyxFQUFLbVYsRUFBTTNULEdBQ3RDcEIsT0FBT21CLGVBQWV2QixFQUFLbVYsR0FDekJsTSxZQUFZLEVBQ1pFLFVBQVUsRUFDVkQsY0FBYyxFQUNkMUgsTUFBT0EsSUFUWHBCLE9BQU9tQixlQUFlN0IsRUFBUyxjQUM3QjhCLE9BQU8sSUFFVDlCLEVBQVFzSyxvQkFBc0JBLFlBVW5CIiwiZmlsZSI6ImJ1bmRsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaHRtbCA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbC5qcycpO1xuXG52YXIgX2h0bWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHRtbCk7XG5cbnZhciBfbWFuaXB1bGF0aW9uID0gcmVxdWlyZSgnLi9tYW5pcHVsYXRpb24uanMnKTtcblxudmFyIF9maW5kID0gcmVxdWlyZSgnLi9maW5kLmpzJyk7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZSgnLi9zdHlsZXMuanMnKTtcblxudmFyIHN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zdHlsZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBkanModGVtcGxhdGUpIHtcbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gKDAsIF9maW5kLmZpbmQpKHRlbXBsYXRlKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRlbXBsYXRlKSkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdWJzdHMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBzdWJzdHNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfaHRtbDIuZGVmYXVsdC5hcHBseSh1bmRlZmluZWQsIFt0ZW1wbGF0ZV0uY29uY2F0KHN1YnN0cykpO1xuICB9XG59XG5cbmRqcy5jcmVhdGUgPSBfbWFuaXB1bGF0aW9uLmNyZWF0ZTtcbmRqcy5jc3MgPSBzdHlsZXMuY3NzO1xuZGpzLmFkZENsYXNzID0gc3R5bGVzLmFkZENsYXNzO1xuZGpzLnJlbW92ZUNsYXNzID0gc3R5bGVzLnJlbW92ZUNsYXNzO1xuZGpzLnRvZ2dsZUNsYXNzID0gc3R5bGVzLnRvZ2dsZUNsYXNzO1xuZGpzLmNvbnRhaW5zQ2xhc3MgPSBzdHlsZXMuY29udGFpbnNDbGFzcztcbmRqcy5maW5kID0gX2ZpbmQuZmluZDtcbmRqcy5maW5kQWxsID0gX2ZpbmQuZmluZEFsbDtcbmRqcy5yZW1vdmUgPSBfbWFuaXB1bGF0aW9uLnJlbW92ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZGpzO1xufSx7XCIuLi91dGlsL2h0bWwuanNcIjo3LFwiLi9maW5kLmpzXCI6MyxcIi4vbWFuaXB1bGF0aW9uLmpzXCI6NCxcIi4vc3R5bGVzLmpzXCI6NX1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGpzZnk7XG5cbnZhciBfZCA9IHJlcXVpcmUoJy4vZC5qcycpO1xuXG52YXIgX2QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGRqc2Z5KG5vZGUpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDtcblxuICBub2RlLmZpbmQgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmZpbmQoc3RyaW5nLCBub2RlKTtcbiAgfTtcbiAgbm9kZS5maW5kQWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5maW5kQWxsKHN0cmluZywgbm9kZSk7XG4gIH07XG4gIG5vZGUuY3JlYXRlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBlbGVtZW50ID0gX2QyLmRlZmF1bHQuY3JlYXRlKHN0cmluZyk7XG5cbiAgICBub2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG5cbiAgbm9kZS5jc3MgPSBmdW5jdGlvbiAoY3NzU3R5bGVzKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmNzcyhub2RlLCBjc3NTdHlsZXMpO1xuICB9O1xuICBub2RlLmFkZENsYXNzID0gZnVuY3Rpb24gKGNsYXNzTGlzdCkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5hZGRDbGFzcyhub2RlLCBjbGFzc0xpc3QpO1xuICB9O1xuICBub2RlLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzVG9SZW1vdmUpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQucmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NUb1JlbW92ZSk7XG4gIH07XG4gIG5vZGUudG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lLCBmb3JjZSkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC50b2dnbGVDbGFzcyhub2RlLCBjbGFzc05hbWUsIGZvcmNlKTtcbiAgfTtcbiAgbm9kZS5jb250YWluc0NsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5jb250YWluc0NsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gIH07XG4gIG5vZGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBub2RlVG9SZW1vdmUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBub2RlIDogYXJndW1lbnRzWzBdO1xuXG4gICAgdmFyIG9sZE5vZGUgPSBfZDIuZGVmYXVsdC5yZW1vdmUobm9kZVRvUmVtb3ZlKTtcbiAgICBub2RlID0gbnVsbDtcblxuICAgIHJldHVybiBvbGROb2RlO1xuICB9O1xuXG4gIHJldHVybiBub2RlO1xufVxufSx7XCIuL2QuanNcIjoxfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZXhwb3J0cy5maW5kQWxsID0gZmluZEFsbDtcblxudmFyIF9kanNmeSA9IHJlcXVpcmUoJy4vZGpzZnknKTtcblxudmFyIF9kanNmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kanNmeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGZpbmQoc3RyaW5nKSB7XG4gIHZhciByb290RWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGRvY3VtZW50IDogYXJndW1lbnRzWzFdO1xuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShyb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKHN0cmluZykpO1xufVxuXG5mdW5jdGlvbiBmaW5kQWxsKHN0cmluZykge1xuICB2YXIgcm9vdEVsZW1lbnQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBkb2N1bWVudCA6IGFyZ3VtZW50c1sxXTtcblxuICByZXR1cm4gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzdHJpbmcpO1xufVxufSx7XCIuL2Rqc2Z5XCI6Mn1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5leHBvcnRzLnJlbW92ZSA9IHJlbW92ZTtcblxudmFyIF9kanNmeSA9IHJlcXVpcmUoJy4vZGpzZnkuanMnKTtcblxudmFyIF9kanNmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kanNmeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZShzdHJpbmcpIHtcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICB2YXIgZWxlbWVudCA9IGZyYWdtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcblxuICBlbGVtZW50LmlubmVySFRNTCA9IHN0cmluZy50cmltKCk7XG5cbiAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5sYXN0Q2hpbGQ7XG4gIH1cblxuICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkoZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxufSx7XCIuL2Rqc2Z5LmpzXCI6Mn1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jc3MgPSBjc3M7XG5leHBvcnRzLmFkZENsYXNzID0gYWRkQ2xhc3M7XG5leHBvcnRzLmNvbnRhaW5zQ2xhc3MgPSBjb250YWluc0NsYXNzO1xuZXhwb3J0cy5yZW1vdmVDbGFzcyA9IHJlbW92ZUNsYXNzO1xuZXhwb3J0cy50b2dnbGVDbGFzcyA9IHRvZ2dsZUNsYXNzO1xuXG52YXIgX2Rqc2Z5ID0gcmVxdWlyZSgnLi9kanNmeScpO1xuXG52YXIgX2Rqc2Z5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rqc2Z5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gRWRnZSAvIElFXG52YXIgTVMgPSAnbXMnO1xuLy8gQ2hyb21lIC8gU2FmYXJpXG52YXIgV0VCS0lUID0gJ3dlYmtpdCc7XG4vLyBGaXJlZm94XG52YXIgTU9aID0gJ21veic7XG4vLyBPcGVyYVxudmFyIE8gPSAnbyc7XG52YXIgWFYgPSAneHYnO1xuLy8gS0RFXG52YXIgS0hUTUwgPSAna2h0bWwnO1xuXG52YXIgUFJFRklYSUVTID0gW01TLCBXRUJLSVQsIE1PWiwgTywgWFYsIEtIVE1MXTtcblxudmFyIENTU19QUkVGSVhFRCA9IHtcbiAgZmxvYXQ6ICdjc3NGbG9hdCdcbn07XG5cbmZ1bmN0aW9uIGNzcyhub2RlLCBjc3NTdHlsZXMpIHtcbiAgaWYgKCFub2RlIHx8IG5vZGUubm9kZVR5cGUgPT09IDggfHwgbm9kZS5ub2RlVHlwZSA9PT0gMyB8fCAhbm9kZS5zdHlsZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGNzc1N0eWxlcykge1xuICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjc3NTdHlsZXMsIGtleSkpIHtcbiAgICAgIHZhciBrZXlQcmVmaXhlZCA9IGdldFN0eWxlV2l0aFByZWZpeEtleSh7XG4gICAgICAgIHN0eWxlTGlzdDogbm9kZS5zdHlsZSxcbiAgICAgICAgc3R5bGVUb0NoZWNrOiBrZXlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoa2V5UHJlZml4ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZVtrZXlQcmVmaXhlZF0gPSBjc3NTdHlsZXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkobm9kZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIGNsYXNzTGlzdCkge1xuICB2YXIgY3VycmVudENsYXNzTGlzdCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuXG4gIGNsYXNzTGlzdCA9IHBhcnNlQXJyYXkoY2xhc3NMaXN0KSB8fCBbXTtcblxuICBpZiAoY2xhc3NMaXN0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gY2xhc3NMaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWNsYXNzTGlzdFtpXS50cmltKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdkanMuYWRkQ2xhc3MoKTogRW1wdHkgc3RyaW5ncyBhcmUgbm90IHZhbGlkIGNsYXNzIG5hbWUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250YWluc0NsYXNzSW50b0xpc3QoY3VycmVudENsYXNzTGlzdCwgY2xhc3NMaXN0W2ldKSkge1xuICAgICAgICBjdXJyZW50Q2xhc3NMaXN0ICs9ICcgJyArIGNsYXNzTGlzdFtpXS50cmltKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VycmVudENsYXNzTGlzdC50cmltKCkpO1xuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShub2RlKTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNDbGFzcyhub2RlLCBjbGFzc05hbWUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZWxlbWVudCBtdXN0IGJlIG5vdCBlbXB0eS4nKTtcbiAgfVxuXG4gIGFzc2VydENsYXNzTmFtZShjbGFzc05hbWUpO1xuXG4gIHJldHVybiBjb250YWluc0NsYXNzSW50b0xpc3Qobm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyksIGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzVG9SZW1vdmUpIHtcbiAgdmFyIGN1cnJlbnRDbGFzc0xpc3QgPSBnZXRDdXJyZW50Q2xhc3NMaXN0KG5vZGUpO1xuXG4gIGNsYXNzVG9SZW1vdmUgPSBwYXJzZUFycmF5KGNsYXNzVG9SZW1vdmUpIHx8IFtdO1xuXG4gIGlmICghY3VycmVudENsYXNzTGlzdC5sZW5ndGggfHwgIWNsYXNzVG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xuICB9XG5cbiAgaWYgKGNsYXNzVG9SZW1vdmUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGNsYXNzVG9SZW1vdmVJbnRlcmFjdGlvbjogZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGNsYXNzVG9SZW1vdmUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc1RvUmVtb3ZlW2ldO1xuICAgICAgYXNzZXJ0Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG5cbiAgICAgIGN1cnJlbnRDbGFzc0xpc3RJbnRlcmFjdGlvbjogZm9yICh2YXIgeSA9IDAsIF9sZW5ndGggPSBjdXJyZW50Q2xhc3NMaXN0Lmxlbmd0aDsgeSA8IF9sZW5ndGg7IHkrKykge1xuICAgICAgICBpZiAoY2xhc3NOYW1lID09PSBjdXJyZW50Q2xhc3NMaXN0W3ldKSB7XG4gICAgICAgICAgY3VycmVudENsYXNzTGlzdC5zcGxpY2UoeSwgMSk7XG4gICAgICAgICAgY29udGludWUgY2xhc3NUb1JlbW92ZUludGVyYWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VycmVudENsYXNzTGlzdC5qb2luKCcgJykpO1xuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShub2RlKTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lLCBmb3JjZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlbGVtZW50IG11c3QgYmUgbm90IGVtcHR5LicpO1xuICB9XG5cbiAgYXNzZXJ0Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG5cbiAgdmFyIGN1cnJlbnRDbGFzc0xpc3QgPSBnZXRDdXJyZW50Q2xhc3NMaXN0KG5vZGUpO1xuXG4gIGlmIChjb250YWluc0NsYXNzSW50b0xpc3QoY3VycmVudENsYXNzTGlzdCwgY2xhc3NOYW1lKSkge1xuICAgIGlmICghZm9yY2UpIHtcbiAgICAgIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChmb3JjZSAhPT0gZmFsc2UpIHtcbiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50Q2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIHBhcnNlQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpIHx8IFtdO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDbGFzc05hbWUoY2xhc3NOYW1lKSB7XG4gIGlmICghY2xhc3NOYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2xhc3NOYW1lIHByb3ZpZGVkIChcXCcnICsgY2xhc3NOYW1lICsgJ1xcJykgbXVzdCBiZSBub3QgZW1wdHkuJyk7XG4gIH1cblxuICBpZiAoY29udGFpbnNXaGl0ZXNwYWNlcyhjbGFzc05hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2xhc3NOYW1lIHByb3ZpZGVkIChcXCcnICsgY2xhc3NOYW1lICsgJ1xcJykgY29udGFpbnMgSFRNTCBzcGFjZSBjaGFyYWN0ZXJzLCB3aGljaCBhcmUgbm90IHZhbGlkLicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zV2hpdGVzcGFjZXMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2goL1xccy8pO1xufVxuXG5mdW5jdGlvbiBjb250YWluc0NsYXNzSW50b0xpc3QoY2xhc3NMaXN0LCBjbGFzc1RvQ2hlY2spIHtcbiAgY2xhc3NMaXN0ID0gcGFyc2VBcnJheShjbGFzc0xpc3QpIHx8IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjbGFzc0xpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY2xhc3NMaXN0W2ldLnRyaW0oKSA9PT0gY2xhc3NUb0NoZWNrLnRyaW0oKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwYXJzZUFycmF5KGNsYXNzTGlzdCkge1xuICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc0xpc3QgPSBjbGFzc0xpc3Quc3BsaXQoJyAnKTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc0xpc3Q7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlV2l0aFByZWZpeEtleShfcmVmKSB7XG4gIHZhciBzdHlsZUxpc3QgPSBfcmVmLnN0eWxlTGlzdDtcbiAgdmFyIHN0eWxlVG9DaGVjayA9IF9yZWYuc3R5bGVUb0NoZWNrO1xuXG4gIGlmIChzdHlsZVRvQ2hlY2sgaW4gc3R5bGVMaXN0KSB7XG4gICAgcmV0dXJuIHN0eWxlVG9DaGVjaztcbiAgfVxuXG4gIGlmIChzdHlsZVRvQ2hlY2sgaW4gQ1NTX1BSRUZJWEVEKSB7XG4gICAgcmV0dXJuIENTU19QUkVGSVhFRFtzdHlsZVRvQ2hlY2tdO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IFBSRUZJWElFUy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBzdHlsZVdpdGhQcmVmaXggPSAnJyArIFBSRUZJWElFU1tpXSArIHN0eWxlVG9DaGVja1swXS50b1VwcGVyQ2FzZSgpICsgc3R5bGVUb0NoZWNrLnN1YnN0cmluZygxKTtcblxuICAgIGlmIChzdHlsZVdpdGhQcmVmaXggaW4gc3R5bGVMaXN0KSB7XG4gICAgICBDU1NfUFJFRklYRURbc3R5bGVUb0NoZWNrXSA9IHN0eWxlV2l0aFByZWZpeDtcbiAgICAgIHJldHVybiBDU1NfUFJFRklYRURbc3R5bGVUb0NoZWNrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG59LHtcIi4vZGpzZnlcIjoyfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZCA9IHJlcXVpcmUoJy4vZGpzL2QuanMnKTtcblxudmFyIF9kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2QyLmRlZmF1bHQ7XG59IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQ7XG4gIH0pO1xufVxuXG52YXIgX2dsb2JhbCA9IHVuZGVmaW5lZDtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIF9nbG9iYWwgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIF9nbG9iYWwgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICBfZ2xvYmFsID0gc2VsZjtcbn0gZWxzZSB7XG4gIF9nbG9iYWwgPSB1bmRlZmluZWQ7XG59XG5cbl9nbG9iYWwuZGpzID0gX2QyLmRlZmF1bHQ7XG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuL2Rqcy9kLmpzXCI6MX1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZztcbmZ1bmN0aW9uIGh0bWxTdHJpbmdGcm9tVGVtcGxhdGVTdHJpbmcodGVtcGxhdGVPYmplY3QpIHtcbiAgdmFyIHJhdyA9IHRlbXBsYXRlT2JqZWN0LnJhdztcblxuICB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdWJzdHMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3Vic3RzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJlc3VsdCA9IHN1YnN0cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgc3Vic3QsIGkpIHtcbiAgICB2YXIgbGl0ID0gcmF3W2ldO1xuXG4gICAgc3Vic3QgPSBBcnJheS5pc0FycmF5KHN1YnN0KSA/IHN1YnN0LmpvaW4oJycpIDogc3Vic3QgKyAnJztcblxuICAgIGlmIChsaXRbbGl0Lmxlbmd0aCAtIDFdID09PSAnJCcpIHtcbiAgICAgIHN1YnN0ID0gaHRtbEVzY2FwZShzdWJzdCk7XG4gICAgICBsaXQgPSBsaXQuc2xpY2UoMCwgLTEpO1xuICAgIH1cblxuICAgIHJlc3VsdCArPSBsaXQ7XG4gICAgcmVzdWx0ICs9IHN1YnN0O1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgJycpO1xuXG4gIHJlc3VsdCArPSByYXdbcmF3Lmxlbmd0aCAtIDFdO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGh0bWxFc2NhcGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdGU7JykucmVwbGFjZSgvJy9nLCAnJiMzOTsnKS5yZXBsYWNlKC9gL2csICcmIzk2OycpO1xufVxufSx7fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VEaXNwYXRjaGVyKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3Rvb2xzL3V0aWxzLmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBEaXN0YW5jZUFjdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaXN0YW5jZUFjdGlvbnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpc3RhbmNlQWN0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGlzdGFuY2VBY3Rpb25zLCBudWxsLCBbe1xuICAgIGtleTogJ2NoYW5nZVZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVmFsdWUodmFsdWUpIHtcbiAgICAgIF9kaXN0YW5jZURpc3BhdGNoZXIyLmRlZmF1bHQuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBEaXN0YW5jZUFjdGlvbnMuVkFMVUVfQ0hBTkdFRCxcbiAgICAgICAgZGF0YTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NoYW5nZVVuaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VVbml0KHVuaXQpIHtcbiAgICAgIF9kaXN0YW5jZURpc3BhdGNoZXIyLmRlZmF1bHQuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBEaXN0YW5jZUFjdGlvbnMuVU5JVF9DSEFOR0VELFxuICAgICAgICBkYXRhOiB1bml0XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGlzdGFuY2VBY3Rpb25zO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGlzdGFuY2VBY3Rpb25zO1xuXG4oMCwgX3V0aWxzLmRlZmluZUNvbnN0UHJvcGVydHkpKERpc3RhbmNlQWN0aW9ucywgJ1ZBTFVFX0NIQU5HRUQnLCBTeW1ib2woKSk7XG4oMCwgX3V0aWxzLmRlZmluZUNvbnN0UHJvcGVydHkpKERpc3RhbmNlQWN0aW9ucywgJ1VOSVRfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcblxufSx7XCIuLi90b29scy91dGlscy5qc1wiOjMwLFwiLi9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzXCI6MTB9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRGlzdGFuY2UgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaXN0YW5jZShfcmVmKSB7XG4gICAgdmFyIF9yZWYkdW5pdCA9IF9yZWYudW5pdDtcbiAgICB2YXIgdW5pdCA9IF9yZWYkdW5pdCA9PT0gdW5kZWZpbmVkID8gJ0ttJyA6IF9yZWYkdW5pdDtcbiAgICB2YXIgX3JlZiR2YWx1ZSA9IF9yZWYudmFsdWU7XG4gICAgdmFyIHZhbHVlID0gX3JlZiR2YWx1ZSA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkdmFsdWU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzdGFuY2UpO1xuXG4gICAgdGhpcy51bml0ID0gdW5pdDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGlzdGFuY2UsIFt7XG4gICAga2V5OiAnc2V0VmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGlzdGFuY2U7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXN0YW5jZTtcblxufSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Rpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi90b29scy9kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfZGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IF9kaXNwYXRjaGVyMi5kZWZhdWx0KCk7XG5cbn0se1wiLi4vdG9vbHMvZGlzcGF0Y2hlci5qc1wiOjI4fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtZGlzdGFuY2VcIj5cXG4gICAgICA8aW5wdXQgY2xhc3M9XCJmZS1pbnB1dHNfX2lucHV0IGZlLWRpc3RhbmNlX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJmZS11bml0IGZlLWRpc3RhbmNlX191bml0XCI+eyQkdW5pdH08L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgJ10sIFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1kaXN0YW5jZVwiPlxcbiAgICAgIDxpbnB1dCBjbGFzcz1cImZlLWlucHV0c19faW5wdXQgZmUtZGlzdGFuY2VfX2lucHV0XCIgdHlwZT1cInRleHRcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLXVuaXQgZmUtZGlzdGFuY2VfX3VuaXRcIj57JCR1bml0fTwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9ucyA9IHJlcXVpcmUoJy4vZGlzdGFuY2UuYWN0aW9ucy5qcycpO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUFjdGlvbnMpO1xuXG52YXIgX2Rpc3RhbmNlU3RvcmUgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLnN0b3JlLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VTdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZVN0b3JlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHsgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTsgfVxuXG52YXIgY29uZmlnTWFwID0ge1xuICBodG1sOiAoMCwgX2RvbTIuZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KVxufTtcblxudmFyIGVsZW1lbnRNYXAgPSB7XG4gICRjb250YWluZXI6IG51bGwsXG4gICRkaXN0YW5jZTogbnVsbCxcbiAgJGlucHV0OiBudWxsLFxuICAkdW5pdDogbnVsbFxufTtcblxudmFyIGRpc3RhbmNlU3RvcmUgPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRkaXN0YW5jZSA9ICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcbiAgc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKTtcbiAgc2V0RWxlbWVudEhhbmRsZXJzKCk7XG5cbiAgZGlzdGFuY2VTdG9yZSA9IG5ldyBfZGlzdGFuY2VTdG9yZTIuZGVmYXVsdCgpO1xuICBkaXN0YW5jZVN0b3JlLm9uQ2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICByZWZyZXNoVW5pdChkaXN0YW5jZVN0b3JlLmRpc3RhbmNlLnVuaXQpO1xuICB9KTtcblxuICBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LmNoYW5nZVVuaXQoJ0ttJyk7XG4gIGRpc3RhbmNlU3RvcmUudW5yZWdpc3Rlckxpc3RlbmVyKCk7XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hVbml0KHVuaXQpIHtcbiAgZWxlbWVudE1hcC4kdW5pdC5pbm5lckhUTUwgPSB1bml0O1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kaW5wdXQgPSBlbGVtZW50TWFwLiRkaXN0YW5jZS5maW5kKCcuZmUtZGlzdGFuY2VfX2lucHV0Jyk7XG4gIGVsZW1lbnRNYXAuJHVuaXQgPSBlbGVtZW50TWFwLiRkaXN0YW5jZS5maW5kKCcuZmUtZGlzdGFuY2VfX3VuaXQnKTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudEhhbmRsZXJzKCkge1xuICBlbGVtZW50TWFwLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuY2hhbmdlVmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfSk7XG59XG5cbn0se1wiLi9kaXN0YW5jZS5hY3Rpb25zLmpzXCI6OCxcIi4vZGlzdGFuY2Uuc3RvcmUuanNcIjoxMixcImRvbS5qc1wiOjZ9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zdG9yZSA9IHJlcXVpcmUoJy4uL3Rvb2xzL3N0b3JlLmpzJyk7XG5cbnZhciBfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmUpO1xuXG52YXIgX2Rpc3RhbmNlQ2xhc3MgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmNsYXNzLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUNsYXNzKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmFjdGlvbnMuanMnKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VBY3Rpb25zKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VEaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRGlzdGFuY2VTdG9yZSA9IChmdW5jdGlvbiAoX1N0b3JlKSB7XG4gIF9pbmhlcml0cyhEaXN0YW5jZVN0b3JlLCBfU3RvcmUpO1xuXG4gIGZ1bmN0aW9uIERpc3RhbmNlU3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpc3RhbmNlU3RvcmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKERpc3RhbmNlU3RvcmUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe30pO1xuXG4gICAgX3RoaXMubGlzdGVuZXIgPSBfZGlzdGFuY2VEaXNwYXRjaGVyMi5kZWZhdWx0LnJlZ2lzdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgc3dpdGNoIChsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgIGNhc2UgX2Rpc3RhbmNlQWN0aW9uczIuZGVmYXVsdC5WQUxVRV9DSEFOR0VEOlxuICAgICAgICAgIF90aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHVuaXQ6IF90aGlzLmRpc3RhbmNlLnVuaXQsXG4gICAgICAgICAgICB2YWx1ZTogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LlVOSVRfQ0hBTkdFRDpcbiAgICAgICAgICBfdGhpcy5kaXN0YW5jZSA9IG5ldyBfZGlzdGFuY2VDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMuZGlzdGFuY2UudmFsdWUsXG4gICAgICAgICAgICB1bml0OiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2hhbmdlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERpc3RhbmNlU3RvcmUsIFt7XG4gICAga2V5OiAndW5yZWdpc3Rlckxpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3Rlckxpc3RlbmVyKCkge1xuICAgICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC51bnJlZ2lzdGVyKHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXN0YW5jZVN0b3JlO1xufSkoX3N0b3JlMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGlzdGFuY2VTdG9yZTtcblxufSx7XCIuLi90b29scy9zdG9yZS5qc1wiOjI5LFwiLi9kaXN0YW5jZS5hY3Rpb25zLmpzXCI6OCxcIi4vZGlzdGFuY2UuY2xhc3MuanNcIjo5LFwiLi9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzXCI6MTB9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxoZWFkZXIgY2xhc3M9XCJmZS1oZWFkZXJcIj5cXG4gICAgICA8aDE+RnVlbCBFY29ub215PC9oMT5cXG4gICAgPC9oZWFkZXI+XFxuICAnXSwgWydcXG4gICAgPGhlYWRlciBjbGFzcz1cImZlLWhlYWRlclwiPlxcbiAgICAgIDxoMT5GdWVsIEVjb25vbXk8L2gxPlxcbiAgICA8L2hlYWRlcj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG59XG5cbn0se1wiZG9tLmpzXCI6Nn1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9oZWFkZXIgPSByZXF1aXJlKCcuL2hlYWRlci9oZWFkZXIuanMnKTtcblxudmFyIGhlYWRlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oZWFkZXIpO1xuXG52YXIgX2lucHV0c0NvbnRhaW5lciA9IHJlcXVpcmUoJy4vaW5wdXRzL2lucHV0cy1jb250YWluZXIuanMnKTtcblxudmFyIGlucHV0c0NvbnRhaW5lciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9pbnB1dHNDb250YWluZXIpO1xuXG52YXIgX3Jlc3VsdHNDb250YWluZXIgPSByZXF1aXJlKCcuL3Jlc3VsdHMvcmVzdWx0cy1jb250YWluZXIuanMnKTtcblxudmFyIHJlc3VsdHNDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcmVzdWx0c0NvbnRhaW5lcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciAkaGVhZGVyQ29udGFpbmVyID0gKDAsIF9kb20yLmRlZmF1bHQpKCcuZmUtanMtaGVhZGVyJyk7XG52YXIgJGlucHV0c0NvbnRhaW5lciA9ICgwLCBfZG9tMi5kZWZhdWx0KSgnLmZlLWpzLWlucHV0cy1jb250YWluZXInKTtcbnZhciAkcmVzdWx0c0NvbnRhaW5lciA9ICgwLCBfZG9tMi5kZWZhdWx0KSgnLmZlLWpzLXJlc3VsdHMtY29udGFpbmVyJyk7XG5cbmhlYWRlci5pbml0TW9kdWxlKCRoZWFkZXJDb250YWluZXIpO1xuaW5wdXRzQ29udGFpbmVyLmluaXRNb2R1bGUoJGlucHV0c0NvbnRhaW5lcik7XG5yZXN1bHRzQ29udGFpbmVyLmluaXRNb2R1bGUoJHJlc3VsdHNDb250YWluZXIpO1xuXG59LHtcIi4vaGVhZGVyL2hlYWRlci5qc1wiOjEzLFwiLi9pbnB1dHMvaW5wdXRzLWNvbnRhaW5lci5qc1wiOjE1LFwiLi9yZXN1bHRzL3Jlc3VsdHMtY29udGFpbmVyLmpzXCI6MjQsXCJkb20uanNcIjo2fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzLWNvbnRhaW5lclwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMgZmUtanMtcXVhbnRpdHlcIj48L2Rpdj5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzIGZlLWpzLWRpc3RhbmNlXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgJ10sIFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMtY29udGFpbmVyXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImZlLWlucHV0cyBmZS1qcy1xdWFudGl0eVwiPjwvZGl2PlxcblxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMgZmUtanMtZGlzdGFuY2VcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX3F1YW50aXR5ID0gcmVxdWlyZSgnLi4vcXVhbnRpdHkvcXVhbnRpdHkuanMnKTtcblxudmFyIHF1YW50aXR5ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3F1YW50aXR5KTtcblxudmFyIF9kaXN0YW5jZSA9IHJlcXVpcmUoJy4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzJyk7XG5cbnZhciBkaXN0YW5jZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9kaXN0YW5jZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkaW5wdXRDb250YWluZXI6IG51bGwsXG4gICRpbnB1dFF1YW50aXR5OiBudWxsLFxuICAkaW5wdXREaXN0YW5jZTogbnVsbFxufTtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGlucHV0Q29udGFpbmVyID0gJGNvbnRhaW5lci5jcmVhdGUoY29uZmlnTWFwLmh0bWwpO1xuXG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG5cbiAgcXVhbnRpdHkuaW5pdE1vZHVsZShlbGVtZW50TWFwLiRpbnB1dFF1YW50aXR5KTtcbiAgZGlzdGFuY2UuaW5pdE1vZHVsZShlbGVtZW50TWFwLiRpbnB1dERpc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG4gIGVsZW1lbnRNYXAuJGlucHV0UXVhbnRpdHkgPSBlbGVtZW50TWFwLiRpbnB1dENvbnRhaW5lci5maW5kKCcuZmUtanMtcXVhbnRpdHknKTtcbiAgZWxlbWVudE1hcC4kaW5wdXREaXN0YW5jZSA9IGVsZW1lbnRNYXAuJGlucHV0Q29udGFpbmVyLmZpbmQoJy5mZS1qcy1kaXN0YW5jZScpO1xufVxuXG59LHtcIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzXCI6MTEsXCIuLi9xdWFudGl0eS9xdWFudGl0eS5qc1wiOjE5LFwiZG9tLmpzXCI6Nn1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vcXVhbnRpdHkuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eURpc3BhdGNoZXIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdG9vbHMvdXRpbHMuanMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFF1YW50aXR5QWN0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1YW50aXR5QWN0aW9ucygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVhbnRpdHlBY3Rpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWFudGl0eUFjdGlvbnMsIG51bGwsIFt7XG4gICAga2V5OiAnY2hhbmdlVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VWYWx1ZSh2YWx1ZSkge1xuICAgICAgX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFF1YW50aXR5QWN0aW9ucy5WQUxVRV9DSEFOR0VELFxuICAgICAgICBkYXRhOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2hhbmdlVW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVVuaXQodW5pdCkge1xuICAgICAgX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFF1YW50aXR5QWN0aW9ucy5VTklUX0NIQU5HRUQsXG4gICAgICAgIGRhdGE6IHVuaXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBRdWFudGl0eUFjdGlvbnM7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBRdWFudGl0eUFjdGlvbnM7XG5cbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoUXVhbnRpdHlBY3Rpb25zLCAnVkFMVUVfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoUXVhbnRpdHlBY3Rpb25zLCAnVU5JVF9DSEFOR0VEJywgU3ltYm9sKCkpO1xuXG59LHtcIi4uL3Rvb2xzL3V0aWxzLmpzXCI6MzAsXCIuL3F1YW50aXR5LmRpc3BhdGNoZXIuanNcIjoxOH1dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUXVhbnRpdHkgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBRdWFudGl0eShfcmVmKSB7XG4gICAgdmFyIF9yZWYkdW5pdCA9IF9yZWYudW5pdDtcbiAgICB2YXIgdW5pdCA9IF9yZWYkdW5pdCA9PT0gdW5kZWZpbmVkID8gJ0wnIDogX3JlZiR1bml0O1xuICAgIHZhciBfcmVmJHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgICB2YXIgdmFsdWUgPSBfcmVmJHZhbHVlID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiR2YWx1ZTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWFudGl0eSk7XG5cbiAgICB0aGlzLnVuaXQgPSB1bml0O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWFudGl0eSwgW3tcbiAgICBrZXk6ICdzZXRWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBRdWFudGl0eTtcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFF1YW50aXR5O1xuXG59LHt9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3BhdGNoZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgX2Rpc3BhdGNoZXIyLmRlZmF1bHQoKTtcblxufSx7XCIuLi90b29scy9kaXNwYXRjaGVyLmpzXCI6Mjh9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1xdWFudGl0eVwiPlxcbiAgICAgIDxpbnB1dCBjbGFzcz1cImZlLWlucHV0c19faW5wdXQgZmUtcXVhbnRpdHlfX2lucHV0XCIgdHlwZT1cInRleHRcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLXVuaXQgZmUtcXVhbnRpdHlfX3VuaXRcIj57JCR1bml0fTwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSwgWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLXF1YW50aXR5XCI+XFxuICAgICAgPGlucHV0IGNsYXNzPVwiZmUtaW5wdXRzX19pbnB1dCBmZS1xdWFudGl0eV9faW5wdXRcIiB0eXBlPVwidGV4dFwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiZmUtdW5pdCBmZS1xdWFudGl0eV9fdW5pdFwiPnskJHVuaXR9PC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zID0gcmVxdWlyZSgnLi9xdWFudGl0eS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5QWN0aW9ucyk7XG5cbnZhciBfcXVhbnRpdHlTdG9yZSA9IHJlcXVpcmUoJy4vcXVhbnRpdHkuc3RvcmUuanMnKTtcblxudmFyIF9xdWFudGl0eVN0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5U3RvcmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cbnZhciBjb25maWdNYXAgPSB7XG4gIGh0bWw6ICgwLCBfZG9tMi5kZWZhdWx0KShfdGVtcGxhdGVPYmplY3QpXG59O1xuXG52YXIgZWxlbWVudE1hcCA9IHtcbiAgJGNvbnRhaW5lcjogbnVsbCxcbiAgJHF1YW50aXR5OiBudWxsLFxuICAkaW5wdXQ6IG51bGwsXG4gICR1bml0OiBudWxsXG59O1xuXG52YXIgcXVhbnRpdHlTdG9yZSA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJHF1YW50aXR5ID0gJGNvbnRhaW5lci5jcmVhdGUoY29uZmlnTWFwLmh0bWwpO1xuICBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpO1xuICBzZXRFbGVtZW50SGFuZGxlcnMoKTtcblxuICBxdWFudGl0eVN0b3JlID0gbmV3IF9xdWFudGl0eVN0b3JlMi5kZWZhdWx0KCk7XG4gIHF1YW50aXR5U3RvcmUub25DaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgIHJlZnJlc2hVbml0KHF1YW50aXR5U3RvcmUucXVhbnRpdHkudW5pdCk7XG4gIH0pO1xuXG4gIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuY2hhbmdlVW5pdCgnTCcpO1xuICBxdWFudGl0eVN0b3JlLnVucmVnaXN0ZXJMaXN0ZW5lcigpO1xufVxuXG5mdW5jdGlvbiByZWZyZXNoVW5pdCh1bml0KSB7XG4gIGVsZW1lbnRNYXAuJHVuaXQuaW5uZXJIVE1MID0gdW5pdDtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG4gIGVsZW1lbnRNYXAuJGlucHV0ID0gZWxlbWVudE1hcC4kcXVhbnRpdHkuZmluZCgnLmZlLXF1YW50aXR5X19pbnB1dCcpO1xuICBlbGVtZW50TWFwLiR1bml0ID0gZWxlbWVudE1hcC4kcXVhbnRpdHkuZmluZCgnLmZlLXF1YW50aXR5X191bml0Jyk7XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnRIYW5kbGVycygpIHtcbiAgZWxlbWVudE1hcC4kaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBfcXVhbnRpdHlBY3Rpb25zMi5kZWZhdWx0LmNoYW5nZVZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gIH0pO1xufVxuXG59LHtcIi4vcXVhbnRpdHkuYWN0aW9ucy5qc1wiOjE2LFwiLi9xdWFudGl0eS5zdG9yZS5qc1wiOjIwLFwiZG9tLmpzXCI6Nn1dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N0b3JlID0gcmVxdWlyZSgnLi4vdG9vbHMvc3RvcmUuanMnKTtcblxudmFyIF9zdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdG9yZSk7XG5cbnZhciBfcXVhbnRpdHlDbGFzcyA9IHJlcXVpcmUoJy4vcXVhbnRpdHkuY2xhc3MuanMnKTtcblxudmFyIF9xdWFudGl0eUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5Q2xhc3MpO1xuXG52YXIgX3F1YW50aXR5QWN0aW9ucyA9IHJlcXVpcmUoJy4vcXVhbnRpdHkuYWN0aW9ucy5qcycpO1xuXG52YXIgX3F1YW50aXR5QWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eUFjdGlvbnMpO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vcXVhbnRpdHkuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eURpc3BhdGNoZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBRdWFudGl0eVN0b3JlID0gKGZ1bmN0aW9uIChfU3RvcmUpIHtcbiAgX2luaGVyaXRzKFF1YW50aXR5U3RvcmUsIF9TdG9yZSk7XG5cbiAgZnVuY3Rpb24gUXVhbnRpdHlTdG9yZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVhbnRpdHlTdG9yZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUXVhbnRpdHlTdG9yZSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7fSk7XG5cbiAgICBfdGhpcy5saXN0ZW5lciA9IF9xdWFudGl0eURpc3BhdGNoZXIyLmRlZmF1bHQucmVnaXN0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBzd2l0Y2ggKGxpc3RlbmVyLnR5cGUpIHtcbiAgICAgICAgY2FzZSBfcXVhbnRpdHlBY3Rpb25zMi5kZWZhdWx0LlZBTFVFX0NIQU5HRUQ6XG4gICAgICAgICAgX3RoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdW5pdDogX3RoaXMucXVhbnRpdHkudW5pdCxcbiAgICAgICAgICAgIHZhbHVlOiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuVU5JVF9DSEFOR0VEOlxuICAgICAgICAgIF90aGlzLnF1YW50aXR5ID0gbmV3IF9xdWFudGl0eUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5xdWFudGl0eS52YWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jaGFuZ2UoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUXVhbnRpdHlTdG9yZSwgW3tcbiAgICBrZXk6ICd1bnJlZ2lzdGVyTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXIoKSB7XG4gICAgICBfcXVhbnRpdHlEaXNwYXRjaGVyMi5kZWZhdWx0LnVucmVnaXN0ZXIodGhpcy5saXN0ZW5lcik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFF1YW50aXR5U3RvcmU7XG59KShfc3RvcmUyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBRdWFudGl0eVN0b3JlO1xuXG59LHtcIi4uL3Rvb2xzL3N0b3JlLmpzXCI6MjksXCIuL3F1YW50aXR5LmFjdGlvbnMuanNcIjoxNixcIi4vcXVhbnRpdHkuY2xhc3MuanNcIjoxNyxcIi4vcXVhbnRpdHkuZGlzcGF0Y2hlci5qc1wiOjE4fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEZ1ZWxDb25zdW1wdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGdWVsQ29uc3VtcHRpb25zKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGdWVsQ29uc3VtcHRpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGdWVsQ29uc3VtcHRpb25zLCBudWxsLCBbe1xuICAgIGtleTogXCJjYWxjXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGMoX3JlZikge1xuICAgICAgdmFyIF9yZWYkcXVhbnRpdHkgPSBfcmVmLnF1YW50aXR5O1xuICAgICAgdmFyIHF1YW50aXR5ID0gX3JlZiRxdWFudGl0eSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHF1YW50aXR5O1xuICAgICAgdmFyIF9yZWYkZGlzdGFuY2UgPSBfcmVmLmRpc3RhbmNlO1xuICAgICAgdmFyIGRpc3RhbmNlID0gX3JlZiRkaXN0YW5jZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGRpc3RhbmNlO1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgdW5pdDogZGlzdGFuY2UudW5pdCArIFwiL1wiICsgcXVhbnRpdHkudW5pdFxuICAgICAgfTtcblxuICAgICAgaWYgKCFxdWFudGl0eS52YWx1ZSB8fCAhZGlzdGFuY2UudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0LnZhbHVlID0gZGlzdGFuY2UudmFsdWUgLyBxdWFudGl0eS52YWx1ZTtcblxuICAgICAgcmVzdWx0LnZhbHVlID0gcmVzdWx0LnZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZ1ZWxDb25zdW1wdGlvbnM7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBGdWVsQ29uc3VtcHRpb25zO1xuXG59LHt9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1mdWVsLWNvbnN1bXB0aW9uXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJmZS1qcy12YWx1ZVwiPjg4PC9zcGFuPiA8c3BhbiBjbGFzcz1cImZlLXVuaXRcIj5LbS9MPC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddLCBbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtZnVlbC1jb25zdW1wdGlvblwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiZmUtanMtdmFsdWVcIj44ODwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJmZS11bml0XCI+S20vTDwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX2Z1ZWxDb25zdW1wdGlvblN0b3JlID0gcmVxdWlyZSgnLi9mdWVsLWNvbnN1bXB0aW9uLnN0b3JlLmpzJyk7XG5cbnZhciBfZnVlbENvbnN1bXB0aW9uU3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVlbENvbnN1bXB0aW9uU3RvcmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cbnZhciBjb25maWdNYXAgPSB7XG4gIGh0bWw6ICgwLCBfZG9tMi5kZWZhdWx0KShfdGVtcGxhdGVPYmplY3QpXG59O1xuXG52YXIgZWxlbWVudE1hcCA9IHtcbiAgJGNvbnRhaW5lcjogbnVsbCxcbiAgJGZ1ZWxDb25zdW1wdGlvbjogbnVsbCxcbiAgJGZ1ZWxVbml0OiBudWxsLFxuICAkZnVlbFZhbHVlOiBudWxsXG59O1xuXG52YXIgZnVlbENvbnN1bXB0aW9uU3RvcmUgPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRmdWVsQ29uc3VtcHRpb24gPSAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG5cbiAgZnVlbENvbnN1bXB0aW9uU3RvcmUgPSBuZXcgX2Z1ZWxDb25zdW1wdGlvblN0b3JlMi5kZWZhdWx0KCk7XG5cbiAgZnVlbENvbnN1bXB0aW9uU3RvcmUub25DaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgIHJlZnJlc2hGdWVsQ29uc3VtcHRpb24oZnVlbENvbnN1bXB0aW9uU3RvcmUucmVzdWx0cyk7XG4gIH0pO1xuXG4gIGZ1ZWxDb25zdW1wdGlvblN0b3JlLmNoYW5nZSgpO1xufVxuXG5mdW5jdGlvbiByZWZyZXNoRnVlbENvbnN1bXB0aW9uKHJlc3VsdHMpIHtcbiAgZWxlbWVudE1hcC4kZnVlbFVuaXQuaW5uZXJIVE1MID0gcmVzdWx0cy51bml0O1xuICBlbGVtZW50TWFwLiRmdWVsVmFsdWUuaW5uZXJIVE1MID0gcmVzdWx0cy52YWx1ZTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxVbml0ID0gZWxlbWVudE1hcC4kZnVlbENvbnN1bXB0aW9uLmZpbmQoJy5mZS11bml0Jyk7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxWYWx1ZSA9IGVsZW1lbnRNYXAuJGZ1ZWxDb25zdW1wdGlvbi5maW5kKCcuZmUtanMtdmFsdWUnKTtcbn1cblxufSx7XCIuL2Z1ZWwtY29uc3VtcHRpb24uc3RvcmUuanNcIjoyMyxcImRvbS5qc1wiOjZ9XSwyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3RvcmUgPSByZXF1aXJlKCcuLi8uLi90b29scy9zdG9yZS5qcycpO1xuXG52YXIgX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3JlKTtcblxudmFyIF9yZXN1bHRzQWN0aW9ucyA9IHJlcXVpcmUoJy4uL3Jlc3VsdHMuYWN0aW9ucy5qcycpO1xuXG52YXIgX3Jlc3VsdHNBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc3VsdHNBY3Rpb25zKTtcblxudmFyIF9yZXN1bHRzRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL3Jlc3VsdHMuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX3Jlc3VsdHNEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc3VsdHNEaXNwYXRjaGVyKTtcblxudmFyIF9mdWVsQ29uc3VtcHRpb25DbGFzcyA9IHJlcXVpcmUoJy4vZnVlbC1jb25zdW1wdGlvbi5jbGFzcy5qcycpO1xuXG52YXIgX2Z1ZWxDb25zdW1wdGlvbkNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Z1ZWxDb25zdW1wdGlvbkNsYXNzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRnVlbENvbnN1bXB0aW9uU3RvcmUgPSAoZnVuY3Rpb24gKF9TdG9yZSkge1xuICBfaW5oZXJpdHMoRnVlbENvbnN1bXB0aW9uU3RvcmUsIF9TdG9yZSk7XG5cbiAgZnVuY3Rpb24gRnVlbENvbnN1bXB0aW9uU3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZ1ZWxDb25zdW1wdGlvblN0b3JlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihGdWVsQ29uc3VtcHRpb25TdG9yZSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5yZXN1bHRzID0gX2Z1ZWxDb25zdW1wdGlvbkNsYXNzMi5kZWZhdWx0LmNhbGMoe30pO1xuXG4gICAgX3Jlc3VsdHNEaXNwYXRjaGVyMi5kZWZhdWx0LnJlZ2lzdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgc3dpdGNoIChsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgIGNhc2UgX3Jlc3VsdHNBY3Rpb25zMi5kZWZhdWx0LlJFU1VMVF9DSEFOR0VEOlxuICAgICAgICAgIF90aGlzLnJlc3VsdHMgPSBfZnVlbENvbnN1bXB0aW9uQ2xhc3MyLmRlZmF1bHQuY2FsYyhsaXN0ZW5lci5kYXRhKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2UoX3RoaXMucmVzdWx0cyk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gRnVlbENvbnN1bXB0aW9uU3RvcmU7XG59KShfc3RvcmUyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBGdWVsQ29uc3VtcHRpb25TdG9yZTtcblxufSx7XCIuLi8uLi90b29scy9zdG9yZS5qc1wiOjI5LFwiLi4vcmVzdWx0cy5hY3Rpb25zLmpzXCI6MjUsXCIuLi9yZXN1bHRzLmRpc3BhdGNoZXIuanNcIjoyNixcIi4vZnVlbC1jb25zdW1wdGlvbi5jbGFzcy5qc1wiOjIxfV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtcmVzdWx0cy1jb250YWluZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtanMtZnVlbC1jb25zdW1wdGlvblwiIHN0eWxlPVwiaGVpZ2h0OjEwMCVcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAnXSwgWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLXJlc3VsdHMtY29udGFpbmVyXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImZlLWpzLWZ1ZWwtY29uc3VtcHRpb25cIiBzdHlsZT1cImhlaWdodDoxMDAlXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgJ10pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0TW9kdWxlID0gaW5pdE1vZHVsZTtcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9mdWVsQ29uc3VtcHRpb24gPSByZXF1aXJlKCcuL2Z1ZWwtY29uc3VtcHRpb24vZnVlbC1jb25zdW1wdGlvbi5qcycpO1xuXG52YXIgZnVlbENvbXN1cHRpb24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZnVlbENvbnN1bXB0aW9uKTtcblxudmFyIF9yZXN1bHRzU3RvcmUgPSByZXF1aXJlKCcuL3Jlc3VsdHMuc3RvcmUuanMnKTtcblxudmFyIF9yZXN1bHRzU3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzdWx0c1N0b3JlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHsgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTsgfVxuXG52YXIgcmVzdWx0c1N0b3JlID0gdW5kZWZpbmVkO1xuXG52YXIgY29uZmlnTWFwID0ge1xuICBodG1sOiAoMCwgX2RvbTIuZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KVxufTtcblxudmFyIGVsZW1lbnRNYXAgPSB7XG4gICRjb250YWluZXI6IG51bGwsXG4gICRyZXN1bHRzQ29udGFpbmVyOiBudWxsLFxuICAkZnVlbENvbXN1cHRpb246IG51bGxcbn07XG5cbmZ1bmN0aW9uIGluaXRNb2R1bGUoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRyZXN1bHRzQ29udGFpbmVyID0gJGNvbnRhaW5lci5jcmVhdGUoY29uZmlnTWFwLmh0bWwpO1xuICBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpO1xuXG4gIHJlc3VsdHNTdG9yZSA9IG5ldyBfcmVzdWx0c1N0b3JlMi5kZWZhdWx0KCk7XG5cbiAgZnVlbENvbXN1cHRpb24uaW5pdE1vZHVsZShlbGVtZW50TWFwLiRmdWVsQ29tc3VwdGlvbik7XG5cbiAgcmVzdWx0c1N0b3JlLnVwZGF0ZVJlc3VsdHMoKTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxDb21zdXB0aW9uID0gZWxlbWVudE1hcC4kcmVzdWx0c0NvbnRhaW5lci5maW5kKCcuZmUtanMtZnVlbC1jb25zdW1wdGlvbicpO1xufVxuXG59LHtcIi4vZnVlbC1jb25zdW1wdGlvbi9mdWVsLWNvbnN1bXB0aW9uLmpzXCI6MjIsXCIuL3Jlc3VsdHMuc3RvcmUuanNcIjoyNyxcImRvbS5qc1wiOjZ9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZXN1bHRzRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vcmVzdWx0cy5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcmVzdWx0c0Rpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzdWx0c0Rpc3BhdGNoZXIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdG9vbHMvdXRpbHMuanMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJlc3VsdHNBY3Rpb25zID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVzdWx0c0FjdGlvbnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3VsdHNBY3Rpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXN1bHRzQWN0aW9ucywgbnVsbCwgW3tcbiAgICBrZXk6ICdjaGFuZ2VSZXN1bHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VSZXN1bHQodmFsdWUpIHtcbiAgICAgIF9yZXN1bHRzRGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFJlc3VsdHNBY3Rpb25zLlJFU1VMVF9DSEFOR0VELFxuICAgICAgICBkYXRhOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlc3VsdHNBY3Rpb25zO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVzdWx0c0FjdGlvbnM7XG5cbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoUmVzdWx0c0FjdGlvbnMsICdSRVNVTFRfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcblxufSx7XCIuLi90b29scy91dGlscy5qc1wiOjMwLFwiLi9yZXN1bHRzLmRpc3BhdGNoZXIuanNcIjoyNn1dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vdG9vbHMvZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX2Rpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzcGF0Y2hlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBfZGlzcGF0Y2hlcjIuZGVmYXVsdCgpO1xuXG59LHtcIi4uL3Rvb2xzL2Rpc3BhdGNoZXIuanNcIjoyOH1dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N0b3JlID0gcmVxdWlyZSgnLi4vdG9vbHMvc3RvcmUuanMnKTtcblxudmFyIF9zdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdG9yZSk7XG5cbnZhciBfcXVhbnRpdHlDbGFzcyA9IHJlcXVpcmUoJy4uL3F1YW50aXR5L3F1YW50aXR5LmNsYXNzLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eUNsYXNzKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMgPSByZXF1aXJlKCcuLi9xdWFudGl0eS9xdWFudGl0eS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5QWN0aW9ucyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vcXVhbnRpdHkvcXVhbnRpdHkuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX3F1YW50aXR5RGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWFudGl0eURpc3BhdGNoZXIpO1xuXG52YXIgX2Rpc3RhbmNlQ2xhc3MgPSByZXF1aXJlKCcuLi9kaXN0YW5jZS9kaXN0YW5jZS5jbGFzcy5qcycpO1xuXG52YXIgX2Rpc3RhbmNlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VDbGFzcyk7XG5cbnZhciBfZGlzdGFuY2VBY3Rpb25zID0gcmVxdWlyZSgnLi4vZGlzdGFuY2UvZGlzdGFuY2UuYWN0aW9ucy5qcycpO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUFjdGlvbnMpO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXN0YW5jZURpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzdGFuY2VEaXNwYXRjaGVyKTtcblxudmFyIF9yZXN1bHRzQWN0aW9ucyA9IHJlcXVpcmUoJy4vcmVzdWx0cy5hY3Rpb25zLmpzJyk7XG5cbnZhciBfcmVzdWx0c0FjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzdWx0c0FjdGlvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZXN1bHRzU3RvcmUgPSAoZnVuY3Rpb24gKF9TdG9yZSkge1xuICBfaW5oZXJpdHMoUmVzdWx0c1N0b3JlLCBfU3RvcmUpO1xuXG4gIGZ1bmN0aW9uIFJlc3VsdHNTdG9yZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzdWx0c1N0b3JlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXN1bHRzU3RvcmUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe30pO1xuICAgIF90aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHt9KTtcblxuICAgIF9xdWFudGl0eURpc3BhdGNoZXIyLmRlZmF1bHQucmVnaXN0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBfdGhpcy5fdXBkYXRlUXVhbnRpdHlDbGFzcyhsaXN0ZW5lcik7XG5cbiAgICAgIF90aGlzLnVwZGF0ZVJlc3VsdHMoKTtcbiAgICB9KTtcblxuICAgIF9kaXN0YW5jZURpc3BhdGNoZXIyLmRlZmF1bHQucmVnaXN0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBfdGhpcy5fdXBkYXRlRGlzdGFuY2VDbGFzcyhsaXN0ZW5lcik7XG5cbiAgICAgIF90aGlzLnVwZGF0ZVJlc3VsdHMoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVzdWx0c1N0b3JlLCBbe1xuICAgIGtleTogJ191cGRhdGVRdWFudGl0eUNsYXNzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVF1YW50aXR5Q2xhc3MobGlzdGVuZXIpIHtcbiAgICAgIHN3aXRjaCAobGlzdGVuZXIudHlwZSkge1xuICAgICAgICBjYXNlIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuVkFMVUVfQ0hBTkdFRDpcbiAgICAgICAgICB0aGlzLnF1YW50aXR5ID0gbmV3IF9xdWFudGl0eUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHVuaXQ6IHRoaXMucXVhbnRpdHkudW5pdCxcbiAgICAgICAgICAgIHZhbHVlOiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuVU5JVF9DSEFOR0VEOlxuICAgICAgICAgIHRoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMucXVhbnRpdHkudmFsdWUsXG4gICAgICAgICAgICB1bml0OiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFuZ2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlRGlzdGFuY2VDbGFzcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVEaXN0YW5jZUNsYXNzKGxpc3RlbmVyKSB7XG4gICAgICBzd2l0Y2ggKGxpc3RlbmVyLnR5cGUpIHtcbiAgICAgICAgY2FzZSBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LlZBTFVFX0NIQU5HRUQ6XG4gICAgICAgICAgdGhpcy5kaXN0YW5jZSA9IG5ldyBfZGlzdGFuY2VDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB1bml0OiB0aGlzLmRpc3RhbmNlLnVuaXQsXG4gICAgICAgICAgICB2YWx1ZTogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LlVOSVRfQ0hBTkdFRDpcbiAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmRpc3RhbmNlLnZhbHVlLFxuICAgICAgICAgICAgdW5pdDogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hhbmdlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlUmVzdWx0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVJlc3VsdHMoKSB7XG4gICAgICBfcmVzdWx0c0FjdGlvbnMyLmRlZmF1bHQuY2hhbmdlUmVzdWx0KHtcbiAgICAgICAgcXVhbnRpdHk6IHRoaXMucXVhbnRpdHksXG4gICAgICAgIGRpc3RhbmNlOiB0aGlzLmRpc3RhbmNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzdWx0c1N0b3JlO1xufSkoX3N0b3JlMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVzdWx0c1N0b3JlO1xuXG59LHtcIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmFjdGlvbnMuanNcIjo4LFwiLi4vZGlzdGFuY2UvZGlzdGFuY2UuY2xhc3MuanNcIjo5LFwiLi4vZGlzdGFuY2UvZGlzdGFuY2UuZGlzcGF0Y2hlci5qc1wiOjEwLFwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuYWN0aW9ucy5qc1wiOjE2LFwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuY2xhc3MuanNcIjoxNyxcIi4uL3F1YW50aXR5L3F1YW50aXR5LmRpc3BhdGNoZXIuanNcIjoxOCxcIi4uL3Rvb2xzL3N0b3JlLmpzXCI6MjksXCIuL3Jlc3VsdHMuYWN0aW9ucy5qc1wiOjI1fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIERpc3BhdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaXNwYXRjaGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXNwYXRjaGVyKTtcblxuICAgIHRoaXMuX2xpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaXNwYXRjaGVyLCBbe1xuICAgIGtleTogXCJkaXNwYXRjaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwYXRjaChvYmopIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gbGlzdGVuZXIob2JqKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWdpc3RlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcihjYWxsYmFjaykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gU3ltYm9sKCk7XG5cbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zZXQobGlzdGVuZXIsIGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnJlZ2lzdGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXIobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGlzcGF0Y2hlcjtcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERpc3BhdGNoZXI7XG5cbn0se31dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTdG9yZSA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdG9yZSk7XG5cbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RvcmUsIFt7XG4gICAga2V5OiBcImNoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2UoKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25DaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoY2FsbGJhY2spIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IFN5bWJvbCgpO1xuXG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc2V0KGxpc3RlbmVyLCBjYWxsYmFjayk7XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5yZWdpc3RlckNoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyQ2hhbmdlKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0b3JlO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU3RvcmU7XG5cbn0se31dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZpbmVDb25zdFByb3BlcnR5ID0gZGVmaW5lQ29uc3RQcm9wZXJ0eTtcbmZ1bmN0aW9uIGRlZmluZUNvbnN0UHJvcGVydHkob2JqLCBwcm9wLCB2YWx1ZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbn0se31dfSx7fSxbMTRdKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Wkc5dExtcHpMMlJwYzNRdlpHcHpMMlF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Wkc5dExtcHpMMlJwYzNRdlpHcHpMMlJxYzJaNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyUnZiUzVxY3k5a2FYTjBMMlJxY3k5bWFXNWtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMlJ2YlM1cWN5OWthWE4wTDJScWN5OXRZVzVwY0hWc1lYUnBiMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Wkc5dExtcHpMMlJwYzNRdlpHcHpMM04wZVd4bGN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWtiMjB1YW5NdlpHbHpkQzlwYm1SbGVDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWtiMjB1YW5NdlpHbHpkQzkxZEdsc0wyaDBiV3d1YW5NaUxDSndkV0pzYVdNdmMzSmpMMlJwYzNSaGJtTmxMMlJwYzNSaGJtTmxMbUZqZEdsdmJuTXVhbk1pTENKd2RXSnNhV012YzNKakwyUnBjM1JoYm1ObEwyUnBjM1JoYm1ObExtTnNZWE56TG1weklpd2ljSFZpYkdsakwzTnlZeTlrYVhOMFlXNWpaUzlrYVhOMFlXNWpaUzVrYVhOd1lYUmphR1Z5TG1weklpd2ljSFZpYkdsakwzTnlZeTlrYVhOMFlXNWpaUzlrYVhOMFlXNWpaUzVxY3lJc0luQjFZbXhwWXk5emNtTXZaR2x6ZEdGdVkyVXZaR2x6ZEdGdVkyVXVjM1J2Y21VdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDJobFlXUmxjaTlvWldGa1pYSXVhbk1pTENKd2RXSnNhV012YzNKakwybHVaR1Y0TG1weklpd2ljSFZpYkdsakwzTnlZeTlwYm5CMWRITXZhVzV3ZFhSekxXTnZiblJoYVc1bGNpNXFjeUlzSW5CMVlteHBZeTl6Y21NdmNYVmhiblJwZEhrdmNYVmhiblJwZEhrdVlXTjBhVzl1Y3k1cWN5SXNJbkIxWW14cFl5OXpjbU12Y1hWaGJuUnBkSGt2Y1hWaGJuUnBkSGt1WTJ4aGMzTXVhbk1pTENKd2RXSnNhV012YzNKakwzRjFZVzUwYVhSNUwzRjFZVzUwYVhSNUxtUnBjM0JoZEdOb1pYSXVhbk1pTENKd2RXSnNhV012YzNKakwzRjFZVzUwYVhSNUwzRjFZVzUwYVhSNUxtcHpJaXdpY0hWaWJHbGpMM055WXk5eGRXRnVkR2wwZVM5eGRXRnVkR2wwZVM1emRHOXlaUzVxY3lJc0luQjFZbXhwWXk5emNtTXZjbVZ6ZFd4MGN5OW1kV1ZzTFdOdmJuTjFiWEIwYVc5dUwyWjFaV3d0WTI5dWMzVnRjSFJwYjI0dVkyeGhjM011YW5NaUxDSndkV0pzYVdNdmMzSmpMM0psYzNWc2RITXZablZsYkMxamIyNXpkVzF3ZEdsdmJpOW1kV1ZzTFdOdmJuTjFiWEIwYVc5dUxtcHpJaXdpY0hWaWJHbGpMM055WXk5eVpYTjFiSFJ6TDJaMVpXd3RZMjl1YzNWdGNIUnBiMjR2Wm5WbGJDMWpiMjV6ZFcxd2RHbHZiaTV6ZEc5eVpTNXFjeUlzSW5CMVlteHBZeTl6Y21NdmNtVnpkV3gwY3k5eVpYTjFiSFJ6TFdOdmJuUmhhVzVsY2k1cWN5SXNJbkIxWW14cFl5OXpjbU12Y21WemRXeDBjeTl5WlhOMWJIUnpMbUZqZEdsdmJuTXVhbk1pTENKd2RXSnNhV012YzNKakwzSmxjM1ZzZEhNdmNtVnpkV3gwY3k1a2FYTndZWFJqYUdWeUxtcHpJaXdpY0hWaWJHbGpMM055WXk5eVpYTjFiSFJ6TDNKbGMzVnNkSE11YzNSdmNtVXVhbk1pTENKd2RXSnNhV012YzNKakwzUnZiMnh6TDJScGMzQmhkR05vWlhJdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNSdmIyeHpMM04wYjNKbExtcHpJaXdpY0hWaWJHbGpMM055WXk5MGIyOXNjeTkxZEdsc2N5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTTFRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU4yUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJwRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZEZEUxQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTTFRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN096czdPenM3T3p0SlEyNURjVUlzWlVGQlpUdFhRVUZtTEdWQlFXVTdNRUpCUVdZc1pVRkJaVHM3TzJWQlFXWXNaVUZCWlRzN1owTkJRMllzUzBGQlN5eEZRVUZGTzBGQlEzaENMRzFEUVVGdFFpeFJRVUZSTEVOQlFVTTdRVUZETVVJc1dVRkJTU3hGUVVGRkxHVkJRV1VzUTBGQlF5eGhRVUZoTzBGQlEyNURMRmxCUVVrc1JVRkJSU3hMUVVGTE8wOUJRMW9zUTBGQlF5eERRVUZETzB0QlEwbzdPenNyUWtGRmFVSXNTVUZCU1N4RlFVRkZPMEZCUTNSQ0xHMURRVUZ0UWl4UlFVRlJMRU5CUVVNN1FVRkRNVUlzV1VGQlNTeEZRVUZGTEdWQlFXVXNRMEZCUXl4WlFVRlpPMEZCUTJ4RExGbEJRVWtzUlVGQlJTeEpRVUZKTzA5QlExZ3NRMEZCUXl4RFFVRkRPMHRCUTBvN096dFRRV0pyUWl4bFFVRmxPenM3YTBKQlFXWXNaVUZCWlRzN1FVRm5RbkJETEZkQmJFSlJMRzFDUVVGdFFpeEZRV3RDVUN4bFFVRmxMRVZCUVVVc1pVRkJaU3hGUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEYUVVc1YwRnVRbEVzYlVKQlFXMUNMRVZCYlVKUUxHVkJRV1VzUlVGQlJTeGpRVUZqTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenM3T3pzN096czdPenM3T3p0SlEzQkNNVU1zVVVGQlVUdEJRVU16UWl4WFFVUnRRaXhSUVVGUkxFOUJRMDg3ZVVKQlFYSkNMRWxCUVVrN1VVRkJTaXhKUVVGSkxEWkNRVUZETEVsQlFVazdNRUpCUVVVc1MwRkJTenRSUVVGTUxFdEJRVXNzT0VKQlFVTXNRMEZCUXpzN01FSkJSRm9zVVVGQlVUczdRVUZGZWtJc1VVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYWtJc1VVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdSMEZEY0VJN08yVkJTbXRDTEZGQlFWRTdPelpDUVUxc1FpeExRVUZMTEVWQlFVVTdRVUZEWkN4VlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTTVRanM3TzFOQlVtdENMRkZCUVZFN096dHJRa0ZCVWl4UlFVRlJPenM3T3pzN096czdPenM3T3pzN2EwSkRSV1FzTUVKQlFXZENPenM3T3pzN096czdPMUZEY1VKbUxGVkJRVlVzUjBGQlZpeFZRVUZWT3pzN096czdPenM3T3pzN096czdPenM3UVVGc1FqRkNMRWxCUVVrc1UwRkJVeXhIUVVGSE8wRkJRMlFzVFVGQlNTeHhRMEZMU0R0RFFVTkdMRU5CUVVNN08wRkJSVVlzU1VGQlNTeFZRVUZWTEVkQlFVYzdRVUZEWml4WlFVRlZMRVZCUVVVc1NVRkJTVHRCUVVOb1FpeFhRVUZUTEVWQlFVVXNTVUZCU1R0QlFVTm1MRkZCUVUwc1JVRkJSU3hKUVVGSk8wRkJRMW9zVDBGQlN5eEZRVUZGTEVsQlFVazdRMEZEV2l4RFFVRkRPenRCUVVWR0xFbEJRVWtzWVVGQllTeFpRVUZCTEVOQlFVTTdPMEZCUlZnc1UwRkJVeXhWUVVGVkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEzSkRMRmxCUVZVc1EwRkJReXhUUVVGVExFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGVrUXNaVUZCWVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRekZDTEc5Q1FVRnJRaXhGUVVGRkxFTkJRVU03TzBGQlJYSkNMR1ZCUVdFc1IwRkJSeXcyUWtGQmJVSXNRMEZCUXp0QlFVTndReXhsUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWYzdRVUZEYUVNc1pVRkJWeXhEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRNVU1zUTBGQlF5eERRVUZET3p0QlFVVklMRFJDUVVGblFpeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRha01zWlVGQllTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU03UTBGRGNFTTdPMEZCUlVRc1UwRkJVeXhYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEzcENMRmxCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXp0RFFVTnVRenM3UVVGRlJDeFRRVUZUTEdGQlFXRXNRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRha01zV1VGQlZTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkRia01zV1VGQlZTeERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8wRkJRM0pGTEZsQlFWVXNRMEZCUXl4TFFVRkxMRWRCUVVjc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF6dERRVU53UlRzN1FVRkZSQ3hUUVVGVExHdENRVUZyUWl4SFFVRkhPMEZCUXpWQ0xGbEJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWTXNTMEZCU3l4RlFVRkZPMEZCUXpGRUxEaENRVUZuUWl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SFFVTnFSQ3hEUVVGRExFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVTTNRMjlDTEdGQlFXRTdXVUZCWWl4aFFVRmhPenRCUVVOb1F5eFhRVVJ0UWl4aFFVRmhMRWRCUTJ4Q096QkNRVVJMTEdGQlFXRTdPM1ZGUVVGaUxHRkJRV0U3TzBGQlNUbENMRlZCUVVzc1VVRkJVU3hIUVVGSExEUkNRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVWcVF5eFZRVUZMTEZGQlFWRXNSMEZCUnl3MlFrRkJiVUlzVVVGQlVTeERRVUZETEZWQlFVTXNVVUZCVVN4RlFVRkxPMEZCUTNoRUxHTkJRVThzVVVGQlVTeERRVUZETEVsQlFVazdRVUZEY0VJc1lVRkJTeXd3UWtGQlowSXNZVUZCWVR0QlFVTm9ReXhuUWtGQlN5eFJRVUZSTEVkQlFVY3NORUpCUVdFN1FVRkRNMElzWjBKQlFVa3NSVUZCUlN4TlFVRkxMRkZCUVZFc1EwRkJReXhKUVVGSk8wRkJRM2hDTEdsQ1FVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3VjBGRGNrSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHZENRVUZOT3p0QlFVRkJMRUZCUlZJc1lVRkJTeXd3UWtGQlowSXNXVUZCV1R0QlFVTXZRaXhuUWtGQlN5eFJRVUZSTEVkQlFVY3NORUpCUVdFN1FVRkRNMElzYVVKQlFVc3NSVUZCUlN4TlFVRkxMRkZCUVZFc1EwRkJReXhMUVVGTE8wRkJRekZDTEdkQ1FVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3VjBGRGNFSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHZENRVUZOTzBGQlFVRXNUMEZEVURzN1FVRkZSQ3haUVVGTExFMUJRVTBzUlVGQlJTeERRVUZETzB0QlEyWXNRMEZCUXl4RFFVRkRPenRIUVVOS096dGxRVE5DYTBJc1lVRkJZVHM3ZVVOQk5rSllPMEZCUTI1Q0xHMURRVUZ0UWl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzB0QlF6bERPenM3VTBFdlFtdENMR0ZCUVdFN096dHJRa0ZCWWl4aFFVRmhPenM3T3pzN096czdPMUZEU1d4Q0xGVkJRVlVzUjBGQlZpeFZRVUZWT3pzN096czdPenM3TzBGQlVqRkNMRWxCUVVrc1UwRkJVeXhIUVVGSE8wRkJRMlFzVFVGQlNTeHhRMEZKU0R0RFFVTkdMRU5CUVVNN08wRkJSVXNzVTBGQlV5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTNKRExGbEJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wTkJRMjVET3pzN096czdPenM3T3p0SlExWlhMRTFCUVUwN096czdTVUZEVGl4bFFVRmxPenM3TzBsQlEyWXNaMEpCUVdkQ096czdPenM3UVVGRk5VSXNTVUZCU1N4blFrRkJaMElzUjBGQlJ5eHRRa0ZCU1N4bFFVRmxMRU5CUVVNc1EwRkJRenRCUVVNMVF5eEpRVUZKTEdkQ1FVRm5RaXhIUVVGSExHMUNRVUZKTEhsQ1FVRjVRaXhEUVVGRExFTkJRVU03UVVGRGRFUXNTVUZCU1N4cFFrRkJhVUlzUjBGQlJ5eHRRa0ZCU1N3d1FrRkJNRUlzUTBGQlF5eERRVUZET3p0QlFVVjRSQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03UVVGRGNFTXNaVUZCWlN4RFFVRkRMRlZCUVZVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMEZCUXpkRExHZENRVUZuUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPenM3T3pzN096czdPMUZEVXk5Q0xGVkJRVlVzUjBGQlZpeFZRVUZWT3pzN096czdPenRKUVhCQ1pDeFJRVUZST3pzN08wbEJRMUlzVVVGQlVUczdPenM3T3pzN1FVRkZjRUlzU1VGQlNTeFRRVUZUTEVkQlFVYzdRVUZEWkN4TlFVRkpMSEZEUVUxSU8wTkJRMFlzUTBGQlF6czdRVUZGUml4SlFVRkpMRlZCUVZVc1IwRkJSenRCUVVObUxGbEJRVlVzUlVGQlJTeEpRVUZKTzBGQlEyaENMR2xDUVVGbExFVkJRVVVzU1VGQlNUdEJRVU55UWl4blFrRkJZeXhGUVVGRkxFbEJRVWs3UVVGRGNFSXNaMEpCUVdNc1JVRkJSU3hKUVVGSk8wTkJRM0pDTEVOQlFVTTdPMEZCUlVzc1UwRkJVeXhWUVVGVkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEzSkRMRmxCUVZVc1EwRkJReXhsUVVGbExFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TzBGQlJTOUVMR1ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZGTVVJc1ZVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1FVRkRMME1zVlVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03UTBGRGFFUTdPMEZCUlVRc1UwRkJVeXhoUVVGaExFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEycERMRmxCUVZVc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZETzBGQlEyNURMRmxCUVZVc1EwRkJReXhqUVVGakxFZEJRVWNzVlVGQlZTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0QlFVTXZSU3haUVVGVkxFTkJRVU1zWTBGQll5eEhRVUZITEZWQlFWVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1EwRkRhRVk3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlF5OUNiMElzWlVGQlpUdFhRVUZtTEdWQlFXVTdNRUpCUVdZc1pVRkJaVHM3TzJWQlFXWXNaVUZCWlRzN1owTkJRMllzUzBGQlN5eEZRVUZGTzBGQlEzaENMRzFEUVVGdFFpeFJRVUZSTEVOQlFVTTdRVUZETVVJc1dVRkJTU3hGUVVGRkxHVkJRV1VzUTBGQlF5eGhRVUZoTzBGQlEyNURMRmxCUVVrc1JVRkJSU3hMUVVGTE8wOUJRMW9zUTBGQlF5eERRVUZETzB0QlEwbzdPenNyUWtGRmFVSXNTVUZCU1N4RlFVRkZPMEZCUTNSQ0xHMURRVUZ0UWl4UlFVRlJMRU5CUVVNN1FVRkRNVUlzV1VGQlNTeEZRVUZGTEdWQlFXVXNRMEZCUXl4WlFVRlpPMEZCUTJ4RExGbEJRVWtzUlVGQlJTeEpRVUZKTzA5QlExZ3NRMEZCUXl4RFFVRkRPMHRCUTBvN096dFRRV0pyUWl4bFFVRmxPenM3YTBKQlFXWXNaVUZCWlRzN1FVRm5RbkJETEZkQmJFSlJMRzFDUVVGdFFpeEZRV3RDVUN4bFFVRmxMRVZCUVVVc1pVRkJaU3hGUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEYUVVc1YwRnVRbEVzYlVKQlFXMUNMRVZCYlVKUUxHVkJRV1VzUlVGQlJTeGpRVUZqTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenM3T3pzN096czdPenM3T3p0SlEzQkNNVU1zVVVGQlVUdEJRVU16UWl4WFFVUnRRaXhSUVVGUkxFOUJRMDA3ZVVKQlFYQkNMRWxCUVVrN1VVRkJTaXhKUVVGSkxEWkNRVUZETEVkQlFVYzdNRUpCUVVVc1MwRkJTenRSUVVGTUxFdEJRVXNzT0VKQlFVTXNRMEZCUXpzN01FSkJSRmdzVVVGQlVUczdRVUZGZWtJc1VVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYWtJc1VVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdSMEZEY0VJN08yVkJTbXRDTEZGQlFWRTdPelpDUVUxc1FpeExRVUZMTEVWQlFVVTdRVUZEWkN4VlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTTVRanM3TzFOQlVtdENMRkZCUVZFN096dHJRa0ZCVWl4UlFVRlJPenM3T3pzN096czdPenM3T3pzN2EwSkRSV1FzTUVKQlFXZENPenM3T3pzN096czdPMUZEY1VKbUxGVkJRVlVzUjBGQlZpeFZRVUZWT3pzN096czdPenM3T3pzN096czdPenM3UVVGc1FqRkNMRWxCUVVrc1UwRkJVeXhIUVVGSE8wRkJRMlFzVFVGQlNTeHhRMEZMU0R0RFFVTkdMRU5CUVVNN08wRkJSVVlzU1VGQlNTeFZRVUZWTEVkQlFVYzdRVUZEWml4WlFVRlZMRVZCUVVVc1NVRkJTVHRCUVVOb1FpeFhRVUZUTEVWQlFVVXNTVUZCU1R0QlFVTm1MRkZCUVUwc1JVRkJSU3hKUVVGSk8wRkJRMW9zVDBGQlN5eEZRVUZGTEVsQlFVazdRMEZEV2l4RFFVRkRPenRCUVVWR0xFbEJRVWtzWVVGQllTeFpRVUZCTEVOQlFVTTdPMEZCUlZnc1UwRkJVeXhWUVVGVkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEzSkRMRmxCUVZVc1EwRkJReXhUUVVGVExFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGVrUXNaVUZCWVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRekZDTEc5Q1FVRnJRaXhGUVVGRkxFTkJRVU03TzBGQlJYSkNMR1ZCUVdFc1IwRkJSeXcyUWtGQmJVSXNRMEZCUXp0QlFVTndReXhsUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWYzdRVUZEYUVNc1pVRkJWeXhEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRNVU1zUTBGQlF5eERRVUZET3p0QlFVVklMRFJDUVVGblFpeFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRhRU1zWlVGQllTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU03UTBGRGNFTTdPMEZCUlVRc1UwRkJVeXhYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEzcENMRmxCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXp0RFFVTnVRenM3UVVGRlJDeFRRVUZUTEdGQlFXRXNRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRha01zV1VGQlZTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkRia01zV1VGQlZTeERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8wRkJRM0pGTEZsQlFWVXNRMEZCUXl4TFFVRkxMRWRCUVVjc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF6dERRVU53UlRzN1FVRkZSQ3hUUVVGVExHdENRVUZyUWl4SFFVRkhPMEZCUXpWQ0xGbEJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWTXNTMEZCU3l4RlFVRkZPMEZCUXpGRUxEaENRVUZuUWl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SFFVTnFSQ3hEUVVGRExFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVTTNRMjlDTEdGQlFXRTdXVUZCWWl4aFFVRmhPenRCUVVOb1F5eFhRVVJ0UWl4aFFVRmhMRWRCUTJ4Q096QkNRVVJMTEdGQlFXRTdPM1ZGUVVGaUxHRkJRV0U3TzBGQlNUbENMRlZCUVVzc1VVRkJVU3hIUVVGSExEUkNRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVWcVF5eFZRVUZMTEZGQlFWRXNSMEZCUnl3MlFrRkJiVUlzVVVGQlVTeERRVUZETEZWQlFVTXNVVUZCVVN4RlFVRkxPMEZCUTNoRUxHTkJRVThzVVVGQlVTeERRVUZETEVsQlFVazdRVUZEY0VJc1lVRkJTeXd3UWtGQlowSXNZVUZCWVR0QlFVTm9ReXhuUWtGQlN5eFJRVUZSTEVkQlFVY3NORUpCUVdFN1FVRkRNMElzWjBKQlFVa3NSVUZCUlN4TlFVRkxMRkZCUVZFc1EwRkJReXhKUVVGSk8wRkJRM2hDTEdsQ1FVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3VjBGRGNrSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHZENRVUZOT3p0QlFVRkJMRUZCUlZJc1lVRkJTeXd3UWtGQlowSXNXVUZCV1R0QlFVTXZRaXhuUWtGQlN5eFJRVUZSTEVkQlFVY3NORUpCUVdFN1FVRkRNMElzYVVKQlFVc3NSVUZCUlN4TlFVRkxMRkZCUVZFc1EwRkJReXhMUVVGTE8wRkJRekZDTEdkQ1FVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3VjBGRGNFSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHZENRVUZOTzBGQlFVRXNUMEZEVURzN1FVRkZSQ3haUVVGTExFMUJRVTBzUlVGQlJTeERRVUZETzB0QlEyWXNRMEZCUXl4RFFVRkRPenRIUVVOS096dGxRVE5DYTBJc1lVRkJZVHM3ZVVOQk5rSllPMEZCUTI1Q0xHMURRVUZ0UWl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzB0QlF6bERPenM3VTBFdlFtdENMR0ZCUVdFN096dHJRa0ZCWWl4aFFVRmhPenM3T3pzN096czdPenM3TzBsRFRtSXNaMEpCUVdkQ08xZEJRV2hDTEdkQ1FVRm5RanN3UWtGQmFFSXNaMEpCUVdkQ096czdaVUZCYUVJc1owSkJRV2RDT3pzclFrRkRTenNyUWtGQk0wSXNVVUZCVVR0VlFVRlNMRkZCUVZFc2FVTkJRVU1zUlVGQlJUc3JRa0ZCUlN4UlFVRlJPMVZCUVZJc1VVRkJVU3hwUTBGQlF5eEZRVUZGT3p0QlFVTnVReXhWUVVGSkxFMUJRVTBzUjBGQlJ6dEJRVU5ZTEdGQlFVc3NSVUZCUlN4RFFVRkRPMEZCUTFJc1dVRkJTU3hGUVVGTExGRkJRVkVzUTBGQlF5eEpRVUZKTEZOQlFVa3NVVUZCVVN4RFFVRkRMRWxCUVVrc1FVRkJSVHRQUVVNeFF5eERRVUZET3p0QlFVVkdMRlZCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVOMFF5eGxRVUZQTEUxQlFVMHNRMEZCUXp0UFFVTm1PenRCUVVWRUxGbEJRVTBzUTBGQlF5eExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZET3p0QlFVVXZReXhaUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVONFJDeGhRVUZQTEUxQlFVMHNRMEZCUXp0TFFVTm1PenM3VTBGbWEwSXNaMEpCUVdkQ096czdhMEpCUVdoQ0xHZENRVUZuUWpzN096czdPenM3T3p0UlEzRkNja0lzVlVGQlZTeEhRVUZXTEZWQlFWVTdPenM3T3pzN096czdPenM3TzBGQmFrSXhRaXhKUVVGSkxGTkJRVk1zUjBGQlJ6dEJRVU5rTEUxQlFVa3NjVU5CU1VnN1EwRkRSaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NWVUZCVlN4SFFVRkhPMEZCUTJZc1dVRkJWU3hGUVVGRkxFbEJRVWs3UVVGRGFFSXNhMEpCUVdkQ0xFVkJRVVVzU1VGQlNUdEJRVU4wUWl4WFFVRlRMRVZCUVVVc1NVRkJTVHRCUVVObUxGbEJRVlVzUlVGQlJTeEpRVUZKTzBOQlEycENMRU5CUVVNN08wRkJSVVlzU1VGQlNTeHZRa0ZCYjBJc1dVRkJRU3hEUVVGRE96dEJRVVZzUWl4VFFVRlRMRlZCUVZVc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGNrTXNXVUZCVlN4RFFVRkRMR2RDUVVGblFpeEhRVUZITEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEyaEZMR1ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZGTVVJc2MwSkJRVzlDTEVkQlFVY3NiME5CUVRCQ0xFTkJRVU03TzBGQlJXeEVMSE5DUVVGdlFpeERRVUZETEZGQlFWRXNRMEZCUXl4WlFVRlhPMEZCUTNaRExEQkNRVUZ6UWl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGRCUTNSRUxFTkJRVU1zUTBGQlF6czdRVUZGU0N4elFrRkJiMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0RFFVTXZRanM3UVVGRlJDeFRRVUZUTEhOQ1FVRnpRaXhEUVVGRExFOUJRVThzUlVGQlJUdEJRVU4yUXl4WlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUXpsRExGbEJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNVMEZCVXl4SFFVRkhMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU03UTBGRGFrUTdPMEZCUlVRc1UwRkJVeXhoUVVGaExFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEycERMRmxCUVZVc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZETzBGQlEyNURMRmxCUVZVc1EwRkJReXhUUVVGVExFZEJRVWNzVlVGQlZTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVTndSU3haUVVGVkxFTkJRVU1zVlVGQlZTeEhRVUZITEZWQlFWVXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1EwRkRNVVU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEpRM0JEYjBJc2IwSkJRVzlDTzFsQlFYQkNMRzlDUVVGdlFqczdRVUZEZGtNc1YwRkViVUlzYjBKQlFXOUNMRWRCUTNwQ096QkNRVVJMTEc5Q1FVRnZRanM3ZFVWQlFYQkNMRzlDUVVGdlFqczdRVUZKY2tNc1ZVRkJTeXhQUVVGUExFZEJRVWNzSzBKQlFXbENMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6czdRVUZGZWtNc1owTkJRV2xDTEZGQlFWRXNRMEZCUXl4VlFVRkRMRkZCUVZFc1JVRkJTenRCUVVOMFF5eGpRVUZQTEZGQlFWRXNRMEZCUXl4SlFVRkpPMEZCUTNCQ0xHRkJRVXNzZVVKQlFUSkNMR05CUVdNN1FVRkROVU1zWjBKQlFVc3NUMEZCVHl4SFFVRkhMQ3RDUVVGcFFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRM0JFTEdkQ1FVRkxMRTFCUVUwc1EwRkJReXhOUVVGTExFOUJRVThzUTBGQlF5eERRVUZET3p0QlFVVXhRaXhuUWtGQlRUdEJRVUZCTEU5QlExQTdTMEZEUml4RFFVRkRMRU5CUVVNN08wZEJRMG83TzFOQlptdENMRzlDUVVGdlFqczdPMnRDUVVGd1FpeHZRa0ZCYjBJN096czdPenM3T3pzN1VVTmhla0lzVlVGQlZTeEhRVUZXTEZWQlFWVTdPenM3T3pzN08wbEJia0prTEdOQlFXTTdPenM3T3pzN096czdPenRCUVVjeFFpeEpRVUZKTEZsQlFWa3NXVUZCUVN4RFFVRkRPenRCUVVWcVFpeEpRVUZKTEZOQlFWTXNSMEZCUnp0QlFVTmtMRTFCUVVrc2NVTkJTVWc3UTBGRFJpeERRVUZET3p0QlFVVkdMRWxCUVVrc1ZVRkJWU3hIUVVGSE8wRkJRMllzV1VGQlZTeEZRVUZGTEVsQlFVazdRVUZEYUVJc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1R0QlFVTjJRaXhwUWtGQlpTeEZRVUZGTEVsQlFVazdRMEZEZEVJc1EwRkJRenM3UVVGRlN5eFRRVUZUTEZWQlFWVXNRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRja01zV1VGQlZTeERRVUZETEdsQ1FVRnBRaXhIUVVGSExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBGTEdWQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenM3UVVGRk1VSXNZMEZCV1N4SFFVRkhMRFJDUVVGclFpeERRVUZET3p0QlFVVnNReXhuUWtGQll5eERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03TzBGQlJYUkVMR05CUVZrc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF6dERRVU01UWpzN1FVRkZSQ3hUUVVGVExHRkJRV0VzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEYWtNc1dVRkJWU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdRVUZEYmtNc1dVRkJWU3hEUVVGRExHVkJRV1VzUjBGQlJ5eFZRVUZWTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExFTkJRVU03UTBGRE0wWTdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUXk5Q2IwSXNZMEZCWXp0WFFVRmtMR05CUVdNN01FSkJRV1FzWTBGQll6czdPMlZCUVdRc1kwRkJZenM3YVVOQlEySXNTMEZCU3l4RlFVRkZPMEZCUTNwQ0xHdERRVUZyUWl4UlFVRlJMRU5CUVVNN1FVRkRla0lzV1VGQlNTeEZRVUZGTEdOQlFXTXNRMEZCUXl4alFVRmpPMEZCUTI1RExGbEJRVWtzUlVGQlJTeExRVUZMTzA5QlExb3NRMEZCUXl4RFFVRkRPMHRCUTBvN096dFRRVTVyUWl4alFVRmpPenM3YTBKQlFXUXNZMEZCWXpzN1FVRlRia01zVjBGWVVTeHRRa0ZCYlVJc1JVRlhVQ3hqUVVGakxFVkJRVVVzWjBKQlFXZENMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdPenM3T3pzN096czdPenM3TzJ0Q1ExWnFSQ3d3UWtGQlowSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlExVldMRmxCUVZrN1dVRkJXaXhaUVVGWk96dEJRVU12UWl4WFFVUnRRaXhaUVVGWkxFZEJRMnBDT3pCQ1FVUkxMRmxCUVZrN08zVkZRVUZhTEZsQlFWazdPMEZCU1RkQ0xGVkJRVXNzVVVGQlVTeEhRVUZITERSQ1FVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRMnBETEZWQlFVc3NVVUZCVVN4SFFVRkhMRFJDUVVGaExFVkJRVVVzUTBGQlF5eERRVUZET3p0QlFVVnFReXhwUTBGQmJVSXNVVUZCVVN4RFFVRkRMRlZCUVVNc1VVRkJVU3hGUVVGTE8wRkJRM2hETEZsQlFVc3NiMEpCUVc5Q0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdPMEZCUlhCRExGbEJRVXNzWVVGQllTeEZRVUZGTEVOQlFVTTdTMEZEZEVJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdsRFFVRnRRaXhSUVVGUkxFTkJRVU1zVlVGQlF5eFJRVUZSTEVWQlFVczdRVUZEZUVNc1dVRkJTeXh2UWtGQmIwSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenM3UVVGRmNFTXNXVUZCU3l4aFFVRmhMRVZCUVVVc1EwRkJRenRMUVVOMFFpeERRVUZETEVOQlFVTTdPMGRCUTBvN08yVkJiRUpyUWl4WlFVRlpPenQ1UTBGdlFsWXNVVUZCVVN4RlFVRkZPMEZCUXpkQ0xHTkJRVThzVVVGQlVTeERRVUZETEVsQlFVazdRVUZEY0VJc1lVRkJTeXd3UWtGQlowSXNZVUZCWVR0QlFVTm9ReXhqUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITERSQ1FVRmhPMEZCUXpOQ0xHZENRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSk8wRkJRM2hDTEdsQ1FVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3VjBGRGNrSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHZENRVUZOT3p0QlFVRkJMRUZCUlZJc1lVRkJTeXd3UWtGQlowSXNXVUZCV1R0QlFVTXZRaXhqUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITERSQ1FVRmhPMEZCUXpOQ0xHbENRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTE8wRkJRekZDTEdkQ1FVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3VjBGRGNFSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHZENRVUZOTzBGQlFVRXNUMEZEVURzN1FVRkZSQ3hWUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdTMEZEWmpzN08zbERRVVZ2UWl4UlFVRlJMRVZCUVVVN1FVRkROMElzWTBGQlR5eFJRVUZSTEVOQlFVTXNTVUZCU1R0QlFVTndRaXhoUVVGTExEQkNRVUZuUWl4aFFVRmhPMEZCUTJoRExHTkJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NORUpCUVdFN1FVRkRNMElzWjBKQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWs3UVVGRGVFSXNhVUpCUVVzc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNUdFhRVU55UWl4RFFVRkRMRU5CUVVNN08wRkJSVWdzWjBKQlFVMDdPMEZCUVVFc1FVRkZVaXhoUVVGTExEQkNRVUZuUWl4WlFVRlpPMEZCUXk5Q0xHTkJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NORUpCUVdFN1FVRkRNMElzYVVKQlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXM3UVVGRE1VSXNaMEpCUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNUdFhRVU53UWl4RFFVRkRMRU5CUVVNN08wRkJSVWdzWjBKQlFVMDdRVUZCUVN4UFFVTlFPenRCUVVWRUxGVkJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0TFFVTm1PenM3YjBOQlJXVTdRVUZEWkN3clFrRkJaU3haUVVGWkxFTkJRVU03UVVGRE1VSXNaMEpCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVUdEJRVU4yUWl4blFrRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTzA5QlEzaENMRU5CUVVNc1EwRkJRenRMUVVOS096czdVMEZ5Uld0Q0xGbEJRVms3T3p0clFrRkJXaXhaUVVGWk96czdPenM3T3pzN096czdPMGxEV2xvc1ZVRkJWVHRCUVVNM1FpeFhRVVJ0UWl4VlFVRlZMRWRCUTJZN01FSkJSRXNzVlVGQlZUczdRVUZGTTBJc1VVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGRCUXpkQ096dGxRVWhyUWl4VlFVRlZPenMyUWtGTGNFSXNSMEZCUnl4RlFVRkZPMEZCUTFvc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUXl4UlFVRlJPMlZCUVVzc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF6dFBRVUZCTEVOQlFVTXNRMEZCUXp0TFFVTjBSRHM3T3paQ1FVVlJMRkZCUVZFc1JVRkJSVHRCUVVOcVFpeFZRVUZKTEZGQlFWRXNSMEZCUnl4TlFVRk5MRVZCUVVVc1EwRkJRenM3UVVGRmVFSXNWVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPenRCUVVWNFF5eGhRVUZQTEZGQlFWRXNRMEZCUXp0TFFVTnFRanM3T3l0Q1FVVlZMRkZCUVZFc1JVRkJSVHRCUVVOdVFpeGhRVUZQTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzB0QlEzcERPenM3VTBGdVFtdENMRlZCUVZVN096dHJRa0ZCVml4VlFVRlZPenM3T3pzN096czdPenM3TzBsRFFWWXNTMEZCU3p0QlFVTjRRaXhYUVVSdFFpeExRVUZMTEVkQlExWTdNRUpCUkVzc1MwRkJTenM3UVVGRmRFSXNVVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzBkQlF6ZENPenRsUVVoclFpeExRVUZMT3pzMlFrRkxaanRCUVVOUUxGVkJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVNc1VVRkJVVHRsUVVGTExGRkJRVkVzUlVGQlJUdFBRVUZCTEVOQlFVTXNRMEZCUXp0TFFVTnVSRHM3T3paQ1FVVlJMRkZCUVZFc1JVRkJSVHRCUVVOcVFpeFZRVUZKTEZGQlFWRXNSMEZCUnl4TlFVRk5MRVZCUVVVc1EwRkJRenM3UVVGRmVFSXNWVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPenRCUVVWNFF5eGhRVUZQTEZGQlFWRXNRMEZCUXp0TFFVTnFRanM3TzNGRFFVVm5RaXhSUVVGUkxFVkJRVVU3UVVGRGVrSXNZVUZCVHl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0TFFVTjZRenM3TzFOQmJrSnJRaXhMUVVGTE96czdhMEpCUVV3c1MwRkJTenM3T3pzN096czdVVU5CVml4dFFrRkJiVUlzUjBGQmJrSXNiVUpCUVcxQ08wRkJRVFZDTEZOQlFWTXNiVUpCUVcxQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkRjRVFzVVVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRk8wRkJReTlDTEdOQlFWVXNSVUZCUlN4SlFVRkpPMEZCUTJoQ0xGbEJRVkVzUlVGQlJTeExRVUZMTzBGQlEyWXNaMEpCUVZrc1JVRkJSU3hMUVVGTE8wRkJRMjVDTEZOQlFVc3NSVUZCUlN4TFFVRkxPMGRCUTJJc1EwRkJReXhEUVVGRE8wTkJRMG9pTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpQmxLSFFzYml4eUtYdG1kVzVqZEdsdmJpQnpLRzhzZFNsN2FXWW9JVzViYjEwcGUybG1LQ0YwVzI5ZEtYdDJZWElnWVQxMGVYQmxiMllnY21WeGRXbHlaVDA5WENKbWRXNWpkR2x2Ymx3aUppWnlaWEYxYVhKbE8ybG1LQ0YxSmlaaEtYSmxkSFZ5YmlCaEtHOHNJVEFwTzJsbUtHa3BjbVYwZFhKdUlHa29ieXdoTUNrN2RtRnlJR1k5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXR2SzF3aUoxd2lLVHQwYUhKdmR5Qm1MbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNabjEyWVhJZ2JEMXVXMjlkUFh0bGVIQnZjblJ6T250OWZUdDBXMjlkV3pCZExtTmhiR3dvYkM1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0dVcGUzWmhjaUJ1UFhSYmIxMWJNVjFiWlYwN2NtVjBkWEp1SUhNb2JqOXVPbVVwZlN4c0xHd3VaWGh3YjNKMGN5eGxMSFFzYml4eUtYMXlaWFIxY200Z2JsdHZYUzVsZUhCdmNuUnpmWFpoY2lCcFBYUjVjR1Z2WmlCeVpYRjFhWEpsUFQxY0ltWjFibU4wYVc5dVhDSW1KbkpsY1hWcGNtVTdabTl5S0haaGNpQnZQVEE3Ynp4eUxteGxibWQwYUR0dkt5c3BjeWh5VzI5ZEtUdHlaWFIxY200Z2MzMHBJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVYRzUyWVhJZ1gyaDBiV3dnUFNCeVpYRjFhWEpsS0NjdUxpOTFkR2xzTDJoMGJXd3Vhbk1uS1R0Y2JseHVkbUZ5SUY5b2RHMXNNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMmgwYld3cE8xeHVYRzUyWVhJZ1gyMWhibWx3ZFd4aGRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dmJXRnVhWEIxYkdGMGFXOXVMbXB6SnlrN1hHNWNiblpoY2lCZlptbHVaQ0E5SUhKbGNYVnBjbVVvSnk0dlptbHVaQzVxY3ljcE8xeHVYRzUyWVhJZ1gzTjBlV3hsY3lBOUlISmxjWFZwY21Vb0p5NHZjM1I1YkdWekxtcHpKeWs3WEc1Y2JuWmhjaUJ6ZEhsc1pYTWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVlhhV3hrWTJGeVpDaGZjM1I1YkdWektUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUW9iMkpxS1NCN0lHbG1JQ2h2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVcElIc2djbVYwZFhKdUlHOWlhanNnZlNCbGJITmxJSHNnZG1GeUlHNWxkMDlpYWlBOUlIdDlPeUJwWmlBb2IySnFJQ0U5SUc1MWJHd3BJSHNnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYWlrZ2V5QnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2dhMlY1S1NrZ2JtVjNUMkpxVzJ0bGVWMGdQU0J2WW1wYmEyVjVYVHNnZlNCOUlHNWxkMDlpYWk1a1pXWmhkV3gwSUQwZ2IySnFPeUJ5WlhSMWNtNGdibVYzVDJKcU95QjlJSDFjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dVpuVnVZM1JwYjI0Z1pHcHpLSFJsYlhCc1lYUmxLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdkR1Z0Y0d4aGRHVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2d3TENCZlptbHVaQzVtYVc1a0tTaDBaVzF3YkdGMFpTazdYRzRnSUgwZ1pXeHpaU0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gwWlcxd2JHRjBaU2twSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJmYkdWdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDd2djM1ZpYzNSeklEMGdRWEp5WVhrb1gyeGxiaUErSURFZ1B5QmZiR1Z1SUMwZ01TQTZJREFwTENCZmEyVjVJRDBnTVRzZ1gydGxlU0E4SUY5c1pXNDdJRjlyWlhrckt5a2dlMXh1SUNBZ0lDQWdjM1ZpYzNSelcxOXJaWGtnTFNBeFhTQTlJR0Z5WjNWdFpXNTBjMXRmYTJWNVhUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWDJoMGJXd3lMbVJsWm1GMWJIUXVZWEJ3Ykhrb2RXNWtaV1pwYm1Wa0xDQmJkR1Z0Y0d4aGRHVmRMbU52Ym1OaGRDaHpkV0p6ZEhNcEtUdGNiaUFnZlZ4dWZWeHVYRzVrYW5NdVkzSmxZWFJsSUQwZ1gyMWhibWx3ZFd4aGRHbHZiaTVqY21WaGRHVTdYRzVrYW5NdVkzTnpJRDBnYzNSNWJHVnpMbU56Y3p0Y2JtUnFjeTVoWkdSRGJHRnpjeUE5SUhOMGVXeGxjeTVoWkdSRGJHRnpjenRjYm1ScWN5NXlaVzF2ZG1WRGJHRnpjeUE5SUhOMGVXeGxjeTV5WlcxdmRtVkRiR0Z6Y3p0Y2JtUnFjeTUwYjJkbmJHVkRiR0Z6Y3lBOUlITjBlV3hsY3k1MGIyZG5iR1ZEYkdGemN6dGNibVJxY3k1amIyNTBZV2x1YzBOc1lYTnpJRDBnYzNSNWJHVnpMbU52Ym5SaGFXNXpRMnhoYzNNN1hHNWthbk11Wm1sdVpDQTlJRjltYVc1a0xtWnBibVE3WEc1a2FuTXVabWx1WkVGc2JDQTlJRjltYVc1a0xtWnBibVJCYkd3N1hHNWthbk11Y21WdGIzWmxJRDBnWDIxaGJtbHdkV3hoZEdsdmJpNXlaVzF2ZG1VN1hHNWNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR1JxY3pzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCa2FuTm1lVHRjYmx4dWRtRnlJRjlrSUQwZ2NtVnhkV2x5WlNnbkxpOWtMbXB6SnlrN1hHNWNiblpoY2lCZlpESWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOWtLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dVpuVnVZM1JwYjI0Z1pHcHpabmtvYm05a1pTa2dlMXh1SUNCcFppQW9JVzV2WkdVcElISmxkSFZ5YmlCdWRXeHNPMXh1WEc0Z0lHNXZaR1V1Wm1sdVpDQTlJR1oxYm1OMGFXOXVJQ2h6ZEhKcGJtY3BJSHRjYmlBZ0lDQnlaWFIxY200Z1gyUXlMbVJsWm1GMWJIUXVabWx1WkNoemRISnBibWNzSUc1dlpHVXBPMXh1SUNCOU8xeHVJQ0J1YjJSbExtWnBibVJCYkd3Z1BTQm1kVzVqZEdsdmJpQW9jM1J5YVc1bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUY5a01pNWtaV1poZFd4MExtWnBibVJCYkd3b2MzUnlhVzVuTENCdWIyUmxLVHRjYmlBZ2ZUdGNiaUFnYm05a1pTNWpjbVZoZEdVZ1BTQm1kVzVqZEdsdmJpQW9jM1J5YVc1bktTQjdYRzRnSUNBZ2RtRnlJR1ZzWlcxbGJuUWdQU0JmWkRJdVpHVm1ZWFZzZEM1amNtVmhkR1VvYzNSeWFXNW5LVHRjYmx4dUlDQWdJRzV2WkdVdVlYQndaVzVrUTJocGJHUW9aV3hsYldWdWRDazdYRzVjYmlBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZER0Y2JpQWdmVHRjYmx4dUlDQnViMlJsTG1OemN5QTlJR1oxYm1OMGFXOXVJQ2hqYzNOVGRIbHNaWE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdYMlF5TG1SbFptRjFiSFF1WTNOektHNXZaR1VzSUdOemMxTjBlV3hsY3lrN1hHNGdJSDA3WEc0Z0lHNXZaR1V1WVdSa1EyeGhjM01nUFNCbWRXNWpkR2x2YmlBb1kyeGhjM05NYVhOMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUY5a01pNWtaV1poZFd4MExtRmtaRU5zWVhOektHNXZaR1VzSUdOc1lYTnpUR2x6ZENrN1hHNGdJSDA3WEc0Z0lHNXZaR1V1Y21WdGIzWmxRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpQW9ZMnhoYzNOVWIxSmxiVzkyWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJmWkRJdVpHVm1ZWFZzZEM1eVpXMXZkbVZEYkdGemN5aHViMlJsTENCamJHRnpjMVJ2VW1WdGIzWmxLVHRjYmlBZ2ZUdGNiaUFnYm05a1pTNTBiMmRuYkdWRGJHRnpjeUE5SUdaMWJtTjBhVzl1SUNoamJHRnpjMDVoYldVc0lHWnZjbU5sS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTG5SdloyZHNaVU5zWVhOektHNXZaR1VzSUdOc1lYTnpUbUZ0WlN3Z1ptOXlZMlVwTzF4dUlDQjlPMXh1SUNCdWIyUmxMbU52Ym5SaGFXNXpRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpQW9ZMnhoYzNOT1lXMWxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOWtNaTVrWldaaGRXeDBMbU52Ym5SaGFXNXpRMnhoYzNNb2JtOWtaU3dnWTJ4aGMzTk9ZVzFsS1R0Y2JpQWdmVHRjYmlBZ2JtOWtaUzV5WlcxdmRtVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlHNXZaR1ZVYjFKbGJXOTJaU0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUEQwZ01DQjhmQ0JoY21kMWJXVnVkSE5iTUYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUc1dlpHVWdPaUJoY21kMWJXVnVkSE5iTUYwN1hHNWNiaUFnSUNCMllYSWdiMnhrVG05a1pTQTlJRjlrTWk1a1pXWmhkV3gwTG5KbGJXOTJaU2h1YjJSbFZHOVNaVzF2ZG1VcE8xeHVJQ0FnSUc1dlpHVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ2NtVjBkWEp1SUc5c1pFNXZaR1U3WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUc1dlpHVTdYRzU5SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVtYVc1a0lEMGdabWx1WkR0Y2JtVjRjRzl5ZEhNdVptbHVaRUZzYkNBOUlHWnBibVJCYkd3N1hHNWNiblpoY2lCZlpHcHpabmtnUFNCeVpYRjFhWEpsS0NjdUwyUnFjMlo1SnlrN1hHNWNiblpoY2lCZlpHcHpabmt5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmWkdwelpua3BPMXh1WEc1bWRXNWpkR2x2YmlCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRzlpYWlrZ2V5QnlaWFIxY200Z2IySnFJQ1ltSUc5aWFpNWZYMlZ6VFc5a2RXeGxJRDhnYjJKcUlEb2dleUJrWldaaGRXeDBPaUJ2WW1vZ2ZUc2dmVnh1WEc1bWRXNWpkR2x2YmlCbWFXNWtLSE4wY21sdVp5a2dlMXh1SUNCMllYSWdjbTl2ZEVWc1pXMWxiblFnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUR3OUlERWdmSHdnWVhKbmRXMWxiblJ6V3pGZElEMDlQU0IxYm1SbFptbHVaV1FnUHlCa2IyTjFiV1Z1ZENBNklHRnlaM1Z0Wlc1MGMxc3hYVHRjYmx4dUlDQnlaWFIxY200Z0tEQXNJRjlrYW5ObWVUSXVaR1ZtWVhWc2RDa29jbTl2ZEVWc1pXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaHpkSEpwYm1jcEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptbHVaRUZzYkNoemRISnBibWNwSUh0Y2JpQWdkbUZ5SUhKdmIzUkZiR1Z0Wlc1MElEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThQU0F4SUh4OElHRnlaM1Z0Wlc1MGMxc3hYU0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdaRzlqZFcxbGJuUWdPaUJoY21kMWJXVnVkSE5iTVYwN1hHNWNiaUFnY21WMGRYSnVJSEp2YjNSRmJHVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvYzNSeWFXNW5LVHRjYm4waUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1OeVpXRjBaU0E5SUdOeVpXRjBaVHRjYm1WNGNHOXlkSE11Y21WdGIzWmxJRDBnY21WdGIzWmxPMXh1WEc1MllYSWdYMlJxYzJaNUlEMGdjbVZ4ZFdseVpTZ25MaTlrYW5ObWVTNXFjeWNwTzF4dVhHNTJZWElnWDJScWMyWjVNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMlJxYzJaNUtUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxLSE4wY21sdVp5a2dlMXh1SUNCMllYSWdabkpoWjIxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkViMk4xYldWdWRFWnlZV2R0Wlc1MEtDazdYRzRnSUhaaGNpQmxiR1Z0Wlc1MElEMGdabkpoWjIxbGJuUXVZWEJ3Wlc1a1EyaHBiR1FvWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlrcE8xeHVYRzRnSUdWc1pXMWxiblF1YVc1dVpYSklWRTFNSUQwZ2MzUnlhVzVuTG5SeWFXMG9LVHRjYmx4dUlDQnBaaUFvWld4bGJXVnVkQzVqYUdsc1pFNXZaR1Z6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lHVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1MExteGhjM1JEYUdsc1pEdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQW9NQ3dnWDJScWMyWjVNaTVrWldaaGRXeDBLU2hsYkdWdFpXNTBMbU5zYjI1bFRtOWtaU2gwY25WbEtTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxiVzkyWlNodWIyUmxLU0I3WEc0Z0lHbG1JQ2h1YjJSbExuQmhjbVZ1ZEU1dlpHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtOWtaUzV3WVhKbGJuUk9iMlJsTG5KbGJXOTJaVU5vYVd4a0tHNXZaR1VwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVqYzNNZ1BTQmpjM003WEc1bGVIQnZjblJ6TG1Ga1pFTnNZWE56SUQwZ1lXUmtRMnhoYzNNN1hHNWxlSEJ2Y25SekxtTnZiblJoYVc1elEyeGhjM01nUFNCamIyNTBZV2x1YzBOc1lYTnpPMXh1Wlhod2IzSjBjeTV5WlcxdmRtVkRiR0Z6Y3lBOUlISmxiVzkyWlVOc1lYTnpPMXh1Wlhod2IzSjBjeTUwYjJkbmJHVkRiR0Z6Y3lBOUlIUnZaMmRzWlVOc1lYTnpPMXh1WEc1MllYSWdYMlJxYzJaNUlEMGdjbVZ4ZFdseVpTZ25MaTlrYW5ObWVTY3BPMXh1WEc1MllYSWdYMlJxYzJaNU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyUnFjMlo1S1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVMeThnUldSblpTQXZJRWxGWEc1MllYSWdUVk1nUFNBbmJYTW5PMXh1THk4Z1EyaHliMjFsSUM4Z1UyRm1ZWEpwWEc1MllYSWdWMFZDUzBsVUlEMGdKM2RsWW10cGRDYzdYRzR2THlCR2FYSmxabTk0WEc1MllYSWdUVTlhSUQwZ0oyMXZlaWM3WEc0dkx5QlBjR1Z5WVZ4dWRtRnlJRThnUFNBbmJ5YzdYRzUyWVhJZ1dGWWdQU0FuZUhZbk8xeHVMeThnUzBSRlhHNTJZWElnUzBoVVRVd2dQU0FuYTJoMGJXd25PMXh1WEc1MllYSWdVRkpGUmtsWVNVVlRJRDBnVzAxVExDQlhSVUpMU1ZRc0lFMVBXaXdnVHl3Z1dGWXNJRXRJVkUxTVhUdGNibHh1ZG1GeUlFTlRVMTlRVWtWR1NWaEZSQ0E5SUh0Y2JpQWdabXh2WVhRNklDZGpjM05HYkc5aGRDZGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHTnpjeWh1YjJSbExDQmpjM05UZEhsc1pYTXBJSHRjYmlBZ2FXWWdLQ0Z1YjJSbElIeDhJRzV2WkdVdWJtOWtaVlI1Y0dVZ1BUMDlJRGdnZkh3Z2JtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ015QjhmQ0FoYm05a1pTNXpkSGxzWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHTnpjMU4wZVd4bGN5a2dlMXh1SUNBZ0lHbG1JQ2hQWW1wbFkzUXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hqYzNOVGRIbHNaWE1zSUd0bGVTa3BJSHRjYmlBZ0lDQWdJSFpoY2lCclpYbFFjbVZtYVhobFpDQTlJR2RsZEZOMGVXeGxWMmwwYUZCeVpXWnBlRXRsZVNoN1hHNGdJQ0FnSUNBZ0lITjBlV3hsVEdsemREb2dibTlrWlM1emRIbHNaU3hjYmlBZ0lDQWdJQ0FnYzNSNWJHVlViME5vWldOck9pQnJaWGxjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCcFppQW9hMlY1VUhKbFptbDRaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2JtOWtaUzV6ZEhsc1pWdHJaWGxRY21WbWFYaGxaRjBnUFNCamMzTlRkSGxzWlhOYmEyVjVYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdLREFzSUY5a2FuTm1lVEl1WkdWbVlYVnNkQ2tvYm05a1pTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRmtaRU5zWVhOektHNXZaR1VzSUdOc1lYTnpUR2x6ZENrZ2UxeHVJQ0IyWVhJZ1kzVnljbVZ1ZEVOc1lYTnpUR2x6ZENBOUlHNXZaR1V1WjJWMFFYUjBjbWxpZFhSbEtDZGpiR0Z6Y3ljcElIeDhJQ2NuTzF4dVhHNGdJR05zWVhOelRHbHpkQ0E5SUhCaGNuTmxRWEp5WVhrb1kyeGhjM05NYVhOMEtTQjhmQ0JiWFR0Y2JseHVJQ0JwWmlBb1kyeGhjM05NYVhOMElHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkdWdVozUm9JRDBnWTJ4aGMzTk1hWE4wTG14bGJtZDBhRHNnYVNBOElHeGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXTnNZWE56VEdsemRGdHBYUzUwY21sdEtDa3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZONWJuUmhlRVZ5Y205eUtDZGthbk11WVdSa1EyeGhjM01vS1RvZ1JXMXdkSGtnYzNSeWFXNW5jeUJoY21VZ2JtOTBJSFpoYkdsa0lHTnNZWE56SUc1aGJXVW5LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tDRmpiMjUwWVdsdWMwTnNZWE56U1c1MGIweHBjM1FvWTNWeWNtVnVkRU5zWVhOelRHbHpkQ3dnWTJ4aGMzTk1hWE4wVzJsZEtTa2dlMXh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBRMnhoYzNOTWFYTjBJQ3M5SUNjZ0p5QXJJR05zWVhOelRHbHpkRnRwWFM1MGNtbHRLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYm05a1pTNXpaWFJCZEhSeWFXSjFkR1VvSjJOc1lYTnpKeXdnWTNWeWNtVnVkRU5zWVhOelRHbHpkQzUwY21sdEtDa3BPMXh1WEc0Z0lISmxkSFZ5YmlBb01Dd2dYMlJxYzJaNU1pNWtaV1poZFd4MEtTaHViMlJsS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWTI5dWRHRnBibk5EYkdGemN5aHViMlJsTENCamJHRnpjMDVoYldVcElIdGNiaUFnYVdZZ0tDRnViMlJsS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RVYUdVZ1pXeGxiV1Z1ZENCdGRYTjBJR0psSUc1dmRDQmxiWEIwZVM0bktUdGNiaUFnZlZ4dVhHNGdJR0Z6YzJWeWRFTnNZWE56VG1GdFpTaGpiR0Z6YzA1aGJXVXBPMXh1WEc0Z0lISmxkSFZ5YmlCamIyNTBZV2x1YzBOc1lYTnpTVzUwYjB4cGMzUW9ibTlrWlM1blpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5a3NJR05zWVhOelRtRnRaU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYlc5MlpVTnNZWE56S0c1dlpHVXNJR05zWVhOelZHOVNaVzF2ZG1VcElIdGNiaUFnZG1GeUlHTjFjbkpsYm5SRGJHRnpjMHhwYzNRZ1BTQm5aWFJEZFhKeVpXNTBRMnhoYzNOTWFYTjBLRzV2WkdVcE8xeHVYRzRnSUdOc1lYTnpWRzlTWlcxdmRtVWdQU0J3WVhKelpVRnljbUY1S0dOc1lYTnpWRzlTWlcxdmRtVXBJSHg4SUZ0ZE8xeHVYRzRnSUdsbUlDZ2hZM1Z5Y21WdWRFTnNZWE56VEdsemRDNXNaVzVuZEdnZ2ZId2dJV05zWVhOelZHOVNaVzF2ZG1VdWJHVnVaM1JvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2d3TENCZlpHcHpabmt5TG1SbFptRjFiSFFwS0c1dlpHVXBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHTnNZWE56Vkc5U1pXMXZkbVVnYVc1emRHRnVZMlZ2WmlCQmNuSmhlU2tnZTF4dUlDQWdJR05zWVhOelZHOVNaVzF2ZG1WSmJuUmxjbUZqZEdsdmJqb2dabTl5SUNoMllYSWdhU0E5SURBc0lHeGxibWQwYUNBOUlHTnNZWE56Vkc5U1pXMXZkbVV1YkdWdVozUm9PeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFpoY2lCamJHRnpjMDVoYldVZ1BTQmpiR0Z6YzFSdlVtVnRiM1psVzJsZE8xeHVJQ0FnSUNBZ1lYTnpaWEowUTJ4aGMzTk9ZVzFsS0dOc1lYTnpUbUZ0WlNrN1hHNWNiaUFnSUNBZ0lHTjFjbkpsYm5SRGJHRnpjMHhwYzNSSmJuUmxjbUZqZEdsdmJqb2dabTl5SUNoMllYSWdlU0E5SURBc0lGOXNaVzVuZEdnZ1BTQmpkWEp5Wlc1MFEyeGhjM05NYVhOMExteGxibWQwYURzZ2VTQThJRjlzWlc1bmRHZzdJSGtyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJ4aGMzTk9ZVzFsSUQwOVBTQmpkWEp5Wlc1MFEyeGhjM05NYVhOMFczbGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEVOc1lYTnpUR2x6ZEM1emNHeHBZMlVvZVN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1VnWTJ4aGMzTlViMUpsYlc5MlpVbHVkR1Z5WVdOMGFXOXVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYm05a1pTNXpaWFJCZEhSeWFXSjFkR1VvSjJOc1lYTnpKeXdnWTNWeWNtVnVkRU5zWVhOelRHbHpkQzVxYjJsdUtDY2dKeWtwTzF4dVhHNGdJSEpsZEhWeWJpQW9NQ3dnWDJScWMyWjVNaTVrWldaaGRXeDBLU2h1YjJSbEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHOW5aMnhsUTJ4aGMzTW9ibTlrWlN3Z1kyeGhjM05PWVcxbExDQm1iM0pqWlNrZ2UxeHVJQ0JwWmlBb0lXNXZaR1VwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVJvWlNCbGJHVnRaVzUwSUcxMWMzUWdZbVVnYm05MElHVnRjSFI1TGljcE8xeHVJQ0I5WEc1Y2JpQWdZWE56WlhKMFEyeGhjM05PWVcxbEtHTnNZWE56VG1GdFpTazdYRzVjYmlBZ2RtRnlJR04xY25KbGJuUkRiR0Z6YzB4cGMzUWdQU0JuWlhSRGRYSnlaVzUwUTJ4aGMzTk1hWE4wS0c1dlpHVXBPMXh1WEc0Z0lHbG1JQ2hqYjI1MFlXbHVjME5zWVhOelNXNTBiMHhwYzNRb1kzVnljbVZ1ZEVOc1lYTnpUR2x6ZEN3Z1kyeGhjM05PWVcxbEtTa2dlMXh1SUNBZ0lHbG1JQ2doWm05eVkyVXBJSHRjYmlBZ0lDQWdJSEpsYlc5MlpVTnNZWE56S0c1dlpHVXNJR05zWVhOelRtRnRaU2s3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR2xtSUNobWIzSmpaU0FoUFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0FnSUdGa1pFTnNZWE56S0c1dlpHVXNJR05zWVhOelRtRnRaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJQ2d3TENCZlpHcHpabmt5TG1SbFptRjFiSFFwS0c1dlpHVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJEZFhKeVpXNTBRMnhoYzNOTWFYTjBLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJSEJoY25ObFFYSnlZWGtvYm05a1pTNW5aWFJCZEhSeWFXSjFkR1VvSjJOc1lYTnpKeWtwSUh4OElGdGRPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhjM05sY25SRGJHRnpjMDVoYldVb1kyeGhjM05PWVcxbEtTQjdYRzRnSUdsbUlDZ2hZMnhoYzNOT1lXMWxLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFVhR1VnWTJ4aGMzTk9ZVzFsSUhCeWIzWnBaR1ZrSUNoY1hDY25JQ3NnWTJ4aGMzTk9ZVzFsSUNzZ0oxeGNKeWtnYlhWemRDQmlaU0J1YjNRZ1pXMXdkSGt1SnlrN1hHNGdJSDFjYmx4dUlDQnBaaUFvWTI5dWRHRnBibk5YYUdsMFpYTndZV05sY3loamJHRnpjMDVoYldVcEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdZMnhoYzNOT1lXMWxJSEJ5YjNacFpHVmtJQ2hjWENjbklDc2dZMnhoYzNOT1lXMWxJQ3NnSjF4Y0p5a2dZMjl1ZEdGcGJuTWdTRlJOVENCemNHRmpaU0JqYUdGeVlXTjBaWEp6TENCM2FHbGphQ0JoY21VZ2JtOTBJSFpoYkdsa0xpY3BPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOdmJuUmhhVzV6VjJocGRHVnpjR0ZqWlhNb2MzUnlhVzVuS1NCN1hHNGdJSEpsZEhWeWJpQnpkSEpwYm1jdWJXRjBZMmdvTDF4Y2N5OHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpiMjUwWVdsdWMwTnNZWE56U1c1MGIweHBjM1FvWTJ4aGMzTk1hWE4wTENCamJHRnpjMVJ2UTJobFkyc3BJSHRjYmlBZ1kyeGhjM05NYVhOMElEMGdjR0Z5YzJWQmNuSmhlU2hqYkdGemMweHBjM1FwSUh4OElGdGRPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc1pXNW5kR2dnUFNCamJHRnpjMHhwYzNRdWJHVnVaM1JvT3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0JwWmlBb1kyeGhjM05NYVhOMFcybGRMblJ5YVcwb0tTQTlQVDBnWTJ4aGMzTlViME5vWldOckxuUnlhVzBvS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWmhiSE5sTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ3WVhKelpVRnljbUY1S0dOc1lYTnpUR2x6ZENrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdOc1lYTnpUR2x6ZENBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmpiR0Z6YzB4cGMzUWdQU0JqYkdGemMweHBjM1F1YzNCc2FYUW9KeUFuS1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCamJHRnpjMHhwYzNRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGTjBlV3hsVjJsMGFGQnlaV1pwZUV0bGVTaGZjbVZtS1NCN1hHNGdJSFpoY2lCemRIbHNaVXhwYzNRZ1BTQmZjbVZtTG5OMGVXeGxUR2x6ZER0Y2JpQWdkbUZ5SUhOMGVXeGxWRzlEYUdWamF5QTlJRjl5WldZdWMzUjViR1ZVYjBOb1pXTnJPMXh1WEc0Z0lHbG1JQ2h6ZEhsc1pWUnZRMmhsWTJzZ2FXNGdjM1I1YkdWTWFYTjBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlITjBlV3hsVkc5RGFHVmphenRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHpkSGxzWlZSdlEyaGxZMnNnYVc0Z1ExTlRYMUJTUlVaSldFVkVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFTlRVMTlRVWtWR1NWaEZSRnR6ZEhsc1pWUnZRMmhsWTJ0ZE8xeHVJQ0I5WEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHeGxibWQwYUNBOUlGQlNSVVpKV0VsRlV5NXNaVzVuZEdnN0lHa2dQQ0JzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUhaaGNpQnpkSGxzWlZkcGRHaFFjbVZtYVhnZ1BTQW5KeUFySUZCU1JVWkpXRWxGVTF0cFhTQXJJSE4wZVd4bFZHOURhR1ZqYTFzd1hTNTBiMVZ3Y0dWeVEyRnpaU2dwSUNzZ2MzUjViR1ZVYjBOb1pXTnJMbk4xWW5OMGNtbHVaeWd4S1R0Y2JseHVJQ0FnSUdsbUlDaHpkSGxzWlZkcGRHaFFjbVZtYVhnZ2FXNGdjM1I1YkdWTWFYTjBLU0I3WEc0Z0lDQWdJQ0JEVTFOZlVGSkZSa2xZUlVSYmMzUjViR1ZVYjBOb1pXTnJYU0E5SUhOMGVXeGxWMmwwYUZCeVpXWnBlRHRjYmlBZ0lDQWdJSEpsZEhWeWJpQkRVMU5mVUZKRlJrbFlSVVJiYzNSNWJHVlViME5vWldOclhUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1ptRnNjMlU3WEc1OUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnWDJRZ1BTQnlaWEYxYVhKbEtDY3VMMlJxY3k5a0xtcHpKeWs3WEc1Y2JuWmhjaUJmWkRJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5a0tUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1YVdZZ0tIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlrTWk1a1pXWmhkV3gwTzF4dWZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pHVm1hVzVsSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUdSbFptbHVaUzVoYldRcElIdGNiaUFnWkdWbWFXNWxLRnRkTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUY5a01pNWtaV1poZFd4ME8xeHVJQ0I5S1R0Y2JuMWNibHh1ZG1GeUlGOW5iRzlpWVd3Z1BTQjFibVJsWm1sdVpXUTdYRzVjYm1sbUlDaDBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQmZaMnh2WW1Gc0lEMGdkMmx1Wkc5M08xeHVmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0JmWjJ4dlltRnNJRDBnWjJ4dlltRnNPMXh1ZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYzJWc1ppQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnWDJkc2IySmhiQ0E5SUhObGJHWTdYRzU5SUdWc2MyVWdlMXh1SUNCZloyeHZZbUZzSUQwZ2RXNWtaV1pwYm1Wa08xeHVmVnh1WEc1ZloyeHZZbUZzTG1ScWN5QTlJRjlrTWk1a1pXWmhkV3gwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUdoMGJXeFRkSEpwYm1kR2NtOXRWR1Z0Y0d4aGRHVlRkSEpwYm1jN1hHNW1kVzVqZEdsdmJpQm9kRzFzVTNSeWFXNW5Sbkp2YlZSbGJYQnNZWFJsVTNSeWFXNW5LSFJsYlhCc1lYUmxUMkpxWldOMEtTQjdYRzRnSUhaaGNpQnlZWGNnUFNCMFpXMXdiR0YwWlU5aWFtVmpkQzV5WVhjN1hHNWNiaUFnZG1GeUlISmxjM1ZzZENBOUlIVnVaR1ZtYVc1bFpEdGNibHh1SUNCbWIzSWdLSFpoY2lCZmJHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ3dnYzNWaWMzUnpJRDBnUVhKeVlYa29YMnhsYmlBK0lERWdQeUJmYkdWdUlDMGdNU0E2SURBcExDQmZhMlY1SUQwZ01Uc2dYMnRsZVNBOElGOXNaVzQ3SUY5clpYa3JLeWtnZTF4dUlDQWdJSE4xWW5OMGMxdGZhMlY1SUMwZ01WMGdQU0JoY21kMWJXVnVkSE5iWDJ0bGVWMDdYRzRnSUgxY2JseHVJQ0J5WlhOMWJIUWdQU0J6ZFdKemRITXVjbVZrZFdObEtHWjFibU4wYVc5dUlDaHlaWE4xYkhRc0lITjFZbk4wTENCcEtTQjdYRzRnSUNBZ2RtRnlJR3hwZENBOUlISmhkMXRwWFR0Y2JseHVJQ0FnSUhOMVluTjBJRDBnUVhKeVlYa3VhWE5CY25KaGVTaHpkV0p6ZENrZ1B5QnpkV0p6ZEM1cWIybHVLQ2NuS1NBNklITjFZbk4wSUNzZ0p5YzdYRzVjYmlBZ0lDQnBaaUFvYkdsMFcyeHBkQzVzWlc1bmRHZ2dMU0F4WFNBOVBUMGdKeVFuS1NCN1hHNGdJQ0FnSUNCemRXSnpkQ0E5SUdoMGJXeEZjMk5oY0dVb2MzVmljM1FwTzF4dUlDQWdJQ0FnYkdsMElEMGdiR2wwTG5Oc2FXTmxLREFzSUMweEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYTjFiSFFnS3owZ2JHbDBPMXh1SUNBZ0lISmxjM1ZzZENBclBTQnpkV0p6ZER0Y2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwc0lDY25LVHRjYmx4dUlDQnlaWE4xYkhRZ0t6MGdjbUYzVzNKaGR5NXNaVzVuZEdnZ0xTQXhYVHRjYmx4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJvZEcxc1JYTmpZWEJsS0hOMGNpa2dlMXh1SUNCeVpYUjFjbTRnYzNSeUxuSmxjR3hoWTJVb0x5WXZaeXdnSnlaaGJYQTdKeWt1Y21Wd2JHRmpaU2d2UGk5bkxDQW5KbWQwT3ljcExuSmxjR3hoWTJVb0x6d3ZaeXdnSnlac2REc25LUzV5WlhCc1lXTmxLQzljSWk5bkxDQW5KbkYxYjNSbE95Y3BMbkpsY0d4aFkyVW9MeWN2Wnl3Z0p5WWpNems3SnlrdWNtVndiR0ZqWlNndllDOW5MQ0FuSmlNNU5qc25LVHRjYm4waUxDSnBiWEJ2Y25RZ1pHbHpkR0Z1WTJWRWFYTndZWFJqYUdWeUlHWnliMjBnSnk0dlpHbHpkR0Z1WTJVdVpHbHpjR0YwWTJobGNpNXFjeWM3WEc1cGJYQnZjblFnZTJSbFptbHVaVU52Ym5OMFVISnZjR1Z5ZEhsOUlHWnliMjBnSnk0dUwzUnZiMnh6TDNWMGFXeHpMbXB6Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUkdsemRHRnVZMlZCWTNScGIyNXpJSHRjYmlBZ2MzUmhkR2xqSUdOb1lXNW5aVlpoYkhWbEtIWmhiSFZsS1NCN1hHNGdJQ0FnWkdsemRHRnVZMlZFYVhOd1lYUmphR1Z5TG1ScGMzQmhkR05vS0h0Y2JpQWdJQ0FnSUhSNWNHVTZJRVJwYzNSaGJtTmxRV04wYVc5dWN5NVdRVXhWUlY5RFNFRk9SMFZFTEZ4dUlDQWdJQ0FnWkdGMFlUb2dkbUZzZFdWY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCamFHRnVaMlZWYm1sMEtIVnVhWFFwSUh0Y2JpQWdJQ0JrYVhOMFlXNWpaVVJwYzNCaGRHTm9aWEl1WkdsemNHRjBZMmdvZTF4dUlDQWdJQ0FnZEhsd1pUb2dSR2x6ZEdGdVkyVkJZM1JwYjI1ekxsVk9TVlJmUTBoQlRrZEZSQ3hjYmlBZ0lDQWdJR1JoZEdFNklIVnVhWFJjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVmVnh1WEc1a1pXWnBibVZEYjI1emRGQnliM0JsY25SNUtFUnBjM1JoYm1ObFFXTjBhVzl1Y3l3Z0oxWkJURlZGWDBOSVFVNUhSVVFuTENCVGVXMWliMndvS1NrN1hHNWtaV1pwYm1WRGIyNXpkRkJ5YjNCbGNuUjVLRVJwYzNSaGJtTmxRV04wYVc5dWN5d2dKMVZPU1ZSZlEwaEJUa2RGUkNjc0lGTjViV0p2YkNncEtUdGNibHh1SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSR2x6ZEdGdVkyVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaDdkVzVwZEQwblMyMG5MQ0IyWVd4MVpUMHdmU2tnZTF4dUlDQWdJSFJvYVhNdWRXNXBkQ0E5SUhWdWFYUTdYRzRnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjMlYwVm1Gc2RXVW9kbUZzZFdVcElIdGNiaUFnSUNCMGFHbHpMblpoYkhWbElEMGdjR0Z5YzJWSmJuUW9kbUZzZFdVcE8xeHVJQ0I5WEc1OUlpd2lhVzF3YjNKMElFUnBjM0JoZEdOb1pYSWdabkp2YlNBbkxpNHZkRzl2YkhNdlpHbHpjR0YwWTJobGNpNXFjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUc1bGR5QkVhWE53WVhSamFHVnlLQ2s3SWl3aWFXMXdiM0owSUdScWN5Qm1jbTl0SUNka2IyMHVhbk1uTzF4dVhHNXBiWEJ2Y25RZ1JHbHpkR0Z1WTJWQlkzUnBiMjV6SUdaeWIyMGdKeTR2WkdsemRHRnVZMlV1WVdOMGFXOXVjeTVxY3ljN1hHNXBiWEJ2Y25RZ1JHbHpkR0Z1WTJWVGRHOXlaU0JtY205dElDY3VMMlJwYzNSaGJtTmxMbk4wYjNKbExtcHpKenRjYmx4dWJHVjBJR052Ym1acFowMWhjQ0E5SUh0Y2JpQWdhSFJ0YkRvZ1pHcHpZRnh1SUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0ptWlMxa2FYTjBZVzVqWlZ3aVBseHVJQ0FnSUNBZ1BHbHVjSFYwSUdOc1lYTnpQVndpWm1VdGFXNXdkWFJ6WDE5cGJuQjFkQ0JtWlMxa2FYTjBZVzVqWlY5ZmFXNXdkWFJjSWlCMGVYQmxQVndpZEdWNGRGd2lQbHh1SUNBZ0lDQWdQSE53WVc0Z1kyeGhjM005WENKbVpTMTFibWwwSUdabExXUnBjM1JoYm1ObFgxOTFibWwwWENJK2V5UWtkVzVwZEgwOEwzTndZVzQrWEc0Z0lDQWdQQzlrYVhZK1hHNGdJR0JjYm4wN1hHNWNibXhsZENCbGJHVnRaVzUwVFdGd0lEMGdlMXh1SUNBa1kyOXVkR0ZwYm1WeU9pQnVkV3hzTEZ4dUlDQWtaR2x6ZEdGdVkyVTZJRzUxYkd3c1hHNGdJQ1JwYm5CMWREb2diblZzYkN4Y2JpQWdKSFZ1YVhRNklHNTFiR3hjYm4wN1hHNWNibXhsZENCa2FYTjBZVzVqWlZOMGIzSmxPMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVc1cGRFMXZaSFZzWlNna1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpHUnBjM1JoYm1ObElEMGdKR052Ym5SaGFXNWxjaTVqY21WaGRHVW9ZMjl1Wm1sblRXRndMbWgwYld3cE8xeHVJQ0J6WlhSRmJHVnRaVzUwVFdGd0tDUmpiMjUwWVdsdVpYSXBPMXh1SUNCelpYUkZiR1Z0Wlc1MFNHRnVaR3hsY25Nb0tUdGNibHh1SUNCa2FYTjBZVzVqWlZOMGIzSmxJRDBnYm1WM0lFUnBjM1JoYm1ObFUzUnZjbVVvS1R0Y2JpQWdaR2x6ZEdGdVkyVlRkRzl5WlM1dmJrTm9ZVzVuWlNobWRXNWpkR2x2YmlncElIdGNiaUFnSUNCeVpXWnlaWE5vVlc1cGRDaGthWE4wWVc1alpWTjBiM0psTG1ScGMzUmhibU5sTG5WdWFYUXBPMXh1SUNCOUtUdGNibHh1SUNCRWFYTjBZVzVqWlVGamRHbHZibk11WTJoaGJtZGxWVzVwZENnblMyMG5LVHRjYmlBZ1pHbHpkR0Z1WTJWVGRHOXlaUzUxYm5KbFoybHpkR1Z5VEdsemRHVnVaWElvS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WbWNtVnphRlZ1YVhRb2RXNXBkQ2tnZTF4dUlDQmxiR1Z0Wlc1MFRXRndMaVIxYm1sMExtbHVibVZ5U0ZSTlRDQTlJSFZ1YVhRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhObGRFVnNaVzFsYm5STllYQW9KR052Ym5SaGFXNWxjaWtnZTF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJqYjI1MFlXbHVaWElnUFNBa1kyOXVkR0ZwYm1WeU8xeHVJQ0JsYkdWdFpXNTBUV0Z3TGlScGJuQjFkQ0E5SUdWc1pXMWxiblJOWVhBdUpHUnBjM1JoYm1ObExtWnBibVFvSnk1bVpTMWthWE4wWVc1alpWOWZhVzV3ZFhRbktUdGNiaUFnWld4bGJXVnVkRTFoY0M0a2RXNXBkQ0E5SUdWc1pXMWxiblJOWVhBdUpHUnBjM1JoYm1ObExtWnBibVFvSnk1bVpTMWthWE4wWVc1alpWOWZkVzVwZENjcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCelpYUkZiR1Z0Wlc1MFNHRnVaR3hsY25Nb0tTQjdYRzRnSUdWc1pXMWxiblJOWVhBdUpHbHVjSFYwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJsdWNIVjBKeXdnWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmlBZ0lDQkVhWE4wWVc1alpVRmpkR2x2Ym5NdVkyaGhibWRsVm1Gc2RXVW9aWFpsYm5RdWRHRnlaMlYwTG5aaGJIVmxLVHNnSUNBZ1hHNGdJSDBwTzF4dWZWeHVJaXdpYVcxd2IzSjBJRk4wYjNKbElHWnliMjBnSnk0dUwzUnZiMnh6TDNOMGIzSmxMbXB6Snp0Y2JseHVhVzF3YjNKMElFUnBjM1JoYm1ObElHWnliMjBnSnk0dlpHbHpkR0Z1WTJVdVkyeGhjM011YW5Nbk8xeHVhVzF3YjNKMElFUnBjM1JoYm1ObFFXTjBhVzl1Y3lCbWNtOXRJQ2N1TDJScGMzUmhibU5sTG1GamRHbHZibk11YW5Nbk8xeHVhVzF3YjNKMElHUnBjM1JoYm1ObFJHbHpjR0YwWTJobGNpQm1jbTl0SUNjdUwyUnBjM1JoYm1ObExtUnBjM0JoZEdOb1pYSXVhbk1uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJFYVhOMFlXNWpaVk4wYjNKbElHVjRkR1Z1WkhNZ1UzUnZjbVY3WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TG1ScGMzUmhibU5sSUQwZ2JtVjNJRVJwYzNSaGJtTmxLSHQ5S1R0Y2JseHVJQ0FnSUhSb2FYTXViR2x6ZEdWdVpYSWdQU0JrYVhOMFlXNWpaVVJwYzNCaGRHTm9aWEl1Y21WbmFYTjBaWElvS0d4cGMzUmxibVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQnpkMmwwWTJnb2JHbHpkR1Z1WlhJdWRIbHdaU2tnZTF4dUlDQWdJQ0FnWTJGelpTQkVhWE4wWVc1alpVRmpkR2x2Ym5NdVZrRk1WVVZmUTBoQlRrZEZSRHBjYmlBZ0lDQWdJQ0FnZEdocGN5NWthWE4wWVc1alpTQTlJRzVsZHlCRWFYTjBZVzVqWlNoN1hHNGdJQ0FnSUNBZ0lDQWdkVzVwZERvZ2RHaHBjeTVrYVhOMFlXNWpaUzUxYm1sMExDQmNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diR2x6ZEdWdVpYSXVaR0YwWVZ4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdZMkZ6WlNCRWFYTjBZVzVqWlVGamRHbHZibk11VlU1SlZGOURTRUZPUjBWRU9seHVJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzUmhibU5sSUQwZ2JtVjNJRVJwYzNSaGJtTmxLSHRjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nZEdocGN5NWthWE4wWVc1alpTNTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQjFibWwwT2lCc2FYTjBaVzVsY2k1a1lYUmhYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMbU5vWVc1blpTZ3BPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnZFc1eVpXZHBjM1JsY2t4cGMzUmxibVZ5S0NrZ2UxeHVJQ0FnSUdScGMzUmhibU5sUkdsemNHRjBZMmhsY2k1MWJuSmxaMmx6ZEdWeUtIUm9hWE11YkdsemRHVnVaWElwTzF4dUlDQjlYRzU5SWl3aWFXMXdiM0owSUdScWN5Qm1jbTl0SUNka2IyMHVhbk1uTzF4dVhHNXNaWFFnWTI5dVptbG5UV0Z3SUQwZ2UxeHVJQ0JvZEcxc09pQmthbk5nWEc0Z0lDQWdQR2hsWVdSbGNpQmpiR0Z6Y3oxY0ltWmxMV2hsWVdSbGNsd2lQbHh1SUNBZ0lDQWdQR2d4UGtaMVpXd2dSV052Ym05dGVUd3ZhREUrWEc0Z0lDQWdQQzlvWldGa1pYSStYRzRnSUdCY2JuMDdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYm1sMFRXOWtkV3hsS0NSamIyNTBZV2x1WlhJcElIdGNiaUFnSkdOdmJuUmhhVzVsY2k1amNtVmhkR1VvWTI5dVptbG5UV0Z3TG1oMGJXd3BPMXh1ZlZ4dUlpd2lhVzF3YjNKMElHUnFjeUJtY205dElDZGtiMjB1YW5Nbk8xeHVYRzVwYlhCdmNuUWdLaUJoY3lCb1pXRmtaWElnWm5KdmJTQW5MaTlvWldGa1pYSXZhR1ZoWkdWeUxtcHpKenRjYm1sdGNHOXlkQ0FxSUdGeklHbHVjSFYwYzBOdmJuUmhhVzVsY2lCbWNtOXRJQ2N1TDJsdWNIVjBjeTlwYm5CMWRITXRZMjl1ZEdGcGJtVnlMbXB6Snp0Y2JtbHRjRzl5ZENBcUlHRnpJSEpsYzNWc2RITkRiMjUwWVdsdVpYSWdabkp2YlNBbkxpOXlaWE4xYkhSekwzSmxjM1ZzZEhNdFkyOXVkR0ZwYm1WeUxtcHpKenRjYmx4dWJHVjBJQ1JvWldGa1pYSkRiMjUwWVdsdVpYSWdQU0JrYW5Nb0p5NW1aUzFxY3kxb1pXRmtaWEluS1R0Y2JteGxkQ0FrYVc1d2RYUnpRMjl1ZEdGcGJtVnlJRDBnWkdwektDY3VabVV0YW5NdGFXNXdkWFJ6TFdOdmJuUmhhVzVsY2ljcE8xeHViR1YwSUNSeVpYTjFiSFJ6UTI5dWRHRnBibVZ5SUQwZ1pHcHpLQ2N1Wm1VdGFuTXRjbVZ6ZFd4MGN5MWpiMjUwWVdsdVpYSW5LVHRjYmx4dWFHVmhaR1Z5TG1sdWFYUk5iMlIxYkdVb0pHaGxZV1JsY2tOdmJuUmhhVzVsY2lrN1hHNXBibkIxZEhORGIyNTBZV2x1WlhJdWFXNXBkRTF2WkhWc1pTZ2thVzV3ZFhSelEyOXVkR0ZwYm1WeUtUdGNibkpsYzNWc2RITkRiMjUwWVdsdVpYSXVhVzVwZEUxdlpIVnNaU2drY21WemRXeDBjME52Ym5SaGFXNWxjaWs3WEc0aUxDSnBiWEJ2Y25RZ1pHcHpJR1p5YjIwZ0oyUnZiUzVxY3ljN1hHNXBiWEJ2Y25RZ0tpQmhjeUJ4ZFdGdWRHbDBlU0JtY205dElDY3VMaTl4ZFdGdWRHbDBlUzl4ZFdGdWRHbDBlUzVxY3ljN1hHNXBiWEJ2Y25RZ0tpQmhjeUJrYVhOMFlXNWpaU0JtY205dElDY3VMaTlrYVhOMFlXNWpaUzlrYVhOMFlXNWpaUzVxY3ljN1hHNWNibXhsZENCamIyNW1hV2ROWVhBZ1BTQjdYRzRnSUdoMGJXdzZJR1JxY3lCZ1hHNGdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltWmxMV2x1Y0hWMGN5MWpiMjUwWVdsdVpYSmNJajVjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKbVpTMXBibkIxZEhNZ1ptVXRhbk10Y1hWaGJuUnBkSGxjSWo0OEwyUnBkajVjYmx4dUlDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltWmxMV2x1Y0hWMGN5Qm1aUzFxY3kxa2FYTjBZVzVqWlZ3aVBqd3ZaR2wyUGx4dUlDQWdJRHd2WkdsMlBseHVJQ0JnWEc1OU8xeHVYRzVzWlhRZ1pXeGxiV1Z1ZEUxaGNDQTlJSHRjYmlBZ0pHTnZiblJoYVc1bGNqb2diblZzYkN4Y2JpQWdKR2x1Y0hWMFEyOXVkR0ZwYm1WeU9pQnVkV3hzTEZ4dUlDQWthVzV3ZFhSUmRXRnVkR2wwZVRvZ2JuVnNiQ3hjYmlBZ0pHbHVjSFYwUkdsemRHRnVZMlU2SUc1MWJHeGNibjA3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGJtbDBUVzlrZFd4bEtDUmpiMjUwWVdsdVpYSXBJSHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGthVzV3ZFhSRGIyNTBZV2x1WlhJZ1BTQWtZMjl1ZEdGcGJtVnlMbU55WldGMFpTaGpiMjVtYVdkTllYQXVhSFJ0YkNrN1hHNWNiaUFnYzJWMFJXeGxiV1Z1ZEUxaGNDZ2tZMjl1ZEdGcGJtVnlLVHRjYmx4dUlDQnhkV0Z1ZEdsMGVTNXBibWwwVFc5a2RXeGxLR1ZzWlcxbGJuUk5ZWEF1SkdsdWNIVjBVWFZoYm5ScGRIa3BPMXh1SUNCa2FYTjBZVzVqWlM1cGJtbDBUVzlrZFd4bEtHVnNaVzFsYm5STllYQXVKR2x1Y0hWMFJHbHpkR0Z1WTJVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCelpYUkZiR1Z0Wlc1MFRXRndLQ1JqYjI1MFlXbHVaWElwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrWTI5dWRHRnBibVZ5SUQwZ0pHTnZiblJoYVc1bGNqdGNiaUFnWld4bGJXVnVkRTFoY0M0a2FXNXdkWFJSZFdGdWRHbDBlU0E5SUdWc1pXMWxiblJOWVhBdUpHbHVjSFYwUTI5dWRHRnBibVZ5TG1acGJtUW9KeTVtWlMxcWN5MXhkV0Z1ZEdsMGVTY3BPMXh1SUNCbGJHVnRaVzUwVFdGd0xpUnBibkIxZEVScGMzUmhibU5sSUQwZ1pXeGxiV1Z1ZEUxaGNDNGthVzV3ZFhSRGIyNTBZV2x1WlhJdVptbHVaQ2duTG1abExXcHpMV1JwYzNSaGJtTmxKeWs3WEc1OVhHNGlMQ0pwYlhCdmNuUWdjWFZoYm5ScGRIbEVhWE53WVhSamFHVnlJR1p5YjIwZ0p5NHZjWFZoYm5ScGRIa3VaR2x6Y0dGMFkyaGxjaTVxY3ljN1hHNXBiWEJ2Y25RZ2UyUmxabWx1WlVOdmJuTjBVSEp2Y0dWeWRIbDlJR1p5YjIwZ0p5NHVMM1J2YjJ4ekwzVjBhV3h6TG1wekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VYVmhiblJwZEhsQlkzUnBiMjV6SUh0Y2JpQWdjM1JoZEdsaklHTm9ZVzVuWlZaaGJIVmxLSFpoYkhWbEtTQjdYRzRnSUNBZ2NYVmhiblJwZEhsRWFYTndZWFJqYUdWeUxtUnBjM0JoZEdOb0tIdGNiaUFnSUNBZ0lIUjVjR1U2SUZGMVlXNTBhWFI1UVdOMGFXOXVjeTVXUVV4VlJWOURTRUZPUjBWRUxGeHVJQ0FnSUNBZ1pHRjBZVG9nZG1Gc2RXVmNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5QmphR0Z1WjJWVmJtbDBLSFZ1YVhRcElIdGNiaUFnSUNCeGRXRnVkR2wwZVVScGMzQmhkR05vWlhJdVpHbHpjR0YwWTJnb2UxeHVJQ0FnSUNBZ2RIbHdaVG9nVVhWaGJuUnBkSGxCWTNScGIyNXpMbFZPU1ZSZlEwaEJUa2RGUkN4Y2JpQWdJQ0FnSUdSaGRHRTZJSFZ1YVhSY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNWtaV1pwYm1WRGIyNXpkRkJ5YjNCbGNuUjVLRkYxWVc1MGFYUjVRV04wYVc5dWN5d2dKMVpCVEZWRlgwTklRVTVIUlVRbkxDQlRlVzFpYjJ3b0tTazdYRzVrWldacGJtVkRiMjV6ZEZCeWIzQmxjblI1S0ZGMVlXNTBhWFI1UVdOMGFXOXVjeXdnSjFWT1NWUmZRMGhCVGtkRlJDY3NJRk41YldKdmJDZ3BLVHRjYmx4dUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVVhWaGJuUnBkSGtnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWg3ZFc1cGREMG5UQ2NzSUhaaGJIVmxQVEI5S1NCN1hHNGdJQ0FnZEdocGN5NTFibWwwSUQwZ2RXNXBkRHRjYmlBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnZG1Gc2RXVTdYRzRnSUgxY2JseHVJQ0J6WlhSV1lXeDFaU2gyWVd4MVpTa2dlMXh1SUNBZ0lIUm9hWE11ZG1Gc2RXVWdQU0J3WVhKelpVbHVkQ2gyWVd4MVpTazdYRzRnSUgxY2JuMGlMQ0pwYlhCdmNuUWdSR2x6Y0dGMFkyaGxjaUJtY205dElDY3VMaTkwYjI5c2N5OWthWE53WVhSamFHVnlMbXB6Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2JtVjNJRVJwYzNCaGRHTm9aWElvS1RzaUxDSnBiWEJ2Y25RZ1pHcHpJR1p5YjIwZ0oyUnZiUzVxY3ljN1hHNWNibWx0Y0c5eWRDQlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NZ1puSnZiU0FuTGk5eGRXRnVkR2wwZVM1aFkzUnBiMjV6TG1wekp6dGNibWx0Y0c5eWRDQlJkV0Z1ZEdsMGVWTjBiM0psSUdaeWIyMGdKeTR2Y1hWaGJuUnBkSGt1YzNSdmNtVXVhbk1uTzF4dVhHNXNaWFFnWTI5dVptbG5UV0Z3SUQwZ2UxeHVJQ0JvZEcxc09pQmthbk5nWEc0Z0lDQWdQR1JwZGlCamJHRnpjejFjSW1abExYRjFZVzUwYVhSNVhDSStYRzRnSUNBZ0lDQThhVzV3ZFhRZ1kyeGhjM005WENKbVpTMXBibkIxZEhOZlgybHVjSFYwSUdabExYRjFZVzUwYVhSNVgxOXBibkIxZEZ3aUlIUjVjR1U5WENKMFpYaDBYQ0krWEc0Z0lDQWdJQ0E4YzNCaGJpQmpiR0Z6Y3oxY0ltWmxMWFZ1YVhRZ1ptVXRjWFZoYm5ScGRIbGZYM1Z1YVhSY0lqNTdKQ1IxYm1sMGZUd3ZjM0JoYmo1Y2JpQWdJQ0E4TDJScGRqNWNiaUFnWUZ4dWZUdGNibHh1YkdWMElHVnNaVzFsYm5STllYQWdQU0I3WEc0Z0lDUmpiMjUwWVdsdVpYSTZJRzUxYkd3c1hHNGdJQ1J4ZFdGdWRHbDBlVG9nYm5Wc2JDeGNiaUFnSkdsdWNIVjBPaUJ1ZFd4c0xGeHVJQ0FrZFc1cGREb2diblZzYkZ4dWZUdGNibHh1YkdWMElIRjFZVzUwYVhSNVUzUnZjbVU3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGJtbDBUVzlrZFd4bEtDUmpiMjUwWVdsdVpYSXBJSHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtjWFZoYm5ScGRIa2dQU0FrWTI5dWRHRnBibVZ5TG1OeVpXRjBaU2hqYjI1bWFXZE5ZWEF1YUhSdGJDazdYRzRnSUhObGRFVnNaVzFsYm5STllYQW9KR052Ym5SaGFXNWxjaWs3WEc0Z0lITmxkRVZzWlcxbGJuUklZVzVrYkdWeWN5Z3BPMXh1WEc0Z0lIRjFZVzUwYVhSNVUzUnZjbVVnUFNCdVpYY2dVWFZoYm5ScGRIbFRkRzl5WlNncE8xeHVJQ0J4ZFdGdWRHbDBlVk4wYjNKbExtOXVRMmhoYm1kbEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxabkpsYzJoVmJtbDBLSEYxWVc1MGFYUjVVM1J2Y21VdWNYVmhiblJwZEhrdWRXNXBkQ2s3WEc0Z0lIMHBPMXh1WEc0Z0lGRjFZVzUwYVhSNVFXTjBhVzl1Y3k1amFHRnVaMlZWYm1sMEtDZE1KeWs3WEc0Z0lIRjFZVzUwYVhSNVUzUnZjbVV1ZFc1eVpXZHBjM1JsY2t4cGMzUmxibVZ5S0NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbFpuSmxjMmhWYm1sMEtIVnVhWFFwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrZFc1cGRDNXBibTVsY2toVVRVd2dQU0IxYm1sME8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCelpYUkZiR1Z0Wlc1MFRXRndLQ1JqYjI1MFlXbHVaWElwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrWTI5dWRHRnBibVZ5SUQwZ0pHTnZiblJoYVc1bGNqdGNiaUFnWld4bGJXVnVkRTFoY0M0a2FXNXdkWFFnUFNCbGJHVnRaVzUwVFdGd0xpUnhkV0Z1ZEdsMGVTNW1hVzVrS0NjdVptVXRjWFZoYm5ScGRIbGZYMmx1Y0hWMEp5azdYRzRnSUdWc1pXMWxiblJOWVhBdUpIVnVhWFFnUFNCbGJHVnRaVzUwVFdGd0xpUnhkV0Z1ZEdsMGVTNW1hVzVrS0NjdVptVXRjWFZoYm5ScGRIbGZYM1Z1YVhRbktUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyVjBSV3hsYldWdWRFaGhibVJzWlhKektDa2dlMXh1SUNCbGJHVnRaVzUwVFdGd0xpUnBibkIxZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkcGJuQjFkQ2NzSUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc0Z0lDQWdVWFZoYm5ScGRIbEJZM1JwYjI1ekxtTm9ZVzVuWlZaaGJIVmxLR1YyWlc1MExuUmhjbWRsZEM1MllXeDFaU2s3SUNBZ0lGeHVJQ0I5S1R0Y2JuMGlMQ0pwYlhCdmNuUWdVM1J2Y21VZ1puSnZiU0FuTGk0dmRHOXZiSE12YzNSdmNtVXVhbk1uTzF4dVhHNXBiWEJ2Y25RZ1VYVmhiblJwZEhrZ1puSnZiU0FuTGk5eGRXRnVkR2wwZVM1amJHRnpjeTVxY3ljN1hHNXBiWEJ2Y25RZ1VYVmhiblJwZEhsQlkzUnBiMjV6SUdaeWIyMGdKeTR2Y1hWaGJuUnBkSGt1WVdOMGFXOXVjeTVxY3ljN1hHNXBiWEJ2Y25RZ2NYVmhiblJwZEhsRWFYTndZWFJqYUdWeUlHWnliMjBnSnk0dmNYVmhiblJwZEhrdVpHbHpjR0YwWTJobGNpNXFjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkYxWVc1MGFYUjVVM1J2Y21VZ1pYaDBaVzVrY3lCVGRHOXlaU0I3WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TG5GMVlXNTBhWFI1SUQwZ2JtVjNJRkYxWVc1MGFYUjVLSHQ5S1R0Y2JseHVJQ0FnSUhSb2FYTXViR2x6ZEdWdVpYSWdQU0J4ZFdGdWRHbDBlVVJwYzNCaGRHTm9aWEl1Y21WbmFYTjBaWElvS0d4cGMzUmxibVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQnpkMmwwWTJnb2JHbHpkR1Z1WlhJdWRIbHdaU2tnZTF4dUlDQWdJQ0FnWTJGelpTQlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NdVZrRk1WVVZmUTBoQlRrZEZSRHBjYmlBZ0lDQWdJQ0FnZEdocGN5NXhkV0Z1ZEdsMGVTQTlJRzVsZHlCUmRXRnVkR2wwZVNoN1hHNGdJQ0FnSUNBZ0lDQWdkVzVwZERvZ2RHaHBjeTV4ZFdGdWRHbDBlUzUxYm1sMExDQmNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diR2x6ZEdWdVpYSXVaR0YwWVZ4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdZMkZ6WlNCUmRXRnVkR2wwZVVGamRHbHZibk11VlU1SlZGOURTRUZPUjBWRU9seHVJQ0FnSUNBZ0lDQjBhR2x6TG5GMVlXNTBhWFI1SUQwZ2JtVjNJRkYxWVc1MGFYUjVLSHRjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nZEdocGN5NXhkV0Z1ZEdsMGVTNTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQjFibWwwT2lCc2FYTjBaVzVsY2k1a1lYUmhYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMbU5vWVc1blpTZ3BPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnZFc1eVpXZHBjM1JsY2t4cGMzUmxibVZ5S0NrZ2UxeHVJQ0FnSUhGMVlXNTBhWFI1UkdsemNHRjBZMmhsY2k1MWJuSmxaMmx6ZEdWeUtIUm9hWE11YkdsemRHVnVaWElwTzF4dUlDQjlYRzU5SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSblZsYkVOdmJuTjFiWEIwYVc5dWN5QjdYRzRnSUhOMFlYUnBZeUJqWVd4aktIdHhkV0Z1ZEdsMGVUMTdmU3dnWkdsemRHRnVZMlU5ZTMxOUtTQjdYRzRnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSHRjYmlBZ0lDQWdJSFpoYkhWbE9pQXdMRnh1SUNBZ0lDQWdkVzVwZERvZ1lDUjdaR2x6ZEdGdVkyVXVkVzVwZEgwdkpIdHhkV0Z1ZEdsMGVTNTFibWwwZldCY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnYVdZZ0tDRnhkV0Z1ZEdsMGVTNTJZV3gxWlNCOGZDQWhaR2x6ZEdGdVkyVXVkbUZzZFdVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVZ6ZFd4MExuWmhiSFZsSUQwZ1pHbHpkR0Z1WTJVdWRtRnNkV1VnTHlCeGRXRnVkR2wwZVM1MllXeDFaVHRjYmx4dUlDQWdJSEpsYzNWc2RDNTJZV3gxWlNBOUlISmxjM1ZzZEM1MllXeDFaUzUwYjFOMGNtbHVaeWdwTG5OMVluTjBjbWx1Wnlnd0xDQXhNQ2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVnh1ZlNJc0ltbHRjRzl5ZENCa2FuTWdabkp2YlNBblpHOXRMbXB6Snp0Y2JseHVhVzF3YjNKMElFWjFaV3hEYjI1emRXMXdkR2x2YmxOMGIzSmxJR1p5YjIwZ0p5NHZablZsYkMxamIyNXpkVzF3ZEdsdmJpNXpkRzl5WlM1cWN5YzdYRzVjYm14bGRDQmpiMjVtYVdkTllYQWdQU0I3WEc0Z0lHaDBiV3c2SUdScWMyQmNiaUFnSUNBOFpHbDJJR05zWVhOelBWd2labVV0Wm5WbGJDMWpiMjV6ZFcxd2RHbHZibHdpUGx4dUlDQWdJQ0FnUEhOd1lXNGdZMnhoYzNNOVhDSm1aUzFxY3kxMllXeDFaVndpUGpnNFBDOXpjR0Z1UGlBOGMzQmhiaUJqYkdGemN6MWNJbVpsTFhWdWFYUmNJajVMYlM5TVBDOXpjR0Z1UGx4dUlDQWdJRHd2WkdsMlBseHVJQ0JnWEc1OU8xeHVYRzVzWlhRZ1pXeGxiV1Z1ZEUxaGNDQTlJSHRjYmlBZ0pHTnZiblJoYVc1bGNqb2diblZzYkN4Y2JpQWdKR1oxWld4RGIyNXpkVzF3ZEdsdmJqb2diblZzYkN4Y2JpQWdKR1oxWld4VmJtbDBPaUJ1ZFd4c0xGeHVJQ0FrWm5WbGJGWmhiSFZsT2lCdWRXeHNYRzU5TzF4dVhHNXNaWFFnWm5WbGJFTnZibk4xYlhCMGFXOXVVM1J2Y21VN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBibWwwVFc5a2RXeGxLQ1JqYjI1MFlXbHVaWElwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrWm5WbGJFTnZibk4xYlhCMGFXOXVJRDBnSkdOdmJuUmhhVzVsY2k1amNtVmhkR1VvWTI5dVptbG5UV0Z3TG1oMGJXd3BPMXh1SUNCelpYUkZiR1Z0Wlc1MFRXRndLQ1JqYjI1MFlXbHVaWElwTzF4dVhHNGdJR1oxWld4RGIyNXpkVzF3ZEdsdmJsTjBiM0psSUQwZ2JtVjNJRVoxWld4RGIyNXpkVzF3ZEdsdmJsTjBiM0psS0NrN1hHNWNiaUFnWm5WbGJFTnZibk4xYlhCMGFXOXVVM1J2Y21VdWIyNURhR0Z1WjJVb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVm1jbVZ6YUVaMVpXeERiMjV6ZFcxd2RHbHZiaWhtZFdWc1EyOXVjM1Z0Y0hScGIyNVRkRzl5WlM1eVpYTjFiSFJ6S1R0Y2JpQWdmU2s3WEc1Y2JpQWdablZsYkVOdmJuTjFiWEIwYVc5dVUzUnZjbVV1WTJoaGJtZGxLQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsWm5KbGMyaEdkV1ZzUTI5dWMzVnRjSFJwYjI0b2NtVnpkV3gwY3lrZ2UxeHVJQ0JsYkdWdFpXNTBUV0Z3TGlSbWRXVnNWVzVwZEM1cGJtNWxja2hVVFV3Z1BTQnlaWE4xYkhSekxuVnVhWFE3WEc0Z0lHVnNaVzFsYm5STllYQXVKR1oxWld4V1lXeDFaUzVwYm01bGNraFVUVXdnUFNCeVpYTjFiSFJ6TG5aaGJIVmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a1kyOXVkR0ZwYm1WeUlEMGdKR052Ym5SaGFXNWxjanRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtablZsYkZWdWFYUWdQU0JsYkdWdFpXNTBUV0Z3TGlSbWRXVnNRMjl1YzNWdGNIUnBiMjR1Wm1sdVpDZ25MbVpsTFhWdWFYUW5LVHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtablZsYkZaaGJIVmxJRDBnWld4bGJXVnVkRTFoY0M0a1puVmxiRU52Ym5OMWJYQjBhVzl1TG1acGJtUW9KeTVtWlMxcWN5MTJZV3gxWlNjcE8xeHVmU0lzSW1sdGNHOXlkQ0JUZEc5eVpTQm1jbTl0SUNjdUxpOHVMaTkwYjI5c2N5OXpkRzl5WlM1cWN5YzdYRzVjYm1sdGNHOXlkQ0JTWlhOMWJIUnpRMjl1YzNWdGNIUnBiMjV6UVdOMGFXOXVjeUJtY205dElDY3VMaTl5WlhOMWJIUnpMbUZqZEdsdmJuTXVhbk1uTzF4dWFXMXdiM0owSUhKbGMzVnNkRVJwYzNCaGRHTm9aWElnWm5KdmJTQW5MaTR2Y21WemRXeDBjeTVrYVhOd1lYUmphR1Z5TG1wekp6dGNibHh1YVcxd2IzSjBJRVoxWld4RGIyNXpkVzF3ZEdsdmJuTWdabkp2YlNBbkxpOW1kV1ZzTFdOdmJuTjFiWEIwYVc5dUxtTnNZWE56TG1wekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1JuVmxiRU52Ym5OMWJYQjBhVzl1VTNSdmNtVWdaWGgwWlc1a2N5QlRkRzl5WlNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxuSmxjM1ZzZEhNZ1BTQkdkV1ZzUTI5dWMzVnRjSFJwYjI1ekxtTmhiR01vZTMwcE8xeHVYRzRnSUNBZ2NtVnpkV3gwUkdsemNHRjBZMmhsY2k1eVpXZHBjM1JsY2lnb2JHbHpkR1Z1WlhJcElEMCtJSHRjYmlBZ0lDQWdJSE4zYVhSamFDaHNhWE4wWlc1bGNpNTBlWEJsS1NCN1hHNGdJQ0FnSUNCallYTmxJRkpsYzNWc2RITkRiMjV6ZFcxd2RHbHZibk5CWTNScGIyNXpMbEpGVTFWTVZGOURTRUZPUjBWRU9seHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMzVnNkSE1nUFNCR2RXVnNRMjl1YzNWdGNIUnBiMjV6TG1OaGJHTW9iR2x6ZEdWdVpYSXVaR0YwWVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTJoaGJtZGxLSFJvYVhNdWNtVnpkV3gwY3lrN1hHNWNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYm4waUxDSnBiWEJ2Y25RZ1pHcHpJR1p5YjIwZ0oyUnZiUzVxY3ljN1hHNXBiWEJ2Y25RZ0tpQmhjeUJtZFdWc1EyOXRjM1Z3ZEdsdmJpQm1jbTl0SUNjdUwyWjFaV3d0WTI5dWMzVnRjSFJwYjI0dlpuVmxiQzFqYjI1emRXMXdkR2x2Ymk1cWN5YzdYRzVwYlhCdmNuUWdVbVZ6ZFd4MGMxTjBiM0psSUdaeWIyMGdKeTR2Y21WemRXeDBjeTV6ZEc5eVpTNXFjeWM3WEc1Y2JteGxkQ0J5WlhOMWJIUnpVM1J2Y21VN1hHNWNibXhsZENCamIyNW1hV2ROWVhBZ1BTQjdYRzRnSUdoMGJXdzZJR1JxYzJCY2JpQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVptVXRjbVZ6ZFd4MGN5MWpiMjUwWVdsdVpYSmNJajVjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKbVpTMXFjeTFtZFdWc0xXTnZibk4xYlhCMGFXOXVYQ0lnYzNSNWJHVTlYQ0pvWldsbmFIUTZNVEF3SlZ3aVBqd3ZaR2wyUGx4dUlDQWdJRHd2WkdsMlBseHVJQ0JnWEc1OU8xeHVYRzVzWlhRZ1pXeGxiV1Z1ZEUxaGNDQTlJSHRjYmlBZ0pHTnZiblJoYVc1bGNqb2diblZzYkN4Y2JpQWdKSEpsYzNWc2RITkRiMjUwWVdsdVpYSTZJRzUxYkd3c1hHNGdJQ1JtZFdWc1EyOXRjM1Z3ZEdsdmJqb2diblZzYkZ4dWZUdGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x1YVhSTmIyUjFiR1VvSkdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0JsYkdWdFpXNTBUV0Z3TGlSeVpYTjFiSFJ6UTI5dWRHRnBibVZ5SUQwZ0pHTnZiblJoYVc1bGNpNWpjbVZoZEdVb1kyOXVabWxuVFdGd0xtaDBiV3dwTzF4dUlDQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcE8xeHVYRzRnSUhKbGMzVnNkSE5UZEc5eVpTQTlJRzVsZHlCU1pYTjFiSFJ6VTNSdmNtVW9LVHRjYmlBZ1hHNGdJR1oxWld4RGIyMXpkWEIwYVc5dUxtbHVhWFJOYjJSMWJHVW9aV3hsYldWdWRFMWhjQzRrWm5WbGJFTnZiWE4xY0hScGIyNHBPMXh1WEc0Z0lISmxjM1ZzZEhOVGRHOXlaUzUxY0dSaGRHVlNaWE4xYkhSektDazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxkRVZzWlcxbGJuUk5ZWEFvSkdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0JsYkdWdFpXNTBUV0Z3TGlSamIyNTBZV2x1WlhJZ1BTQWtZMjl1ZEdGcGJtVnlPMXh1SUNCbGJHVnRaVzUwVFdGd0xpUm1kV1ZzUTI5dGMzVndkR2x2YmlBOUlHVnNaVzFsYm5STllYQXVKSEpsYzNWc2RITkRiMjUwWVdsdVpYSXVabWx1WkNnbkxtWmxMV3B6TFdaMVpXd3RZMjl1YzNWdGNIUnBiMjRuS1R0Y2JuMGlMQ0pwYlhCdmNuUWdjbVZ6ZFd4MGMwUnBjM0JoZEdOb1pYSWdabkp2YlNBbkxpOXlaWE4xYkhSekxtUnBjM0JoZEdOb1pYSXVhbk1uTzF4dWFXMXdiM0owSUh0a1pXWnBibVZEYjI1emRGQnliM0JsY25SNWZTQm1jbTl0SUNjdUxpOTBiMjlzY3k5MWRHbHNjeTVxY3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZKbGMzVnNkSE5CWTNScGIyNXpJSHRjYmlBZ2MzUmhkR2xqSUdOb1lXNW5aVkpsYzNWc2RDaDJZV3gxWlNrZ2UxeHVJQ0FnSUhKbGMzVnNkSE5FYVhOd1lYUmphR1Z5TG1ScGMzQmhkR05vS0h0Y2JpQWdJQ0FnSUhSNWNHVTZJRkpsYzNWc2RITkJZM1JwYjI1ekxsSkZVMVZNVkY5RFNFRk9SMFZFTEZ4dUlDQWdJQ0FnWkdGMFlUb2dkbUZzZFdWY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNWtaV1pwYm1WRGIyNXpkRkJ5YjNCbGNuUjVLRkpsYzNWc2RITkJZM1JwYjI1ekxDQW5Va1ZUVlV4VVgwTklRVTVIUlVRbkxDQlRlVzFpYjJ3b0tTazdYRzRpTENKcGJYQnZjblFnUkdsemNHRjBZMmhsY2lCbWNtOXRJQ2N1TGk5MGIyOXNjeTlrYVhOd1lYUmphR1Z5TG1wekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdibVYzSUVScGMzQmhkR05vWlhJb0tUc2lMQ0pwYlhCdmNuUWdVM1J2Y21VZ1puSnZiU0FuTGk0dmRHOXZiSE12YzNSdmNtVXVhbk1uTzF4dVhHNXBiWEJ2Y25RZ1VYVmhiblJwZEhrZ1puSnZiU0FuTGk0dmNYVmhiblJwZEhrdmNYVmhiblJwZEhrdVkyeGhjM011YW5Nbk8xeHVhVzF3YjNKMElGRjFZVzUwYVhSNVFXTjBhVzl1Y3lCbWNtOXRJQ2N1TGk5eGRXRnVkR2wwZVM5eGRXRnVkR2wwZVM1aFkzUnBiMjV6TG1wekp6dGNibWx0Y0c5eWRDQnhkV0Z1ZEdsMGVVUnBjM0JoZEdOb1pYSWdabkp2YlNBbkxpNHZjWFZoYm5ScGRIa3ZjWFZoYm5ScGRIa3VaR2x6Y0dGMFkyaGxjaTVxY3ljN1hHNWNibWx0Y0c5eWRDQkVhWE4wWVc1alpTQm1jbTl0SUNjdUxpOWthWE4wWVc1alpTOWthWE4wWVc1alpTNWpiR0Z6Y3k1cWN5YzdYRzVwYlhCdmNuUWdSR2x6ZEdGdVkyVkJZM1JwYjI1eklHWnliMjBnSnk0dUwyUnBjM1JoYm1ObEwyUnBjM1JoYm1ObExtRmpkR2x2Ym5NdWFuTW5PMXh1YVcxd2IzSjBJR1JwYzNSaGJtTmxSR2x6Y0dGMFkyaGxjaUJtY205dElDY3VMaTlrYVhOMFlXNWpaUzlrYVhOMFlXNWpaUzVrYVhOd1lYUmphR1Z5TG1wekp6dGNibHh1YVcxd2IzSjBJRkpsYzNWc2RITkJZM1JwYjI1eklHWnliMjBnSnk0dmNtVnpkV3gwY3k1aFkzUnBiMjV6TG1wekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VtVnpkV3gwYzFOMGIzSmxJR1Y0ZEdWdVpITWdVM1J2Y21VZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dVhHNGdJQ0FnZEdocGN5NXhkV0Z1ZEdsMGVTQTlJRzVsZHlCUmRXRnVkR2wwZVNoN2ZTazdYRzRnSUNBZ2RHaHBjeTVrYVhOMFlXNWpaU0E5SUc1bGR5QkVhWE4wWVc1alpTaDdmU2s3WEc1Y2JpQWdJQ0J4ZFdGdWRHbDBlVVJwYzNCaGRHTm9aWEl1Y21WbmFYTjBaWElvS0d4cGMzUmxibVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZSZFdGdWRHbDBlVU5zWVhOektHeHBjM1JsYm1WeUtUdGNibHh1SUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZTWlhOMWJIUnpLQ2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JrYVhOMFlXNWpaVVJwYzNCaGRHTm9aWEl1Y21WbmFYTjBaWElvS0d4cGMzUmxibVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZFYVhOMFlXNWpaVU5zWVhOektHeHBjM1JsYm1WeUtUdGNibHh1SUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZTWlhOMWJIUnpLQ2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCZmRYQmtZWFJsVVhWaGJuUnBkSGxEYkdGemN5aHNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lITjNhWFJqYUNoc2FYTjBaVzVsY2k1MGVYQmxLU0I3WEc0Z0lDQWdZMkZ6WlNCUmRXRnVkR2wwZVVGamRHbHZibk11VmtGTVZVVmZRMGhCVGtkRlJEcGNiaUFnSUNBZ0lIUm9hWE11Y1hWaGJuUnBkSGtnUFNCdVpYY2dVWFZoYm5ScGRIa29lMXh1SUNBZ0lDQWdJQ0IxYm1sME9pQjBhR2x6TG5GMVlXNTBhWFI1TG5WdWFYUXNJRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2diR2x6ZEdWdVpYSXVaR0YwWVZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnWTJGelpTQlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NdVZVNUpWRjlEU0VGT1IwVkVPbHh1SUNBZ0lDQWdkR2hwY3k1eGRXRnVkR2wwZVNBOUlHNWxkeUJSZFdGdWRHbDBlU2g3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUIwYUdsekxuRjFZVzUwYVhSNUxuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNCMWJtbDBPaUJzYVhOMFpXNWxjaTVrWVhSaFhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWphR0Z1WjJVb0tUdGNiaUFnZlZ4dVhHNGdJRjkxY0dSaGRHVkVhWE4wWVc1alpVTnNZWE56S0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnYzNkcGRHTm9LR3hwYzNSbGJtVnlMblI1Y0dVcElIdGNiaUFnSUNCallYTmxJRVJwYzNSaGJtTmxRV04wYVc5dWN5NVdRVXhWUlY5RFNFRk9SMFZFT2x4dUlDQWdJQ0FnZEdocGN5NWthWE4wWVc1alpTQTlJRzVsZHlCRWFYTjBZVzVqWlNoN1hHNGdJQ0FnSUNBZ0lIVnVhWFE2SUhSb2FYTXVaR2x6ZEdGdVkyVXVkVzVwZEN3Z1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lCc2FYTjBaVzVsY2k1a1lYUmhYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQmpZWE5sSUVScGMzUmhibU5sUVdOMGFXOXVjeTVWVGtsVVgwTklRVTVIUlVRNlhHNGdJQ0FnSUNCMGFHbHpMbVJwYzNSaGJtTmxJRDBnYm1WM0lFUnBjM1JoYm1ObEtIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklIUm9hWE11WkdsemRHRnVZMlV1ZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJSFZ1YVhRNklHeHBjM1JsYm1WeUxtUmhkR0ZjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG1Ob1lXNW5aU2dwTzF4dUlDQjlYRzVjYmlBZ2RYQmtZWFJsVW1WemRXeDBjeWdwSUh0Y2JpQWdJQ0JTWlhOMWJIUnpRV04wYVc5dWN5NWphR0Z1WjJWU1pYTjFiSFFvZTF4dUlDQWdJQ0FnY1hWaGJuUnBkSGs2SUhSb2FYTXVjWFZoYm5ScGRIa3NYRzRnSUNBZ0lDQmthWE4wWVc1alpUb2dkR2hwY3k1a2FYTjBZVzVqWlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzU5SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSR2x6Y0dGMFkyaGxjaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSFJvYVhNdVgyeHBjM1JsYm1WeWN5QTlJRzVsZHlCTllYQW9LVHRjYmlBZ2ZWeHVYRzRnSUdScGMzQmhkR05vS0c5aWFpa2dlMXh1SUNBZ0lIUm9hWE11WDJ4cGMzUmxibVZ5Y3k1bWIzSkZZV05vS0Noc2FYTjBaVzVsY2lrZ1BUNGdiR2x6ZEdWdVpYSW9iMkpxS1NrN1hHNGdJSDFjYmx4dUlDQnlaV2RwYzNSbGNpaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHeGxkQ0JzYVhOMFpXNWxjaUE5SUZONWJXSnZiQ2dwTzF4dVhHNGdJQ0FnZEdocGN5NWZiR2x6ZEdWdVpYSnpMbk5sZENoc2FYTjBaVzVsY2l3Z1kyRnNiR0poWTJzcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUd4cGMzUmxibVZ5TzF4dUlDQjlYRzVjYmlBZ2RXNXlaV2RwYzNSbGNpaHNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlzYVhOMFpXNWxjbk11WkdWc1pYUmxLR3hwYzNSbGJtVnlLVHRjYmlBZ2ZWeHVmU0lzSW1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGTjBiM0psSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnZEdocGN5NWZiR2x6ZEdWdVpYSnpJRDBnYm1WM0lFMWhjQ2dwTzF4dUlDQjlYRzVjYmlBZ1kyaGhibWRsS0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMnhwYzNSbGJtVnljeTVtYjNKRllXTm9LQ2hzYVhOMFpXNWxjaWtnUFQ0Z2JHbHpkR1Z1WlhJb0tTazdYRzRnSUgxY2JseHVJQ0J2YmtOb1lXNW5aU2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJR3hsZENCc2FYTjBaVzVsY2lBOUlGTjViV0p2YkNncE8xeHVYRzRnSUNBZ2RHaHBjeTVmYkdsemRHVnVaWEp6TG5ObGRDaHNhWE4wWlc1bGNpd2dZMkZzYkdKaFkyc3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHeHBjM1JsYm1WeU8xeHVJQ0I5WEc1Y2JpQWdkVzV5WldkcGMzUmxja05vWVc1blpTaHNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlzYVhOMFpXNWxjbk11WkdWc1pYUmxLR3hwYzNSbGJtVnlLVHRjYmlBZ2ZWeHVmU0lzSW1WNGNHOXlkQ0JtZFc1amRHbHZiaUJrWldacGJtVkRiMjV6ZEZCeWIzQmxjblI1S0c5aWFpd2djSEp2Y0N3Z2RtRnNkV1VwSUh0Y2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c5aWFpd2djSEp2Y0N3Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdkM0pwZEdGaWJHVTZJR1poYkhObExGeHVJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnZG1Gc2RXVTZJSFpoYkhWbFhHNGdJSDBwTzF4dWZTSmRmUT09XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
