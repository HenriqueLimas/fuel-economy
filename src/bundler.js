!function e(t,n,u){function i(a,s){if(!n[a]){if(!t[a]){var o="function"==typeof require&&require;if(!s&&o)return o(a,!0);if(r)return r(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return i(n?n:e)},c,c.exports,e,t,n,u)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<u.length;a++)i(u[a]);return i}({1:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e){if("string"==typeof e)return(0,l.find)(e);if(Array.isArray(e)){for(var t=arguments.length,n=Array(t>1?t-1:0),u=1;t>u;u++)n[u-1]=arguments[u];return s["default"].apply(void 0,[e].concat(n))}}Object.defineProperty(n,"__esModule",{value:!0});var a=e("../util/html.js"),s=i(a),o=e("./manipulation.js"),l=e("./find.js"),c=e("./styles.js"),f=u(c);r.create=o.create,r.css=f.css,r.addClass=f.addClass,r.removeClass=f.removeClass,r.toggleClass=f.toggleClass,r.containsClass=f.containsClass,r.find=l.find,r.findAll=l.findAll,r.remove=o.remove,n["default"]=r},{"../util/html.js":7,"./find.js":3,"./manipulation.js":4,"./styles.js":5}],2:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return e?(e.find=function(t){return a["default"].find(t,e)},e.findAll=function(t){return a["default"].findAll(t,e)},e.create=function(t){var n=a["default"].create(t);return e.appendChild(n),n},e.css=function(t){return a["default"].css(e,t)},e.addClass=function(t){return a["default"].addClass(e,t)},e.removeClass=function(t){return a["default"].removeClass(e,t)},e.toggleClass=function(t,n){return a["default"].toggleClass(e,t,n)},e.containsClass=function(t){return a["default"].containsClass(e,t)},e.remove=function(){var t=arguments.length<=0||void 0===arguments[0]?e:arguments[0],n=a["default"].remove(t);return e=null,n},e):null}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=i;var r=e("./d.js"),a=u(r)},{"./d.js":1}],3:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return(0,s["default"])(t.querySelector(e))}function r(e){var t=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return t.querySelectorAll(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.find=i,n.findAll=r;var a=e("./djsfy"),s=u(a)},{"./djsfy":2}],4:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var t=document.createDocumentFragment(),n=t.appendChild(document.createElement("div"));return n.innerHTML=e.trim(),1===n.childNodes.length&&(n=n.lastChild),(0,s["default"])(n.cloneNode(!0))}function r(e){return e.parentNode?e.parentNode.removeChild(e):null}Object.defineProperty(n,"__esModule",{value:!0}),n.create=i,n.remove=r;var a=e("./djsfy.js"),s=u(a)},{"./djsfy.js":2}],5:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!e||8===e.nodeType||3===e.nodeType||!e.style)return null;for(var n in t)if(Object.hasOwnProperty.call(t,n)){var u=y({styleList:e.style,styleToCheck:n});u&&(e.style[u]=t[n])}return(0,h["default"])(e)}function r(e,t){var n=e.getAttribute("class")||"";if(t=p(t)||[],t instanceof Array)for(var u=0,i=t.length;i>u;u++){if(!t[u].trim())throw new SyntaxError("djs.addClass(): Empty strings are not valid class name");d(n,t[u])||(n+=" "+t[u].trim())}return e.setAttribute("class",n.trim()),(0,h["default"])(e)}function a(e,t){if(!e)throw new Error("The element must be not empty.");return c(t),d(e.getAttribute("class"),t)}function s(e,t){var n=l(e);if(t=p(t)||[],!n.length||!t.length)return(0,h["default"])(e);if(t instanceof Array)e:for(var u=0,i=t.length;i>u;u++){var r=t[u];c(r);for(var a=0,s=n.length;s>a;a++)if(r===n[a]){n.splice(a,1);continue e}}return e.setAttribute("class",n.join(" ")),(0,h["default"])(e)}function o(e,t,n){if(!e)throw new Error("The element must be not empty.");c(t);var u=l(e);return d(u,t)?n||s(e,t):n!==!1&&r(e,t),(0,h["default"])(e)}function l(e){return p(e.getAttribute("class"))||[]}function c(e){if(!e)throw new Error("The className provided ('"+e+"') must be not empty.");if(f(e))throw new Error("The className provided ('"+e+"') contains HTML space characters, which are not valid.")}function f(e){return e.match(/\s/)}function d(e,t){e=p(e)||[];for(var n=0,u=e.length;u>n;n++)if(e[n].trim()===t.trim())return!0;return!1}function p(e){return"string"==typeof e&&(e=e.split(" ")),e}function y(e){var t=e.styleList,n=e.styleToCheck;if(n in t)return n;if(n in C)return C[n];for(var u=0,i=O.length;i>u;u++){var r=""+O[u]+n[0].toUpperCase()+n.substring(1);if(r in t)return C[n]=r,C[n]}return!1}Object.defineProperty(n,"__esModule",{value:!0}),n.css=i,n.addClass=r,n.containsClass=a,n.removeClass=s,n.toggleClass=o;var v=e("./djsfy"),h=u(v),j="ms",_="webkit",b="moz",m="o",g="xv",w="khtml",O=[j,_,b,m,g,w],C={"float":"cssFloat"}},{"./djsfy":2}],6:[function(e,t,n){(function(u){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("./djs/d.js"),a=i(r);"object"==typeof n&&"undefined"!=typeof t?t.exports=a["default"]:"function"==typeof define&&define.amd&&define([],function(){return a["default"]});var s=void 0;s="undefined"!=typeof window?window:"undefined"!=typeof u?u:"undefined"!=typeof self?self:void 0,s.djs=a["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./djs/d.js":1}],7:[function(e,t,n){"use strict";function u(e){for(var t=e.raw,n=void 0,u=arguments.length,r=Array(u>1?u-1:0),a=1;u>a;a++)r[a-1]=arguments[a];return n=r.reduce(function(e,n,u){var r=t[u];return n=Array.isArray(n)?n.join(""):n+"","$"===r[r.length-1]&&(n=i(n),r=r.slice(0,-1)),e+=r,e+=n},""),n+=t[t.length-1]}function i(e){return e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quote;").replace(/'/g,"&#39;").replace(/`/g,"&#96;")}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=u},{}],8:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./distance.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./distance.dispatcher.js":10}],9:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(t){var n=t.unit,i=void 0===n?"Km":n,r=t.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=r},{}],10:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],11:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){j.$distance=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.distance.unit)}),p["default"].changeUnit("Km"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$distance.find(".fe-distance__input"),j.$unit=j.$distance.find(".fe-distance__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=i(['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="text">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="text">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var c=e("dom.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$distance:null,$input:null,$unit:null},_=void 0},{"./distance.actions.js":8,"./distance.store.js":12,"dom.js":6}],12:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./distance.class.js"),f=u(c),d=e("./distance.actions.js"),p=u(d),y=e("./distance.dispatcher.js"),v=u(y),h=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.distance=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.distance=new f["default"]({unit:e.distance.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.distance=new f["default"]({value:e.distance.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./distance.actions.js":8,"./distance.class.js":9,"./distance.dispatcher.js":10}],13:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){e.create(l.html)}var a=i(['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  '],['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var s=e("dom.js"),o=u(s),l={html:(0,o["default"])(a)}},{"dom.js":6}],14:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("dom.js"),a=i(r),s=e("./header/header.js"),o=u(s),l=e("./inputs/inputs-container.js"),c=u(l),f=e("./results/results-container.js"),d=u(f),p=u(f),y=e("./quantity/quantity.js"),v=u(y),h=e("./distance/distance.js"),j=u(h),_=(0,a["default"])(".fe-js-header"),b=(0,a["default"])(".fe-js-inputs-container"),m=(0,a["default"])(".fe-js-results-container"),g={unit:"L"},w={unit:"Km"};v.config({unit:"L",onInput:function(e){g=e,p.refreshFuelConsumption({distance:w,quantity:g})}}),j.config({unit:"Km",onInput:function(e){w=e,p.refreshFuelConsumption({distance:w,quantity:g})}}),o.initModule(_),c.initModule(b),d.initModule(m),p.refreshFuelConsumption({distance:w,quantity:g})},{"./distance/distance.js":11,"./header/header.js":13,"./inputs/inputs-container.js":15,"./quantity/quantity.js":19,"./results/results-container.js":24,"dom.js":6}],15:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){h.$inputContainer=e.create(v.html),s(e),d.initModule(h.$inputQuantity),y.initModule(h.$inputDistance)}function s(e){h.$container=e,h.$inputQuantity=h.$inputContainer.find(".fe-js-quantity"),h.$inputDistance=h.$inputContainer.find(".fe-js-distance")}var o=r(['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  '],['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=i(l),f=e("../quantity/quantity.js"),d=u(f),p=e("../distance/distance.js"),y=u(p),v={html:(0,c["default"])(o)},h={$container:null,$inputContainer:null,$inputQuantity:null,$inputDistance:null}},{"../distance/distance.js":11,"../quantity/quantity.js":19,"dom.js":6}],16:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./quantity.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeValue",value:function(t){s["default"].dispatch({type:e.VALUE_CHANGED,data:t})}},{key:"changeUnit",value:function(t){s["default"].dispatch({type:e.UNIT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"VALUE_CHANGED",Symbol()),(0,o.defineConstProperty)(l,"UNIT_CHANGED",Symbol())},{"../tools/utils.js":30,"./quantity.dispatcher.js":18}],17:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(t){var n=t.unit,i=void 0===n?"L":n,r=t.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();n["default"]=r},{}],18:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],19:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){j.$quantity=e.create(h.html),s(e),o(),_=new v["default"],_.onChange(function(){a(_.quantity.unit)}),p["default"].changeUnit("L"),_.unregisterListener()}function a(e){j.$unit.innerHTML=e}function s(e){j.$container=e,j.$input=j.$quantity.find(".fe-quantity__input"),j.$unit=j.$quantity.find(".fe-quantity__unit")}function o(){j.$input.addEventListener("input",function(e){p["default"].changeValue(e.target.value)})}var l=i(['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="text">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="text">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var c=e("dom.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.store.js"),v=u(y),h={html:(0,f["default"])(l)},j={$container:null,$quantity:null,$input:null,$unit:null},_=void 0},{"./quantity.actions.js":16,"./quantity.store.js":20,"dom.js":6}],20:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("./quantity.class.js"),f=u(c),d=e("./quantity.actions.js"),p=u(d),y=e("./quantity.dispatcher.js"),v=u(y),h=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.listener=v["default"].register(function(t){switch(t.type){case p["default"].VALUE_CHANGED:e.quantity=new f["default"]({unit:e.quantity.unit,value:t.data});break;case p["default"].UNIT_CHANGED:e.quantity=new f["default"]({value:e.quantity.value,unit:t.data})}e.change()}),e}return a(t,e),s(t,[{key:"unregisterListener",value:function(){v["default"].unregister(this.listener)}}]),t}(l["default"]);n["default"]=h},{"../tools/store.js":29,"./quantity.actions.js":16,"./quantity.class.js":17,"./quantity.dispatcher.js":18}],21:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e)}return i(e,null,[{key:"calc",value:function(e){var t=e.quantity,n=void 0===t?{}:t,u=e.distance,i=void 0===u?{}:u,r={value:0,unit:i.unit+"/"+n.unit};return n.value&&i.value?(r.value=i.value/n.value,r.value=r.value.toString().substring(0,10),r):r}}]),e}();n["default"]=r},{}],22:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function r(e){y.$fuelConsumption=e.create(p.html),s(e),v=new d["default"],v.onChange(function(){a(v.results)}),v.change()}function a(e){y.$fuelUnit.innerHTML=e.unit,y.$fuelValue.innerHTML=e.value}function s(e){y.$container=e,y.$fuelUnit=y.$fuelConsumption.find(".fe-unit"),y.$fuelValue=y.$fuelConsumption.find(".fe-js-value")}var o=i(['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  '],['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=r;var l=e("dom.js"),c=u(l),f=e("./fuel-consumption.store.js"),d=u(f),p={html:(0,c["default"])(o)},y={$container:null,$fuelConsumption:null,$fuelUnit:null,$fuelValue:null},v=void 0},{"./fuel-consumption.store.js":23,"dom.js":6}],23:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../../tools/store.js"),o=u(s),l=e("../results.actions.js"),c=u(l),f=e("../results.dispatcher.js"),d=u(f),p=e("./fuel-consumption.class.js"),y=u(p),v=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.results=y["default"].calc({}),d["default"].register(function(t){switch(t.type){case c["default"].RESULT_CHANGED:e.results=y["default"].calc(t.data),e.change(e.results)}}),e}return a(t,e),t}(o["default"]);n["default"]=v},{"../../tools/store.js":29,"../results.actions.js":25,"../results.dispatcher.js":26,"./fuel-consumption.class.js":21}],24:[function(e,t,n){"use strict";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e){j.$resultsContainer=e.create(h.html),s(e),v=new y["default"],d.initModule(j.$fuelComsuption),v.updateResults()}function s(e){j.$container=e,j.$fuelComsuption=j.$resultsContainer.find(".fe-js-fuel-consumption")}var o=r(['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  '],['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  ']);Object.defineProperty(n,"__esModule",{value:!0}),n.initModule=a;var l=e("dom.js"),c=i(l),f=e("./fuel-consumption/fuel-consumption.js"),d=u(f),p=e("./results.store.js"),y=i(p),v=void 0,h={html:(0,c["default"])(o)},j={$container:null,$resultsContainer:null,$fuelComsuption:null}},{"./fuel-consumption/fuel-consumption.js":22,"./results.store.js":27,"dom.js":6}],25:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var a=e("./results.dispatcher.js"),s=u(a),o=e("../tools/utils.js"),l=function(){function e(){i(this,e)}return r(e,null,[{key:"changeResult",value:function(t){s["default"].dispatch({type:e.RESULT_CHANGED,data:t})}}]),e}();n["default"]=l,(0,o.defineConstProperty)(l,"RESULT_CHANGED",Symbol())},{"../tools/utils.js":30,"./results.dispatcher.js":26}],26:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("../tools/dispatcher.js"),r=u(i);n["default"]=new r["default"]},{"../tools/dispatcher.js":28}],27:[function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var o=e("../tools/store.js"),l=u(o),c=e("../quantity/quantity.class.js"),f=u(c),d=e("../quantity/quantity.actions.js"),p=u(d),y=e("../quantity/quantity.dispatcher.js"),v=u(y),h=e("../distance/distance.class.js"),j=u(h),_=e("../distance/distance.actions.js"),b=u(_),m=e("../distance/distance.dispatcher.js"),g=u(m),w=e("./results.actions.js"),O=u(w),C=function(e){function t(){i(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.quantity=new f["default"]({}),e.distance=new j["default"]({}),v["default"].register(function(t){e._updateQuantityClass(t),e.updateResults()}),g["default"].register(function(t){e._updateDistanceClass(t),e.updateResults()}),e}return a(t,e),s(t,[{key:"_updateQuantityClass",value:function(e){switch(e.type){case p["default"].VALUE_CHANGED:this.quantity=new f["default"]({unit:this.quantity.unit,value:e.data});break;case p["default"].UNIT_CHANGED:this.quantity=new f["default"]({value:this.quantity.value,unit:e.data})}this.change()}},{key:"_updateDistanceClass",value:function(e){switch(e.type){case b["default"].VALUE_CHANGED:this.distance=new j["default"]({unit:this.distance.unit,value:e.data});break;case b["default"].UNIT_CHANGED:this.distance=new j["default"]({value:this.distance.value,unit:e.data})}this.change()}},{key:"updateResults",value:function(){O["default"].changeResult({quantity:this.quantity,distance:this.distance})}}]),t}(l["default"]);n["default"]=C},{"../distance/distance.actions.js":8,"../distance/distance.class.js":9,"../distance/distance.dispatcher.js":10,"../quantity/quantity.actions.js":16,"../quantity/quantity.class.js":17,"../quantity/quantity.dispatcher.js":18,"../tools/store.js":29,"./results.actions.js":25}],28:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e),this._listeners=new Map}return i(e,[{key:"dispatch",value:function(e){this._listeners.forEach(function(t){return t(e)})}},{key:"register",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregister",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=r},{}],29:[function(e,t,n){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var u=t[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(t,n,u){return n&&e(t.prototype,n),u&&e(t,u),t}}();Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){u(this,e),this._listeners=new Map}return i(e,[{key:"change",value:function(){this._listeners.forEach(function(e){return e()})}},{key:"onChange",value:function(e){var t=Symbol();return this._listeners.set(t,e),t}},{key:"unregisterChange",value:function(e){return this._listeners["delete"](e)}}]),e}();n["default"]=r},{}],30:[function(e,t,n){"use strict";function u(e,t,n){Object.defineProperty(e,t,{enumerable:!0,writable:!1,configurable:!1,value:n})}Object.defineProperty(n,"__esModule",{value:!0}),n.defineConstProperty=u},{}]},{},[14]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1bmRsZXIuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlZmF1bHQiLCJkanMiLCJ0ZW1wbGF0ZSIsIl9maW5kIiwiZmluZCIsIkFycmF5IiwiaXNBcnJheSIsIl9sZW4iLCJhcmd1bWVudHMiLCJzdWJzdHMiLCJfa2V5IiwiX2h0bWwyIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2h0bWwiLCJfbWFuaXB1bGF0aW9uIiwiX3N0eWxlcyIsInN0eWxlcyIsImNyZWF0ZSIsImNzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImNvbnRhaW5zQ2xhc3MiLCJmaW5kQWxsIiwicmVtb3ZlIiwiLi4vdXRpbC9odG1sLmpzIiwiLi9maW5kLmpzIiwiLi9tYW5pcHVsYXRpb24uanMiLCIuL3N0eWxlcy5qcyIsMiwiZGpzZnkiLCJub2RlIiwic3RyaW5nIiwiX2QyIiwiZWxlbWVudCIsImFwcGVuZENoaWxkIiwiY3NzU3R5bGVzIiwiY2xhc3NMaXN0IiwiY2xhc3NUb1JlbW92ZSIsImNsYXNzTmFtZSIsImZvcmNlIiwibm9kZVRvUmVtb3ZlIiwib2xkTm9kZSIsIl9kIiwiLi9kLmpzIiwzLCJyb290RWxlbWVudCIsImRvY3VtZW50IiwiX2Rqc2Z5MiIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2Rqc2Z5IiwiLi9kanNmeSIsNCwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInRyaW0iLCJjaGlsZE5vZGVzIiwibGFzdENoaWxkIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiLi9kanNmeS5qcyIsNSwibm9kZVR5cGUiLCJzdHlsZSIsImtleVByZWZpeGVkIiwiZ2V0U3R5bGVXaXRoUHJlZml4S2V5Iiwic3R5bGVMaXN0Iiwic3R5bGVUb0NoZWNrIiwiY3VycmVudENsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInBhcnNlQXJyYXkiLCJTeW50YXhFcnJvciIsImNvbnRhaW5zQ2xhc3NJbnRvTGlzdCIsInNldEF0dHJpYnV0ZSIsImFzc2VydENsYXNzTmFtZSIsImdldEN1cnJlbnRDbGFzc0xpc3QiLCJjbGFzc1RvUmVtb3ZlSW50ZXJhY3Rpb24iLCJ5IiwiX2xlbmd0aCIsInNwbGljZSIsImpvaW4iLCJjb250YWluc1doaXRlc3BhY2VzIiwibWF0Y2giLCJjbGFzc1RvQ2hlY2siLCJzcGxpdCIsIl9yZWYiLCJDU1NfUFJFRklYRUQiLCJQUkVGSVhJRVMiLCJzdHlsZVdpdGhQcmVmaXgiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIk1TIiwiV0VCS0lUIiwiTU9aIiwiTyIsIlhWIiwiS0hUTUwiLCJmbG9hdCIsNiwiZ2xvYmFsIiwiZGVmaW5lIiwiYW1kIiwiX2dsb2JhbCIsIndpbmRvdyIsInNlbGYiLCJ0aGlzIiwiLi9kanMvZC5qcyIsNywiaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZyIsInRlbXBsYXRlT2JqZWN0IiwicmF3IiwicmVzdWx0IiwicmVkdWNlIiwic3Vic3QiLCJsaXQiLCJodG1sRXNjYXBlIiwic2xpY2UiLCJzdHIiLCJyZXBsYWNlIiw4LCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9kaXN0YW5jZURpc3BhdGNoZXIiLCJfZGlzdGFuY2VEaXNwYXRjaGVyMiIsIl91dGlscyIsIkRpc3RhbmNlQWN0aW9ucyIsImRpc3BhdGNoIiwidHlwZSIsIlZBTFVFX0NIQU5HRUQiLCJkYXRhIiwidW5pdCIsIlVOSVRfQ0hBTkdFRCIsImRlZmluZUNvbnN0UHJvcGVydHkiLCJTeW1ib2wiLCIuLi90b29scy91dGlscy5qcyIsIi4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qcyIsOSwiRGlzdGFuY2UiLCJfcmVmJHVuaXQiLCJfcmVmJHZhbHVlIiwicGFyc2VJbnQiLDEwLCJfZGlzcGF0Y2hlciIsIl9kaXNwYXRjaGVyMiIsIi4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMiLDExLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwic3RyaW5ncyIsImZyZWV6ZSIsImluaXRNb2R1bGUiLCIkY29udGFpbmVyIiwiZWxlbWVudE1hcCIsIiRkaXN0YW5jZSIsImNvbmZpZ01hcCIsImh0bWwiLCJzZXRFbGVtZW50TWFwIiwic2V0RWxlbWVudEhhbmRsZXJzIiwiZGlzdGFuY2VTdG9yZSIsIl9kaXN0YW5jZVN0b3JlMiIsIm9uQ2hhbmdlIiwicmVmcmVzaFVuaXQiLCJkaXN0YW5jZSIsIl9kaXN0YW5jZUFjdGlvbnMyIiwiY2hhbmdlVW5pdCIsInVucmVnaXN0ZXJMaXN0ZW5lciIsIiR1bml0IiwiJGlucHV0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY2hhbmdlVmFsdWUiLCJfdGVtcGxhdGVPYmplY3QiLCJfZG9tIiwiX2RvbTIiLCJfZGlzdGFuY2VBY3Rpb25zIiwiX2Rpc3RhbmNlU3RvcmUiLCIuL2Rpc3RhbmNlLmFjdGlvbnMuanMiLCIuL2Rpc3RhbmNlLnN0b3JlLmpzIiwiZG9tLmpzIiwxMiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc3RvcmUiLCJfc3RvcmUyIiwiX2Rpc3RhbmNlQ2xhc3MiLCJfZGlzdGFuY2VDbGFzczIiLCJEaXN0YW5jZVN0b3JlIiwiX1N0b3JlIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsImxpc3RlbmVyIiwicmVnaXN0ZXIiLCJjaGFuZ2UiLCJ1bnJlZ2lzdGVyIiwiLi4vdG9vbHMvc3RvcmUuanMiLCIuL2Rpc3RhbmNlLmNsYXNzLmpzIiwxMywxNCwiX2hlYWRlciIsImhlYWRlciIsIl9pbnB1dHNDb250YWluZXIiLCJpbnB1dHNDb250YWluZXIiLCJfcmVzdWx0c0NvbnRhaW5lciIsInJlc3VsdHNDb250YWluZXIiLCJyZXN1bHRzIiwiX3F1YW50aXR5IiwicXVhbnRpdHkiLCJfZGlzdGFuY2UiLCIkaGVhZGVyQ29udGFpbmVyIiwiJGlucHV0c0NvbnRhaW5lciIsIiRyZXN1bHRzQ29udGFpbmVyIiwicXVhbnRpdHlNb2RlbCIsImRpc3RhbmNlTW9kZWwiLCJjb25maWciLCJvbklucHV0IiwibW9kZWwiLCJyZWZyZXNoRnVlbENvbnN1bXB0aW9uIiwiLi9kaXN0YW5jZS9kaXN0YW5jZS5qcyIsIi4vaGVhZGVyL2hlYWRlci5qcyIsIi4vaW5wdXRzL2lucHV0cy1jb250YWluZXIuanMiLCIuL3F1YW50aXR5L3F1YW50aXR5LmpzIiwiLi9yZXN1bHRzL3Jlc3VsdHMtY29udGFpbmVyLmpzIiwxNSwiJGlucHV0Q29udGFpbmVyIiwiJGlucHV0UXVhbnRpdHkiLCIkaW5wdXREaXN0YW5jZSIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzIiwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuanMiLDE2LCJfcXVhbnRpdHlEaXNwYXRjaGVyIiwiX3F1YW50aXR5RGlzcGF0Y2hlcjIiLCJRdWFudGl0eUFjdGlvbnMiLCIuL3F1YW50aXR5LmRpc3BhdGNoZXIuanMiLDE3LCJRdWFudGl0eSIsMTgsMTksIiRxdWFudGl0eSIsInF1YW50aXR5U3RvcmUiLCJfcXVhbnRpdHlTdG9yZTIiLCJfcXVhbnRpdHlBY3Rpb25zMiIsIl9xdWFudGl0eUFjdGlvbnMiLCJfcXVhbnRpdHlTdG9yZSIsIi4vcXVhbnRpdHkuYWN0aW9ucy5qcyIsIi4vcXVhbnRpdHkuc3RvcmUuanMiLDIwLCJfcXVhbnRpdHlDbGFzcyIsIl9xdWFudGl0eUNsYXNzMiIsIlF1YW50aXR5U3RvcmUiLCIuL3F1YW50aXR5LmNsYXNzLmpzIiwyMSwiRnVlbENvbnN1bXB0aW9ucyIsIl9yZWYkcXVhbnRpdHkiLCJfcmVmJGRpc3RhbmNlIiwidG9TdHJpbmciLDIyLCIkZnVlbENvbnN1bXB0aW9uIiwiZnVlbENvbnN1bXB0aW9uU3RvcmUiLCJfZnVlbENvbnN1bXB0aW9uU3RvcmUyIiwiJGZ1ZWxVbml0IiwiJGZ1ZWxWYWx1ZSIsIl9mdWVsQ29uc3VtcHRpb25TdG9yZSIsIi4vZnVlbC1jb25zdW1wdGlvbi5zdG9yZS5qcyIsMjMsIl9yZXN1bHRzQWN0aW9ucyIsIl9yZXN1bHRzQWN0aW9uczIiLCJfcmVzdWx0c0Rpc3BhdGNoZXIiLCJfcmVzdWx0c0Rpc3BhdGNoZXIyIiwiX2Z1ZWxDb25zdW1wdGlvbkNsYXNzIiwiX2Z1ZWxDb25zdW1wdGlvbkNsYXNzMiIsIkZ1ZWxDb25zdW1wdGlvblN0b3JlIiwiY2FsYyIsIlJFU1VMVF9DSEFOR0VEIiwiLi4vLi4vdG9vbHMvc3RvcmUuanMiLCIuLi9yZXN1bHRzLmFjdGlvbnMuanMiLCIuLi9yZXN1bHRzLmRpc3BhdGNoZXIuanMiLCIuL2Z1ZWwtY29uc3VtcHRpb24uY2xhc3MuanMiLDI0LCJyZXN1bHRzU3RvcmUiLCJfcmVzdWx0c1N0b3JlMiIsImZ1ZWxDb21zdXB0aW9uIiwiJGZ1ZWxDb21zdXB0aW9uIiwidXBkYXRlUmVzdWx0cyIsIl9mdWVsQ29uc3VtcHRpb24iLCJfcmVzdWx0c1N0b3JlIiwiLi9mdWVsLWNvbnN1bXB0aW9uL2Z1ZWwtY29uc3VtcHRpb24uanMiLCIuL3Jlc3VsdHMuc3RvcmUuanMiLDI1LCJSZXN1bHRzQWN0aW9ucyIsIi4vcmVzdWx0cy5kaXNwYXRjaGVyLmpzIiwyNiwyNywiUmVzdWx0c1N0b3JlIiwiX3VwZGF0ZVF1YW50aXR5Q2xhc3MiLCJfdXBkYXRlRGlzdGFuY2VDbGFzcyIsImNoYW5nZVJlc3VsdCIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmFjdGlvbnMuanMiLCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5jbGFzcy5qcyIsIi4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanMiLCIuLi9xdWFudGl0eS9xdWFudGl0eS5hY3Rpb25zLmpzIiwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuY2xhc3MuanMiLCIuLi9xdWFudGl0eS9xdWFudGl0eS5kaXNwYXRjaGVyLmpzIiwiLi9yZXN1bHRzLmFjdGlvbnMuanMiLDI4LCJEaXNwYXRjaGVyIiwiX2xpc3RlbmVycyIsIk1hcCIsImZvckVhY2giLCJjYWxsYmFjayIsInNldCIsMjksIlN0b3JlIiwzMCwicHJvcCJdLCJtYXBwaW5ncyI6IkNBQUEsUUFBVUEsR0FBRUMsRUFBRUMsRUFBRUMsR0FBRyxRQUFTQyxHQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsR0FBSUUsR0FBa0Isa0JBQVRDLFVBQXFCQSxPQUFRLEtBQUlGLEdBQUdDLEVBQUUsTUFBT0EsR0FBRUYsR0FBRSxFQUFJLElBQUdJLEVBQUUsTUFBT0EsR0FBRUosR0FBRSxFQUFJLElBQUlLLEdBQUUsR0FBSUMsT0FBTSx1QkFBdUJOLEVBQUUsSUFBSyxNQUFNSyxHQUFFRSxLQUFLLG1CQUFtQkYsRUFBRSxHQUFJRyxHQUFFWCxFQUFFRyxJQUFJUyxXQUFZYixHQUFFSSxHQUFHLEdBQUdVLEtBQUtGLEVBQUVDLFFBQVEsU0FBU2QsR0FBRyxHQUFJRSxHQUFFRCxFQUFFSSxHQUFHLEdBQUdMLEVBQUcsT0FBT0ksR0FBRUYsRUFBRUEsRUFBRUYsSUFBSWEsRUFBRUEsRUFBRUMsUUFBUWQsRUFB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QVlBLEVBQVdHLFVBQVcsR0FBTS9JLE9BQU9tQixlQUFldUgsRUFBUUUsRUFBVzdJLElBQUs2SSxJQUFpQixNQUFPLFVBQVVOLEVBQWFVLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZUCxFQUFpQkgsRUFBWXJJLFVBQVcrSSxHQUFpQkMsR0FBYVIsRUFBaUJILEVBQWFXLEdBQXFCWCxLQUVqaUJ0SSxRQUFPbUIsZUFBZTdCLEVBQVMsY0FDN0I4QixPQUFPLEdBS1QsSUFBSWdVLEdBQVEsV0FDVixRQUFTQSxLQUNQaE4sRUFBZ0JmLEtBQU0rTixHQUV0Qi9OLEtBQUt5TixXQUFhLEdBQUlDLEtBMEJ4QixNQXZCQXZNLEdBQWE0TSxJQUNYclYsSUFBSyxTQUNMcUIsTUFBTyxXQUNMaUcsS0FBS3lOLFdBQVdFLFFBQVEsU0FBVXJILEdBQ2hDLE1BQU9BLFVBSVg1TixJQUFLLFdBQ0xxQixNQUFPLFNBQWtCNlQsR0FDdkIsR0FBSXRILEdBQVc5RCxRQUlmLE9BRkF4QyxNQUFLeU4sV0FBV0ksSUFBSXZILEVBQVVzSCxHQUV2QnRILEtBR1Q1TixJQUFLLG1CQUNMcUIsTUFBTyxTQUEwQnVNLEdBQy9CLE1BQU90RyxNQUFLeU4sV0FBTHpOLFVBQXVCc0csT0FJM0J5SCxJQUdUOVYsR0FBQUEsV0FBa0I4VixPQUVaQyxJQUFJLFNBQVNyVyxFQUFRVSxFQUFPSixHQUNsQyxZQU1BLFNBQVNzSyxHQUFvQmhLLEVBQUswVixFQUFNbFUsR0FDdENwQixPQUFPbUIsZUFBZXZCLEVBQUswVixHQUN6QnpNLFlBQVksRUFDWkUsVUFBVSxFQUNWRCxjQUFjLEVBQ2QxSCxNQUFPQSxJQVRYcEIsT0FBT21CLGVBQWU3QixFQUFTLGNBQzdCOEIsT0FBTyxJQUVUOUIsRUFBUXNLLG9CQUFzQkEsWUFVbkIiLCJmaWxlIjoiYnVuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9odG1sID0gcmVxdWlyZSgnLi4vdXRpbC9odG1sLmpzJyk7XG5cbnZhciBfaHRtbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9odG1sKTtcblxudmFyIF9tYW5pcHVsYXRpb24gPSByZXF1aXJlKCcuL21hbmlwdWxhdGlvbi5qcycpO1xuXG52YXIgX2ZpbmQgPSByZXF1aXJlKCcuL2ZpbmQuanMnKTtcblxudmFyIF9zdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcy5qcycpO1xuXG52YXIgc3R5bGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3N0eWxlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGRqcyh0ZW1wbGF0ZSkge1xuICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiAoMCwgX2ZpbmQuZmluZCkodGVtcGxhdGUpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGVtcGxhdGUpKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN1YnN0cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHN1YnN0c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9odG1sMi5kZWZhdWx0LmFwcGx5KHVuZGVmaW5lZCwgW3RlbXBsYXRlXS5jb25jYXQoc3Vic3RzKSk7XG4gIH1cbn1cblxuZGpzLmNyZWF0ZSA9IF9tYW5pcHVsYXRpb24uY3JlYXRlO1xuZGpzLmNzcyA9IHN0eWxlcy5jc3M7XG5kanMuYWRkQ2xhc3MgPSBzdHlsZXMuYWRkQ2xhc3M7XG5kanMucmVtb3ZlQ2xhc3MgPSBzdHlsZXMucmVtb3ZlQ2xhc3M7XG5kanMudG9nZ2xlQ2xhc3MgPSBzdHlsZXMudG9nZ2xlQ2xhc3M7XG5kanMuY29udGFpbnNDbGFzcyA9IHN0eWxlcy5jb250YWluc0NsYXNzO1xuZGpzLmZpbmQgPSBfZmluZC5maW5kO1xuZGpzLmZpbmRBbGwgPSBfZmluZC5maW5kQWxsO1xuZGpzLnJlbW92ZSA9IF9tYW5pcHVsYXRpb24ucmVtb3ZlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBkanM7XG59LHtcIi4uL3V0aWwvaHRtbC5qc1wiOjcsXCIuL2ZpbmQuanNcIjozLFwiLi9tYW5pcHVsYXRpb24uanNcIjo0LFwiLi9zdHlsZXMuanNcIjo1fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkanNmeTtcblxudmFyIF9kID0gcmVxdWlyZSgnLi9kLmpzJyk7XG5cbnZhciBfZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZGpzZnkobm9kZSkge1xuICBpZiAoIW5vZGUpIHJldHVybiBudWxsO1xuXG4gIG5vZGUuZmluZCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQuZmluZChzdHJpbmcsIG5vZGUpO1xuICB9O1xuICBub2RlLmZpbmRBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmZpbmRBbGwoc3RyaW5nLCBub2RlKTtcbiAgfTtcbiAgbm9kZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBfZDIuZGVmYXVsdC5jcmVhdGUoc3RyaW5nKTtcblxuICAgIG5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfTtcblxuICBub2RlLmNzcyA9IGZ1bmN0aW9uIChjc3NTdHlsZXMpIHtcbiAgICByZXR1cm4gX2QyLmRlZmF1bHQuY3NzKG5vZGUsIGNzc1N0eWxlcyk7XG4gIH07XG4gIG5vZGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NMaXN0KSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmFkZENsYXNzKG5vZGUsIGNsYXNzTGlzdCk7XG4gIH07XG4gIG5vZGUucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NUb1JlbW92ZSkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdC5yZW1vdmVDbGFzcyhub2RlLCBjbGFzc1RvUmVtb3ZlKTtcbiAgfTtcbiAgbm9kZS50b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUsIGZvcmNlKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LnRvZ2dsZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSwgZm9yY2UpO1xuICB9O1xuICBub2RlLmNvbnRhaW5zQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIF9kMi5kZWZhdWx0LmNvbnRhaW5zQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgfTtcbiAgbm9kZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vZGVUb1JlbW92ZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IG5vZGUgOiBhcmd1bWVudHNbMF07XG5cbiAgICB2YXIgb2xkTm9kZSA9IF9kMi5kZWZhdWx0LnJlbW92ZShub2RlVG9SZW1vdmUpO1xuICAgIG5vZGUgPSBudWxsO1xuXG4gICAgcmV0dXJuIG9sZE5vZGU7XG4gIH07XG5cbiAgcmV0dXJuIG5vZGU7XG59XG59LHtcIi4vZC5qc1wiOjF9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmZpbmRBbGwgPSBmaW5kQWxsO1xuXG52YXIgX2Rqc2Z5ID0gcmVxdWlyZSgnLi9kanNmeScpO1xuXG52YXIgX2Rqc2Z5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rqc2Z5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZmluZChzdHJpbmcpIHtcbiAgdmFyIHJvb3RFbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gZG9jdW1lbnQgOiBhcmd1bWVudHNbMV07XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc3RyaW5nKSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRBbGwoc3RyaW5nKSB7XG4gIHZhciByb290RWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGRvY3VtZW50IDogYXJndW1lbnRzWzFdO1xuXG4gIHJldHVybiByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHN0cmluZyk7XG59XG59LHtcIi4vZGpzZnlcIjoyfV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmV4cG9ydHMucmVtb3ZlID0gcmVtb3ZlO1xuXG52YXIgX2Rqc2Z5ID0gcmVxdWlyZSgnLi9kanNmeS5qcycpO1xuXG52YXIgX2Rqc2Z5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rqc2Z5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlKHN0cmluZykge1xuICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIHZhciBlbGVtZW50ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gc3RyaW5nLnRyaW0oKTtcblxuICBpZiAoZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50Lmxhc3RDaGlsZDtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShlbGVtZW50LmNsb25lTm9kZSh0cnVlKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG59LHtcIi4vZGpzZnkuanNcIjoyfV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNzcyA9IGNzcztcbmV4cG9ydHMuYWRkQ2xhc3MgPSBhZGRDbGFzcztcbmV4cG9ydHMuY29udGFpbnNDbGFzcyA9IGNvbnRhaW5zQ2xhc3M7XG5leHBvcnRzLnJlbW92ZUNsYXNzID0gcmVtb3ZlQ2xhc3M7XG5leHBvcnRzLnRvZ2dsZUNsYXNzID0gdG9nZ2xlQ2xhc3M7XG5cbnZhciBfZGpzZnkgPSByZXF1aXJlKCcuL2Rqc2Z5Jyk7XG5cbnZhciBfZGpzZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGpzZnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBFZGdlIC8gSUVcbnZhciBNUyA9ICdtcyc7XG4vLyBDaHJvbWUgLyBTYWZhcmlcbnZhciBXRUJLSVQgPSAnd2Via2l0Jztcbi8vIEZpcmVmb3hcbnZhciBNT1ogPSAnbW96Jztcbi8vIE9wZXJhXG52YXIgTyA9ICdvJztcbnZhciBYViA9ICd4dic7XG4vLyBLREVcbnZhciBLSFRNTCA9ICdraHRtbCc7XG5cbnZhciBQUkVGSVhJRVMgPSBbTVMsIFdFQktJVCwgTU9aLCBPLCBYViwgS0hUTUxdO1xuXG52YXIgQ1NTX1BSRUZJWEVEID0ge1xuICBmbG9hdDogJ2Nzc0Zsb2F0J1xufTtcblxuZnVuY3Rpb24gY3NzKG5vZGUsIGNzc1N0eWxlcykge1xuICBpZiAoIW5vZGUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gOCB8fCBub2RlLm5vZGVUeXBlID09PSAzIHx8ICFub2RlLnN0eWxlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gY3NzU3R5bGVzKSB7XG4gICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNzc1N0eWxlcywga2V5KSkge1xuICAgICAgdmFyIGtleVByZWZpeGVkID0gZ2V0U3R5bGVXaXRoUHJlZml4S2V5KHtcbiAgICAgICAgc3R5bGVMaXN0OiBub2RlLnN0eWxlLFxuICAgICAgICBzdHlsZVRvQ2hlY2s6IGtleVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChrZXlQcmVmaXhlZCkge1xuICAgICAgICBub2RlLnN0eWxlW2tleVByZWZpeGVkXSA9IGNzc1N0eWxlc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoMCwgX2Rqc2Z5Mi5kZWZhdWx0KShub2RlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3Mobm9kZSwgY2xhc3NMaXN0KSB7XG4gIHZhciBjdXJyZW50Q2xhc3NMaXN0ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG5cbiAgY2xhc3NMaXN0ID0gcGFyc2VBcnJheShjbGFzc0xpc3QpIHx8IFtdO1xuXG4gIGlmIChjbGFzc0xpc3QgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjbGFzc0xpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghY2xhc3NMaXN0W2ldLnRyaW0oKSkge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ2Rqcy5hZGRDbGFzcygpOiBFbXB0eSBzdHJpbmdzIGFyZSBub3QgdmFsaWQgY2xhc3MgbmFtZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRhaW5zQ2xhc3NJbnRvTGlzdChjdXJyZW50Q2xhc3NMaXN0LCBjbGFzc0xpc3RbaV0pKSB7XG4gICAgICAgIGN1cnJlbnRDbGFzc0xpc3QgKz0gJyAnICsgY2xhc3NMaXN0W2ldLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXJyZW50Q2xhc3NMaXN0LnRyaW0oKSk7XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBjb250YWluc0NsYXNzKG5vZGUsIGNsYXNzTmFtZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlbGVtZW50IG11c3QgYmUgbm90IGVtcHR5LicpO1xuICB9XG5cbiAgYXNzZXJ0Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG5cbiAgcmV0dXJuIGNvbnRhaW5zQ2xhc3NJbnRvTGlzdChub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSwgY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NUb1JlbW92ZSkge1xuICB2YXIgY3VycmVudENsYXNzTGlzdCA9IGdldEN1cnJlbnRDbGFzc0xpc3Qobm9kZSk7XG5cbiAgY2xhc3NUb1JlbW92ZSA9IHBhcnNlQXJyYXkoY2xhc3NUb1JlbW92ZSkgfHwgW107XG5cbiAgaWYgKCFjdXJyZW50Q2xhc3NMaXN0Lmxlbmd0aCB8fCAhY2xhc3NUb1JlbW92ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkobm9kZSk7XG4gIH1cblxuICBpZiAoY2xhc3NUb1JlbW92ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgY2xhc3NUb1JlbW92ZUludGVyYWN0aW9uOiBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gY2xhc3NUb1JlbW92ZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzVG9SZW1vdmVbaV07XG4gICAgICBhc3NlcnRDbGFzc05hbWUoY2xhc3NOYW1lKTtcblxuICAgICAgY3VycmVudENsYXNzTGlzdEludGVyYWN0aW9uOiBmb3IgKHZhciB5ID0gMCwgX2xlbmd0aCA9IGN1cnJlbnRDbGFzc0xpc3QubGVuZ3RoOyB5IDwgX2xlbmd0aDsgeSsrKSB7XG4gICAgICAgIGlmIChjbGFzc05hbWUgPT09IGN1cnJlbnRDbGFzc0xpc3RbeV0pIHtcbiAgICAgICAgICBjdXJyZW50Q2xhc3NMaXN0LnNwbGljZSh5LCAxKTtcbiAgICAgICAgICBjb250aW51ZSBjbGFzc1RvUmVtb3ZlSW50ZXJhY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXJyZW50Q2xhc3NMaXN0LmpvaW4oJyAnKSk7XG5cbiAgcmV0dXJuICgwLCBfZGpzZnkyLmRlZmF1bHQpKG5vZGUpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhub2RlLCBjbGFzc05hbWUsIGZvcmNlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGVsZW1lbnQgbXVzdCBiZSBub3QgZW1wdHkuJyk7XG4gIH1cblxuICBhc3NlcnRDbGFzc05hbWUoY2xhc3NOYW1lKTtcblxuICB2YXIgY3VycmVudENsYXNzTGlzdCA9IGdldEN1cnJlbnRDbGFzc0xpc3Qobm9kZSk7XG5cbiAgaWYgKGNvbnRhaW5zQ2xhc3NJbnRvTGlzdChjdXJyZW50Q2xhc3NMaXN0LCBjbGFzc05hbWUpKSB7XG4gICAgaWYgKCFmb3JjZSkge1xuICAgICAgcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGZvcmNlICE9PSBmYWxzZSkge1xuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKDAsIF9kanNmeTIuZGVmYXVsdCkobm9kZSk7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRDbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gcGFyc2VBcnJheShub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkgfHwgW107XG59XG5cbmZ1bmN0aW9uIGFzc2VydENsYXNzTmFtZShjbGFzc05hbWUpIHtcbiAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjbGFzc05hbWUgcHJvdmlkZWQgKFxcJycgKyBjbGFzc05hbWUgKyAnXFwnKSBtdXN0IGJlIG5vdCBlbXB0eS4nKTtcbiAgfVxuXG4gIGlmIChjb250YWluc1doaXRlc3BhY2VzKGNsYXNzTmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjbGFzc05hbWUgcHJvdmlkZWQgKFxcJycgKyBjbGFzc05hbWUgKyAnXFwnKSBjb250YWlucyBIVE1MIHNwYWNlIGNoYXJhY3RlcnMsIHdoaWNoIGFyZSBub3QgdmFsaWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udGFpbnNXaGl0ZXNwYWNlcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaCgvXFxzLyk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zQ2xhc3NJbnRvTGlzdChjbGFzc0xpc3QsIGNsYXNzVG9DaGVjaykge1xuICBjbGFzc0xpc3QgPSBwYXJzZUFycmF5KGNsYXNzTGlzdCkgfHwgW107XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGNsYXNzTGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChjbGFzc0xpc3RbaV0udHJpbSgpID09PSBjbGFzc1RvQ2hlY2sudHJpbSgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXJyYXkoY2xhc3NMaXN0KSB7XG4gIGlmICh0eXBlb2YgY2xhc3NMaXN0ID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTGlzdCA9IGNsYXNzTGlzdC5zcGxpdCgnICcpO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzTGlzdDtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVXaXRoUHJlZml4S2V5KF9yZWYpIHtcbiAgdmFyIHN0eWxlTGlzdCA9IF9yZWYuc3R5bGVMaXN0O1xuICB2YXIgc3R5bGVUb0NoZWNrID0gX3JlZi5zdHlsZVRvQ2hlY2s7XG5cbiAgaWYgKHN0eWxlVG9DaGVjayBpbiBzdHlsZUxpc3QpIHtcbiAgICByZXR1cm4gc3R5bGVUb0NoZWNrO1xuICB9XG5cbiAgaWYgKHN0eWxlVG9DaGVjayBpbiBDU1NfUFJFRklYRUQpIHtcbiAgICByZXR1cm4gQ1NTX1BSRUZJWEVEW3N0eWxlVG9DaGVja107XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gUFJFRklYSUVTLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHN0eWxlV2l0aFByZWZpeCA9ICcnICsgUFJFRklYSUVTW2ldICsgc3R5bGVUb0NoZWNrWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHlsZVRvQ2hlY2suc3Vic3RyaW5nKDEpO1xuXG4gICAgaWYgKHN0eWxlV2l0aFByZWZpeCBpbiBzdHlsZUxpc3QpIHtcbiAgICAgIENTU19QUkVGSVhFRFtzdHlsZVRvQ2hlY2tdID0gc3R5bGVXaXRoUHJlZml4O1xuICAgICAgcmV0dXJuIENTU19QUkVGSVhFRFtzdHlsZVRvQ2hlY2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbn0se1wiLi9kanNmeVwiOjJ9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9kID0gcmVxdWlyZSgnLi9kanMvZC5qcycpO1xuXG52YXIgX2QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZDIuZGVmYXVsdDtcbn0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZDIuZGVmYXVsdDtcbiAgfSk7XG59XG5cbnZhciBfZ2xvYmFsID0gdW5kZWZpbmVkO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgX2dsb2JhbCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgX2dsb2JhbCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIF9nbG9iYWwgPSBzZWxmO1xufSBlbHNlIHtcbiAgX2dsb2JhbCA9IHVuZGVmaW5lZDtcbn1cblxuX2dsb2JhbC5kanMgPSBfZDIuZGVmYXVsdDtcbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vZGpzL2QuanNcIjoxfV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBodG1sU3RyaW5nRnJvbVRlbXBsYXRlU3RyaW5nO1xuZnVuY3Rpb24gaHRtbFN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZyh0ZW1wbGF0ZU9iamVjdCkge1xuICB2YXIgcmF3ID0gdGVtcGxhdGVPYmplY3QucmF3O1xuXG4gIHZhciByZXN1bHQgPSB1bmRlZmluZWQ7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN1YnN0cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzdWJzdHNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmVzdWx0ID0gc3Vic3RzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBzdWJzdCwgaSkge1xuICAgIHZhciBsaXQgPSByYXdbaV07XG5cbiAgICBzdWJzdCA9IEFycmF5LmlzQXJyYXkoc3Vic3QpID8gc3Vic3Quam9pbignJykgOiBzdWJzdCArICcnO1xuXG4gICAgaWYgKGxpdFtsaXQubGVuZ3RoIC0gMV0gPT09ICckJykge1xuICAgICAgc3Vic3QgPSBodG1sRXNjYXBlKHN1YnN0KTtcbiAgICAgIGxpdCA9IGxpdC5zbGljZSgwLCAtMSk7XG4gICAgfVxuXG4gICAgcmVzdWx0ICs9IGxpdDtcbiAgICByZXN1bHQgKz0gc3Vic3Q7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCAnJyk7XG5cbiAgcmVzdWx0ICs9IHJhd1tyYXcubGVuZ3RoIC0gMV07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaHRtbEVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLz4vZywgJyZndDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvXCIvZywgJyZxdW90ZTsnKS5yZXBsYWNlKC8nL2csICcmIzM5OycpLnJlcGxhY2UoL2AvZywgJyYjOTY7Jyk7XG59XG59LHt9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZURpc3BhdGNoZXIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdG9vbHMvdXRpbHMuanMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIERpc3RhbmNlQWN0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpc3RhbmNlQWN0aW9ucygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzdGFuY2VBY3Rpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaXN0YW5jZUFjdGlvbnMsIG51bGwsIFt7XG4gICAga2V5OiAnY2hhbmdlVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VWYWx1ZSh2YWx1ZSkge1xuICAgICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IERpc3RhbmNlQWN0aW9ucy5WQUxVRV9DSEFOR0VELFxuICAgICAgICBkYXRhOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2hhbmdlVW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVVuaXQodW5pdCkge1xuICAgICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IERpc3RhbmNlQWN0aW9ucy5VTklUX0NIQU5HRUQsXG4gICAgICAgIGRhdGE6IHVuaXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXN0YW5jZUFjdGlvbnM7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXN0YW5jZUFjdGlvbnM7XG5cbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoRGlzdGFuY2VBY3Rpb25zLCAnVkFMVUVfQ0hBTkdFRCcsIFN5bWJvbCgpKTtcbigwLCBfdXRpbHMuZGVmaW5lQ29uc3RQcm9wZXJ0eSkoRGlzdGFuY2VBY3Rpb25zLCAnVU5JVF9DSEFOR0VEJywgU3ltYm9sKCkpO1xuXG59LHtcIi4uL3Rvb2xzL3V0aWxzLmpzXCI6MzAsXCIuL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanNcIjoxMH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBEaXN0YW5jZSA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpc3RhbmNlKF9yZWYpIHtcbiAgICB2YXIgX3JlZiR1bml0ID0gX3JlZi51bml0O1xuICAgIHZhciB1bml0ID0gX3JlZiR1bml0ID09PSB1bmRlZmluZWQgPyAnS20nIDogX3JlZiR1bml0O1xuICAgIHZhciBfcmVmJHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgICB2YXIgdmFsdWUgPSBfcmVmJHZhbHVlID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiR2YWx1ZTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXN0YW5jZSk7XG5cbiAgICB0aGlzLnVuaXQgPSB1bml0O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEaXN0YW5jZSwgW3tcbiAgICBrZXk6ICdzZXRWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXN0YW5jZTtcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERpc3RhbmNlO1xuXG59LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL3Rvb2xzL2Rpc3BhdGNoZXIuanMnKTtcblxudmFyIF9kaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3BhdGNoZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgX2Rpc3BhdGNoZXIyLmRlZmF1bHQoKTtcblxufSx7XCIuLi90b29scy9kaXNwYXRjaGVyLmpzXCI6Mjh9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1kaXN0YW5jZVwiPlxcbiAgICAgIDxpbnB1dCBjbGFzcz1cImZlLWlucHV0c19faW5wdXQgZmUtZGlzdGFuY2VfX2lucHV0XCIgdHlwZT1cInRleHRcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLXVuaXQgZmUtZGlzdGFuY2VfX3VuaXRcIj57JCR1bml0fTwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAnXSwgWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLWRpc3RhbmNlXCI+XFxuICAgICAgPGlucHV0IGNsYXNzPVwiZmUtaW5wdXRzX19pbnB1dCBmZS1kaXN0YW5jZV9faW5wdXRcIiB0eXBlPVwidGV4dFwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiZmUtdW5pdCBmZS1kaXN0YW5jZV9fdW5pdFwiPnskJHVuaXR9PC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfZGlzdGFuY2VBY3Rpb25zID0gcmVxdWlyZSgnLi9kaXN0YW5jZS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlQWN0aW9ucyk7XG5cbnZhciBfZGlzdGFuY2VTdG9yZSA9IHJlcXVpcmUoJy4vZGlzdGFuY2Uuc3RvcmUuanMnKTtcblxudmFyIF9kaXN0YW5jZVN0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlU3RvcmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cbnZhciBjb25maWdNYXAgPSB7XG4gIGh0bWw6ICgwLCBfZG9tMi5kZWZhdWx0KShfdGVtcGxhdGVPYmplY3QpXG59O1xuXG52YXIgZWxlbWVudE1hcCA9IHtcbiAgJGNvbnRhaW5lcjogbnVsbCxcbiAgJGRpc3RhbmNlOiBudWxsLFxuICAkaW5wdXQ6IG51bGwsXG4gICR1bml0OiBudWxsXG59O1xuXG52YXIgZGlzdGFuY2VTdG9yZSA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGRpc3RhbmNlID0gJGNvbnRhaW5lci5jcmVhdGUoY29uZmlnTWFwLmh0bWwpO1xuICBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpO1xuICBzZXRFbGVtZW50SGFuZGxlcnMoKTtcblxuICBkaXN0YW5jZVN0b3JlID0gbmV3IF9kaXN0YW5jZVN0b3JlMi5kZWZhdWx0KCk7XG4gIGRpc3RhbmNlU3RvcmUub25DaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgIHJlZnJlc2hVbml0KGRpc3RhbmNlU3RvcmUuZGlzdGFuY2UudW5pdCk7XG4gIH0pO1xuXG4gIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuY2hhbmdlVW5pdCgnS20nKTtcbiAgZGlzdGFuY2VTdG9yZS51bnJlZ2lzdGVyTGlzdGVuZXIoKTtcbn1cblxuZnVuY3Rpb24gcmVmcmVzaFVuaXQodW5pdCkge1xuICBlbGVtZW50TWFwLiR1bml0LmlubmVySFRNTCA9IHVuaXQ7XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcikge1xuICBlbGVtZW50TWFwLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICBlbGVtZW50TWFwLiRpbnB1dCA9IGVsZW1lbnRNYXAuJGRpc3RhbmNlLmZpbmQoJy5mZS1kaXN0YW5jZV9faW5wdXQnKTtcbiAgZWxlbWVudE1hcC4kdW5pdCA9IGVsZW1lbnRNYXAuJGRpc3RhbmNlLmZpbmQoJy5mZS1kaXN0YW5jZV9fdW5pdCcpO1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50SGFuZGxlcnMoKSB7XG4gIGVsZW1lbnRNYXAuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgX2Rpc3RhbmNlQWN0aW9uczIuZGVmYXVsdC5jaGFuZ2VWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICB9KTtcbn1cblxufSx7XCIuL2Rpc3RhbmNlLmFjdGlvbnMuanNcIjo4LFwiLi9kaXN0YW5jZS5zdG9yZS5qc1wiOjEyLFwiZG9tLmpzXCI6Nn1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N0b3JlID0gcmVxdWlyZSgnLi4vdG9vbHMvc3RvcmUuanMnKTtcblxudmFyIF9zdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdG9yZSk7XG5cbnZhciBfZGlzdGFuY2VDbGFzcyA9IHJlcXVpcmUoJy4vZGlzdGFuY2UuY2xhc3MuanMnKTtcblxudmFyIF9kaXN0YW5jZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlQ2xhc3MpO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9ucyA9IHJlcXVpcmUoJy4vZGlzdGFuY2UuYWN0aW9ucy5qcycpO1xuXG52YXIgX2Rpc3RhbmNlQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUFjdGlvbnMpO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vZGlzdGFuY2UuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZURpc3BhdGNoZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBEaXN0YW5jZVN0b3JlID0gKGZ1bmN0aW9uIChfU3RvcmUpIHtcbiAgX2luaGVyaXRzKERpc3RhbmNlU3RvcmUsIF9TdG9yZSk7XG5cbiAgZnVuY3Rpb24gRGlzdGFuY2VTdG9yZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzdGFuY2VTdG9yZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGlzdGFuY2VTdG9yZSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5kaXN0YW5jZSA9IG5ldyBfZGlzdGFuY2VDbGFzczIuZGVmYXVsdCh7fSk7XG5cbiAgICBfdGhpcy5saXN0ZW5lciA9IF9kaXN0YW5jZURpc3BhdGNoZXIyLmRlZmF1bHQucmVnaXN0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBzd2l0Y2ggKGxpc3RlbmVyLnR5cGUpIHtcbiAgICAgICAgY2FzZSBfZGlzdGFuY2VBY3Rpb25zMi5kZWZhdWx0LlZBTFVFX0NIQU5HRUQ6XG4gICAgICAgICAgX3RoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdW5pdDogX3RoaXMuZGlzdGFuY2UudW5pdCxcbiAgICAgICAgICAgIHZhbHVlOiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuVU5JVF9DSEFOR0VEOlxuICAgICAgICAgIF90aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5kaXN0YW5jZS52YWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jaGFuZ2UoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGlzdGFuY2VTdG9yZSwgW3tcbiAgICBrZXk6ICd1bnJlZ2lzdGVyTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXIoKSB7XG4gICAgICBfZGlzdGFuY2VEaXNwYXRjaGVyMi5kZWZhdWx0LnVucmVnaXN0ZXIodGhpcy5saXN0ZW5lcik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERpc3RhbmNlU3RvcmU7XG59KShfc3RvcmUyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXN0YW5jZVN0b3JlO1xuXG59LHtcIi4uL3Rvb2xzL3N0b3JlLmpzXCI6MjksXCIuL2Rpc3RhbmNlLmFjdGlvbnMuanNcIjo4LFwiLi9kaXN0YW5jZS5jbGFzcy5qc1wiOjksXCIuL2Rpc3RhbmNlLmRpc3BhdGNoZXIuanNcIjoxMH1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90ZW1wbGF0ZU9iamVjdCA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWydcXG4gICAgPGhlYWRlciBjbGFzcz1cImZlLWhlYWRlclwiPlxcbiAgICAgIDxoMT5GdWVsIEVjb25vbXk8L2gxPlxcbiAgICA8L2hlYWRlcj5cXG4gICddLCBbJ1xcbiAgICA8aGVhZGVyIGNsYXNzPVwiZmUtaGVhZGVyXCI+XFxuICAgICAgPGgxPkZ1ZWwgRWNvbm9teTwvaDE+XFxuICAgIDwvaGVhZGVyPlxcbiAgJ10pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0TW9kdWxlID0gaW5pdE1vZHVsZTtcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHsgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTsgfVxuXG52YXIgY29uZmlnTWFwID0ge1xuICBodG1sOiAoMCwgX2RvbTIuZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KVxufTtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcbn1cblxufSx7XCJkb20uanNcIjo2fV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX2hlYWRlciA9IHJlcXVpcmUoJy4vaGVhZGVyL2hlYWRlci5qcycpO1xuXG52YXIgaGVhZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hlYWRlcik7XG5cbnZhciBfaW5wdXRzQ29udGFpbmVyID0gcmVxdWlyZSgnLi9pbnB1dHMvaW5wdXRzLWNvbnRhaW5lci5qcycpO1xuXG52YXIgaW5wdXRzQ29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2lucHV0c0NvbnRhaW5lcik7XG5cbnZhciBfcmVzdWx0c0NvbnRhaW5lciA9IHJlcXVpcmUoJy4vcmVzdWx0cy9yZXN1bHRzLWNvbnRhaW5lci5qcycpO1xuXG52YXIgcmVzdWx0c0NvbnRhaW5lciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9yZXN1bHRzQ29udGFpbmVyKTtcblxudmFyIHJlc3VsdHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcmVzdWx0c0NvbnRhaW5lcik7XG5cbnZhciBfcXVhbnRpdHkgPSByZXF1aXJlKCcuL3F1YW50aXR5L3F1YW50aXR5LmpzJyk7XG5cbnZhciBxdWFudGl0eSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9xdWFudGl0eSk7XG5cbnZhciBfZGlzdGFuY2UgPSByZXF1aXJlKCcuL2Rpc3RhbmNlL2Rpc3RhbmNlLmpzJyk7XG5cbnZhciBkaXN0YW5jZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9kaXN0YW5jZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciAkaGVhZGVyQ29udGFpbmVyID0gKDAsIF9kb20yLmRlZmF1bHQpKCcuZmUtanMtaGVhZGVyJyk7XG52YXIgJGlucHV0c0NvbnRhaW5lciA9ICgwLCBfZG9tMi5kZWZhdWx0KSgnLmZlLWpzLWlucHV0cy1jb250YWluZXInKTtcbnZhciAkcmVzdWx0c0NvbnRhaW5lciA9ICgwLCBfZG9tMi5kZWZhdWx0KSgnLmZlLWpzLXJlc3VsdHMtY29udGFpbmVyJyk7XG5cbnZhciBxdWFudGl0eU1vZGVsID0geyB1bml0OiAnTCcgfTtcbnZhciBkaXN0YW5jZU1vZGVsID0geyB1bml0OiAnS20nIH07XG5cbnF1YW50aXR5LmNvbmZpZyh7XG4gIHVuaXQ6ICdMJyxcbiAgb25JbnB1dDogZnVuY3Rpb24gb25JbnB1dChtb2RlbCkge1xuICAgIHF1YW50aXR5TW9kZWwgPSBtb2RlbDtcbiAgICByZXN1bHRzLnJlZnJlc2hGdWVsQ29uc3VtcHRpb24oe1xuICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlTW9kZWwsXG4gICAgICBxdWFudGl0eTogcXVhbnRpdHlNb2RlbFxuICAgIH0pO1xuICB9XG59KTtcblxuZGlzdGFuY2UuY29uZmlnKHtcbiAgdW5pdDogJ0ttJyxcbiAgb25JbnB1dDogZnVuY3Rpb24gb25JbnB1dChtb2RlbCkge1xuICAgIGRpc3RhbmNlTW9kZWwgPSBtb2RlbDtcbiAgICByZXN1bHRzLnJlZnJlc2hGdWVsQ29uc3VtcHRpb24oe1xuICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlTW9kZWwsXG4gICAgICBxdWFudGl0eTogcXVhbnRpdHlNb2RlbFxuICAgIH0pO1xuICB9XG59KTtcblxuaGVhZGVyLmluaXRNb2R1bGUoJGhlYWRlckNvbnRhaW5lcik7XG5pbnB1dHNDb250YWluZXIuaW5pdE1vZHVsZSgkaW5wdXRzQ29udGFpbmVyKTtcbnJlc3VsdHNDb250YWluZXIuaW5pdE1vZHVsZSgkcmVzdWx0c0NvbnRhaW5lcik7XG5cbnJlc3VsdHMucmVmcmVzaEZ1ZWxDb25zdW1wdGlvbih7XG4gIGRpc3RhbmNlOiBkaXN0YW5jZU1vZGVsLFxuICBxdWFudGl0eTogcXVhbnRpdHlNb2RlbFxufSk7XG5cbn0se1wiLi9kaXN0YW5jZS9kaXN0YW5jZS5qc1wiOjExLFwiLi9oZWFkZXIvaGVhZGVyLmpzXCI6MTMsXCIuL2lucHV0cy9pbnB1dHMtY29udGFpbmVyLmpzXCI6MTUsXCIuL3F1YW50aXR5L3F1YW50aXR5LmpzXCI6MTksXCIuL3Jlc3VsdHMvcmVzdWx0cy1jb250YWluZXIuanNcIjoyNCxcImRvbS5qc1wiOjZ9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMtY29udGFpbmVyXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImZlLWlucHV0cyBmZS1qcy1xdWFudGl0eVwiPjwvZGl2PlxcblxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1pbnB1dHMgZmUtanMtZGlzdGFuY2VcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAnXSwgWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLWlucHV0cy1jb250YWluZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtaW5wdXRzIGZlLWpzLXF1YW50aXR5XCI+PC9kaXY+XFxuXFxuICAgICAgPGRpdiBjbGFzcz1cImZlLWlucHV0cyBmZS1qcy1kaXN0YW5jZVwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfcXVhbnRpdHkgPSByZXF1aXJlKCcuLi9xdWFudGl0eS9xdWFudGl0eS5qcycpO1xuXG52YXIgcXVhbnRpdHkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcXVhbnRpdHkpO1xuXG52YXIgX2Rpc3RhbmNlID0gcmVxdWlyZSgnLi4vZGlzdGFuY2UvZGlzdGFuY2UuanMnKTtcblxudmFyIGRpc3RhbmNlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2Rpc3RhbmNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHsgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTsgfVxuXG52YXIgY29uZmlnTWFwID0ge1xuICBodG1sOiAoMCwgX2RvbTIuZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KVxufTtcblxudmFyIGVsZW1lbnRNYXAgPSB7XG4gICRjb250YWluZXI6IG51bGwsXG4gICRpbnB1dENvbnRhaW5lcjogbnVsbCxcbiAgJGlucHV0UXVhbnRpdHk6IG51bGwsXG4gICRpbnB1dERpc3RhbmNlOiBudWxsXG59O1xuXG5mdW5jdGlvbiBpbml0TW9kdWxlKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kaW5wdXRDb250YWluZXIgPSAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG5cbiAgc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKTtcblxuICBxdWFudGl0eS5pbml0TW9kdWxlKGVsZW1lbnRNYXAuJGlucHV0UXVhbnRpdHkpO1xuICBkaXN0YW5jZS5pbml0TW9kdWxlKGVsZW1lbnRNYXAuJGlucHV0RGlzdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kaW5wdXRRdWFudGl0eSA9IGVsZW1lbnRNYXAuJGlucHV0Q29udGFpbmVyLmZpbmQoJy5mZS1qcy1xdWFudGl0eScpO1xuICBlbGVtZW50TWFwLiRpbnB1dERpc3RhbmNlID0gZWxlbWVudE1hcC4kaW5wdXRDb250YWluZXIuZmluZCgnLmZlLWpzLWRpc3RhbmNlJyk7XG59XG5cbn0se1wiLi4vZGlzdGFuY2UvZGlzdGFuY2UuanNcIjoxMSxcIi4uL3F1YW50aXR5L3F1YW50aXR5LmpzXCI6MTksXCJkb20uanNcIjo2fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9xdWFudGl0eS5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5RGlzcGF0Y2hlcik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi90b29scy91dGlscy5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUXVhbnRpdHlBY3Rpb25zID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUXVhbnRpdHlBY3Rpb25zKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWFudGl0eUFjdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFF1YW50aXR5QWN0aW9ucywgbnVsbCwgW3tcbiAgICBrZXk6ICdjaGFuZ2VWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVZhbHVlKHZhbHVlKSB7XG4gICAgICBfcXVhbnRpdHlEaXNwYXRjaGVyMi5kZWZhdWx0LmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogUXVhbnRpdHlBY3Rpb25zLlZBTFVFX0NIQU5HRUQsXG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjaGFuZ2VVbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVW5pdCh1bml0KSB7XG4gICAgICBfcXVhbnRpdHlEaXNwYXRjaGVyMi5kZWZhdWx0LmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogUXVhbnRpdHlBY3Rpb25zLlVOSVRfQ0hBTkdFRCxcbiAgICAgICAgZGF0YTogdW5pdFxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFF1YW50aXR5QWN0aW9ucztcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFF1YW50aXR5QWN0aW9ucztcblxuKDAsIF91dGlscy5kZWZpbmVDb25zdFByb3BlcnR5KShRdWFudGl0eUFjdGlvbnMsICdWQUxVRV9DSEFOR0VEJywgU3ltYm9sKCkpO1xuKDAsIF91dGlscy5kZWZpbmVDb25zdFByb3BlcnR5KShRdWFudGl0eUFjdGlvbnMsICdVTklUX0NIQU5HRUQnLCBTeW1ib2woKSk7XG5cbn0se1wiLi4vdG9vbHMvdXRpbHMuanNcIjozMCxcIi4vcXVhbnRpdHkuZGlzcGF0Y2hlci5qc1wiOjE4fV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBRdWFudGl0eSA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1YW50aXR5KF9yZWYpIHtcbiAgICB2YXIgX3JlZiR1bml0ID0gX3JlZi51bml0O1xuICAgIHZhciB1bml0ID0gX3JlZiR1bml0ID09PSB1bmRlZmluZWQgPyAnTCcgOiBfcmVmJHVuaXQ7XG4gICAgdmFyIF9yZWYkdmFsdWUgPSBfcmVmLnZhbHVlO1xuICAgIHZhciB2YWx1ZSA9IF9yZWYkdmFsdWUgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJHZhbHVlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1YW50aXR5KTtcblxuICAgIHRoaXMudW5pdCA9IHVuaXQ7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFF1YW50aXR5LCBbe1xuICAgIGtleTogJ3NldFZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFF1YW50aXR5O1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUXVhbnRpdHk7XG5cbn0se31dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vdG9vbHMvZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX2Rpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzcGF0Y2hlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBfZGlzcGF0Y2hlcjIuZGVmYXVsdCgpO1xuXG59LHtcIi4uL3Rvb2xzL2Rpc3BhdGNoZXIuanNcIjoyOH1dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90ZW1wbGF0ZU9iamVjdCA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLXF1YW50aXR5XCI+XFxuICAgICAgPGlucHV0IGNsYXNzPVwiZmUtaW5wdXRzX19pbnB1dCBmZS1xdWFudGl0eV9faW5wdXRcIiB0eXBlPVwidGV4dFwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiZmUtdW5pdCBmZS1xdWFudGl0eV9fdW5pdFwiPnskJHVuaXR9PC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddLCBbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtcXVhbnRpdHlcIj5cXG4gICAgICA8aW5wdXQgY2xhc3M9XCJmZS1pbnB1dHNfX2lucHV0IGZlLXF1YW50aXR5X19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJmZS11bml0IGZlLXF1YW50aXR5X191bml0XCI+eyQkdW5pdH08L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgJ10pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0TW9kdWxlID0gaW5pdE1vZHVsZTtcblxudmFyIF9kb20gPSByZXF1aXJlKCdkb20uanMnKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMgPSByZXF1aXJlKCcuL3F1YW50aXR5LmFjdGlvbnMuanMnKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlBY3Rpb25zKTtcblxudmFyIF9xdWFudGl0eVN0b3JlID0gcmVxdWlyZSgnLi9xdWFudGl0eS5zdG9yZS5qcycpO1xuXG52YXIgX3F1YW50aXR5U3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlTdG9yZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkcXVhbnRpdHk6IG51bGwsXG4gICRpbnB1dDogbnVsbCxcbiAgJHVuaXQ6IG51bGxcbn07XG5cbnZhciBxdWFudGl0eVN0b3JlID0gdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpbml0TW9kdWxlKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kcXVhbnRpdHkgPSAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG4gIHNldEVsZW1lbnRIYW5kbGVycygpO1xuXG4gIHF1YW50aXR5U3RvcmUgPSBuZXcgX3F1YW50aXR5U3RvcmUyLmRlZmF1bHQoKTtcbiAgcXVhbnRpdHlTdG9yZS5vbkNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgcmVmcmVzaFVuaXQocXVhbnRpdHlTdG9yZS5xdWFudGl0eS51bml0KTtcbiAgfSk7XG5cbiAgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5jaGFuZ2VVbml0KCdMJyk7XG4gIHF1YW50aXR5U3RvcmUudW5yZWdpc3Rlckxpc3RlbmVyKCk7XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hVbml0KHVuaXQpIHtcbiAgZWxlbWVudE1hcC4kdW5pdC5pbm5lckhUTUwgPSB1bml0O1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kaW5wdXQgPSBlbGVtZW50TWFwLiRxdWFudGl0eS5maW5kKCcuZmUtcXVhbnRpdHlfX2lucHV0Jyk7XG4gIGVsZW1lbnRNYXAuJHVuaXQgPSBlbGVtZW50TWFwLiRxdWFudGl0eS5maW5kKCcuZmUtcXVhbnRpdHlfX3VuaXQnKTtcbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudEhhbmRsZXJzKCkge1xuICBlbGVtZW50TWFwLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuY2hhbmdlVmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfSk7XG59XG5cbn0se1wiLi9xdWFudGl0eS5hY3Rpb25zLmpzXCI6MTYsXCIuL3F1YW50aXR5LnN0b3JlLmpzXCI6MjAsXCJkb20uanNcIjo2fV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3RvcmUgPSByZXF1aXJlKCcuLi90b29scy9zdG9yZS5qcycpO1xuXG52YXIgX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3JlKTtcblxudmFyIF9xdWFudGl0eUNsYXNzID0gcmVxdWlyZSgnLi9xdWFudGl0eS5jbGFzcy5qcycpO1xuXG52YXIgX3F1YW50aXR5Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlDbGFzcyk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zID0gcmVxdWlyZSgnLi9xdWFudGl0eS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5QWN0aW9ucyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9xdWFudGl0eS5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5RGlzcGF0Y2hlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFF1YW50aXR5U3RvcmUgPSAoZnVuY3Rpb24gKF9TdG9yZSkge1xuICBfaW5oZXJpdHMoUXVhbnRpdHlTdG9yZSwgX1N0b3JlKTtcblxuICBmdW5jdGlvbiBRdWFudGl0eVN0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWFudGl0eVN0b3JlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihRdWFudGl0eVN0b3JlKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnF1YW50aXR5ID0gbmV3IF9xdWFudGl0eUNsYXNzMi5kZWZhdWx0KHt9KTtcblxuICAgIF90aGlzLmxpc3RlbmVyID0gX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHN3aXRjaCAobGlzdGVuZXIudHlwZSkge1xuICAgICAgICBjYXNlIF9xdWFudGl0eUFjdGlvbnMyLmRlZmF1bHQuVkFMVUVfQ0hBTkdFRDpcbiAgICAgICAgICBfdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB1bml0OiBfdGhpcy5xdWFudGl0eS51bml0LFxuICAgICAgICAgICAgdmFsdWU6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5VTklUX0NIQU5HRUQ6XG4gICAgICAgICAgX3RoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzLnF1YW50aXR5LnZhbHVlLFxuICAgICAgICAgICAgdW5pdDogbGlzdGVuZXIuZGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNoYW5nZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWFudGl0eVN0b3JlLCBbe1xuICAgIGtleTogJ3VucmVnaXN0ZXJMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcigpIHtcbiAgICAgIF9xdWFudGl0eURpc3BhdGNoZXIyLmRlZmF1bHQudW5yZWdpc3Rlcih0aGlzLmxpc3RlbmVyKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUXVhbnRpdHlTdG9yZTtcbn0pKF9zdG9yZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFF1YW50aXR5U3RvcmU7XG5cbn0se1wiLi4vdG9vbHMvc3RvcmUuanNcIjoyOSxcIi4vcXVhbnRpdHkuYWN0aW9ucy5qc1wiOjE2LFwiLi9xdWFudGl0eS5jbGFzcy5qc1wiOjE3LFwiLi9xdWFudGl0eS5kaXNwYXRjaGVyLmpzXCI6MTh9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRnVlbENvbnN1bXB0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZ1ZWxDb25zdW1wdGlvbnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZ1ZWxDb25zdW1wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZ1ZWxDb25zdW1wdGlvbnMsIG51bGwsIFt7XG4gICAga2V5OiBcImNhbGNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsYyhfcmVmKSB7XG4gICAgICB2YXIgX3JlZiRxdWFudGl0eSA9IF9yZWYucXVhbnRpdHk7XG4gICAgICB2YXIgcXVhbnRpdHkgPSBfcmVmJHF1YW50aXR5ID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkcXVhbnRpdHk7XG4gICAgICB2YXIgX3JlZiRkaXN0YW5jZSA9IF9yZWYuZGlzdGFuY2U7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBfcmVmJGRpc3RhbmNlID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkZGlzdGFuY2U7XG5cbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgICB1bml0OiBkaXN0YW5jZS51bml0ICsgXCIvXCIgKyBxdWFudGl0eS51bml0XG4gICAgICB9O1xuXG4gICAgICBpZiAoIXF1YW50aXR5LnZhbHVlIHx8ICFkaXN0YW5jZS52YWx1ZSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXN1bHQudmFsdWUgPSBkaXN0YW5jZS52YWx1ZSAvIHF1YW50aXR5LnZhbHVlO1xuXG4gICAgICByZXN1bHQudmFsdWUgPSByZXN1bHQudmFsdWUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRnVlbENvbnN1bXB0aW9ucztcbn0pKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZ1ZWxDb25zdW1wdGlvbnM7XG5cbn0se31dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90ZW1wbGF0ZU9iamVjdCA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWydcXG4gICAgPGRpdiBjbGFzcz1cImZlLWZ1ZWwtY29uc3VtcHRpb25cIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImZlLWpzLXZhbHVlXCI+ODg8L3NwYW4+IDxzcGFuIGNsYXNzPVwiZmUtdW5pdFwiPkttL0w8L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgJ10sIFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1mdWVsLWNvbnN1bXB0aW9uXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJmZS1qcy12YWx1ZVwiPjg4PC9zcGFuPiA8c3BhbiBjbGFzcz1cImZlLXVuaXRcIj5LbS9MPC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICddKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdE1vZHVsZSA9IGluaXRNb2R1bGU7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnZG9tLmpzJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfZnVlbENvbnN1bXB0aW9uU3RvcmUgPSByZXF1aXJlKCcuL2Z1ZWwtY29uc3VtcHRpb24uc3RvcmUuanMnKTtcblxudmFyIF9mdWVsQ29uc3VtcHRpb25TdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mdWVsQ29uc3VtcHRpb25TdG9yZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7IHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHsgcmF3OiB7IHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykgfSB9KSk7IH1cblxudmFyIGNvbmZpZ01hcCA9IHtcbiAgaHRtbDogKDAsIF9kb20yLmRlZmF1bHQpKF90ZW1wbGF0ZU9iamVjdClcbn07XG5cbnZhciBlbGVtZW50TWFwID0ge1xuICAkY29udGFpbmVyOiBudWxsLFxuICAkZnVlbENvbnN1bXB0aW9uOiBudWxsLFxuICAkZnVlbFVuaXQ6IG51bGwsXG4gICRmdWVsVmFsdWU6IG51bGxcbn07XG5cbnZhciBmdWVsQ29uc3VtcHRpb25TdG9yZSA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxDb25zdW1wdGlvbiA9ICRjb250YWluZXIuY3JlYXRlKGNvbmZpZ01hcC5odG1sKTtcbiAgc2V0RWxlbWVudE1hcCgkY29udGFpbmVyKTtcblxuICBmdWVsQ29uc3VtcHRpb25TdG9yZSA9IG5ldyBfZnVlbENvbnN1bXB0aW9uU3RvcmUyLmRlZmF1bHQoKTtcblxuICBmdWVsQ29uc3VtcHRpb25TdG9yZS5vbkNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgcmVmcmVzaEZ1ZWxDb25zdW1wdGlvbihmdWVsQ29uc3VtcHRpb25TdG9yZS5yZXN1bHRzKTtcbiAgfSk7XG5cbiAgZnVlbENvbnN1bXB0aW9uU3RvcmUuY2hhbmdlKCk7XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hGdWVsQ29uc3VtcHRpb24ocmVzdWx0cykge1xuICBlbGVtZW50TWFwLiRmdWVsVW5pdC5pbm5lckhUTUwgPSByZXN1bHRzLnVuaXQ7XG4gIGVsZW1lbnRNYXAuJGZ1ZWxWYWx1ZS5pbm5lckhUTUwgPSByZXN1bHRzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kZnVlbFVuaXQgPSBlbGVtZW50TWFwLiRmdWVsQ29uc3VtcHRpb24uZmluZCgnLmZlLXVuaXQnKTtcbiAgZWxlbWVudE1hcC4kZnVlbFZhbHVlID0gZWxlbWVudE1hcC4kZnVlbENvbnN1bXB0aW9uLmZpbmQoJy5mZS1qcy12YWx1ZScpO1xufVxuXG59LHtcIi4vZnVlbC1jb25zdW1wdGlvbi5zdG9yZS5qc1wiOjIzLFwiZG9tLmpzXCI6Nn1dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3Rvb2xzL3N0b3JlLmpzJyk7XG5cbnZhciBfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmUpO1xuXG52YXIgX3Jlc3VsdHNBY3Rpb25zID0gcmVxdWlyZSgnLi4vcmVzdWx0cy5hY3Rpb25zLmpzJyk7XG5cbnZhciBfcmVzdWx0c0FjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzdWx0c0FjdGlvbnMpO1xuXG52YXIgX3Jlc3VsdHNEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vcmVzdWx0cy5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcmVzdWx0c0Rpc3BhdGNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzdWx0c0Rpc3BhdGNoZXIpO1xuXG52YXIgX2Z1ZWxDb25zdW1wdGlvbkNsYXNzID0gcmVxdWlyZSgnLi9mdWVsLWNvbnN1bXB0aW9uLmNsYXNzLmpzJyk7XG5cbnZhciBfZnVlbENvbnN1bXB0aW9uQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVlbENvbnN1bXB0aW9uQ2xhc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBGdWVsQ29uc3VtcHRpb25TdG9yZSA9IChmdW5jdGlvbiAoX1N0b3JlKSB7XG4gIF9pbmhlcml0cyhGdWVsQ29uc3VtcHRpb25TdG9yZSwgX1N0b3JlKTtcblxuICBmdW5jdGlvbiBGdWVsQ29uc3VtcHRpb25TdG9yZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnVlbENvbnN1bXB0aW9uU3RvcmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZ1ZWxDb25zdW1wdGlvblN0b3JlKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnJlc3VsdHMgPSBfZnVlbENvbnN1bXB0aW9uQ2xhc3MyLmRlZmF1bHQuY2FsYyh7fSk7XG5cbiAgICBfcmVzdWx0c0Rpc3BhdGNoZXIyLmRlZmF1bHQucmVnaXN0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBzd2l0Y2ggKGxpc3RlbmVyLnR5cGUpIHtcbiAgICAgICAgY2FzZSBfcmVzdWx0c0FjdGlvbnMyLmRlZmF1bHQuUkVTVUxUX0NIQU5HRUQ6XG4gICAgICAgICAgX3RoaXMucmVzdWx0cyA9IF9mdWVsQ29uc3VtcHRpb25DbGFzczIuZGVmYXVsdC5jYWxjKGxpc3RlbmVyLmRhdGEpO1xuICAgICAgICAgIF90aGlzLmNoYW5nZShfdGhpcy5yZXN1bHRzKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBGdWVsQ29uc3VtcHRpb25TdG9yZTtcbn0pKF9zdG9yZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZ1ZWxDb25zdW1wdGlvblN0b3JlO1xuXG59LHtcIi4uLy4uL3Rvb2xzL3N0b3JlLmpzXCI6MjksXCIuLi9yZXN1bHRzLmFjdGlvbnMuanNcIjoyNSxcIi4uL3Jlc3VsdHMuZGlzcGF0Y2hlci5qc1wiOjI2LFwiLi9mdWVsLWNvbnN1bXB0aW9uLmNsYXNzLmpzXCI6MjF9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdGVtcGxhdGVPYmplY3QgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsnXFxuICAgIDxkaXYgY2xhc3M9XCJmZS1yZXN1bHRzLWNvbnRhaW5lclwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJmZS1qcy1mdWVsLWNvbnN1bXB0aW9uXCIgc3R5bGU9XCJoZWlnaHQ6MTAwJVwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICddLCBbJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmUtcmVzdWx0cy1jb250YWluZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiZmUtanMtZnVlbC1jb25zdW1wdGlvblwiIHN0eWxlPVwiaGVpZ2h0OjEwMCVcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAnXSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRNb2R1bGUgPSBpbml0TW9kdWxlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJ2RvbS5qcycpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG52YXIgX2Z1ZWxDb25zdW1wdGlvbiA9IHJlcXVpcmUoJy4vZnVlbC1jb25zdW1wdGlvbi9mdWVsLWNvbnN1bXB0aW9uLmpzJyk7XG5cbnZhciBmdWVsQ29tc3VwdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mdWVsQ29uc3VtcHRpb24pO1xuXG52YXIgX3Jlc3VsdHNTdG9yZSA9IHJlcXVpcmUoJy4vcmVzdWx0cy5zdG9yZS5qcycpO1xuXG52YXIgX3Jlc3VsdHNTdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzU3RvcmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cbnZhciByZXN1bHRzU3RvcmUgPSB1bmRlZmluZWQ7XG5cbnZhciBjb25maWdNYXAgPSB7XG4gIGh0bWw6ICgwLCBfZG9tMi5kZWZhdWx0KShfdGVtcGxhdGVPYmplY3QpXG59O1xuXG52YXIgZWxlbWVudE1hcCA9IHtcbiAgJGNvbnRhaW5lcjogbnVsbCxcbiAgJHJlc3VsdHNDb250YWluZXI6IG51bGwsXG4gICRmdWVsQ29tc3VwdGlvbjogbnVsbFxufTtcblxuZnVuY3Rpb24gaW5pdE1vZHVsZSgkY29udGFpbmVyKSB7XG4gIGVsZW1lbnRNYXAuJHJlc3VsdHNDb250YWluZXIgPSAkY29udGFpbmVyLmNyZWF0ZShjb25maWdNYXAuaHRtbCk7XG4gIHNldEVsZW1lbnRNYXAoJGNvbnRhaW5lcik7XG5cbiAgcmVzdWx0c1N0b3JlID0gbmV3IF9yZXN1bHRzU3RvcmUyLmRlZmF1bHQoKTtcblxuICBmdWVsQ29tc3VwdGlvbi5pbml0TW9kdWxlKGVsZW1lbnRNYXAuJGZ1ZWxDb21zdXB0aW9uKTtcblxuICByZXN1bHRzU3RvcmUudXBkYXRlUmVzdWx0cygpO1xufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50TWFwKCRjb250YWluZXIpIHtcbiAgZWxlbWVudE1hcC4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgZWxlbWVudE1hcC4kZnVlbENvbXN1cHRpb24gPSBlbGVtZW50TWFwLiRyZXN1bHRzQ29udGFpbmVyLmZpbmQoJy5mZS1qcy1mdWVsLWNvbnN1bXB0aW9uJyk7XG59XG5cbn0se1wiLi9mdWVsLWNvbnN1bXB0aW9uL2Z1ZWwtY29uc3VtcHRpb24uanNcIjoyMixcIi4vcmVzdWx0cy5zdG9yZS5qc1wiOjI3LFwiZG9tLmpzXCI6Nn1dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Jlc3VsdHNEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9yZXN1bHRzLmRpc3BhdGNoZXIuanMnKTtcblxudmFyIF9yZXN1bHRzRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzRGlzcGF0Y2hlcik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi90b29scy91dGlscy5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUmVzdWx0c0FjdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZXN1bHRzQWN0aW9ucygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzdWx0c0FjdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3VsdHNBY3Rpb25zLCBudWxsLCBbe1xuICAgIGtleTogJ2NoYW5nZVJlc3VsdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVJlc3VsdCh2YWx1ZSkge1xuICAgICAgX3Jlc3VsdHNEaXNwYXRjaGVyMi5kZWZhdWx0LmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogUmVzdWx0c0FjdGlvbnMuUkVTVUxUX0NIQU5HRUQsXG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzdWx0c0FjdGlvbnM7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZXN1bHRzQWN0aW9ucztcblxuKDAsIF91dGlscy5kZWZpbmVDb25zdFByb3BlcnR5KShSZXN1bHRzQWN0aW9ucywgJ1JFU1VMVF9DSEFOR0VEJywgU3ltYm9sKCkpO1xuXG59LHtcIi4uL3Rvb2xzL3V0aWxzLmpzXCI6MzAsXCIuL3Jlc3VsdHMuZGlzcGF0Y2hlci5qc1wiOjI2fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Rpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi90b29scy9kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfZGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNwYXRjaGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IF9kaXNwYXRjaGVyMi5kZWZhdWx0KCk7XG5cbn0se1wiLi4vdG9vbHMvZGlzcGF0Y2hlci5qc1wiOjI4fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3RvcmUgPSByZXF1aXJlKCcuLi90b29scy9zdG9yZS5qcycpO1xuXG52YXIgX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3JlKTtcblxudmFyIF9xdWFudGl0eUNsYXNzID0gcmVxdWlyZSgnLi4vcXVhbnRpdHkvcXVhbnRpdHkuY2xhc3MuanMnKTtcblxudmFyIF9xdWFudGl0eUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5Q2xhc3MpO1xuXG52YXIgX3F1YW50aXR5QWN0aW9ucyA9IHJlcXVpcmUoJy4uL3F1YW50aXR5L3F1YW50aXR5LmFjdGlvbnMuanMnKTtcblxudmFyIF9xdWFudGl0eUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVhbnRpdHlBY3Rpb25zKTtcblxudmFyIF9xdWFudGl0eURpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9xdWFudGl0eS9xdWFudGl0eS5kaXNwYXRjaGVyLmpzJyk7XG5cbnZhciBfcXVhbnRpdHlEaXNwYXRjaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1YW50aXR5RGlzcGF0Y2hlcik7XG5cbnZhciBfZGlzdGFuY2VDbGFzcyA9IHJlcXVpcmUoJy4uL2Rpc3RhbmNlL2Rpc3RhbmNlLmNsYXNzLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZUNsYXNzKTtcblxudmFyIF9kaXN0YW5jZUFjdGlvbnMgPSByZXF1aXJlKCcuLi9kaXN0YW5jZS9kaXN0YW5jZS5hY3Rpb25zLmpzJyk7XG5cbnZhciBfZGlzdGFuY2VBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlQWN0aW9ucyk7XG5cbnZhciBfZGlzdGFuY2VEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vZGlzdGFuY2UvZGlzdGFuY2UuZGlzcGF0Y2hlci5qcycpO1xuXG52YXIgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0YW5jZURpc3BhdGNoZXIpO1xuXG52YXIgX3Jlc3VsdHNBY3Rpb25zID0gcmVxdWlyZSgnLi9yZXN1bHRzLmFjdGlvbnMuanMnKTtcblxudmFyIF9yZXN1bHRzQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXN1bHRzQWN0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlc3VsdHNTdG9yZSA9IChmdW5jdGlvbiAoX1N0b3JlKSB7XG4gIF9pbmhlcml0cyhSZXN1bHRzU3RvcmUsIF9TdG9yZSk7XG5cbiAgZnVuY3Rpb24gUmVzdWx0c1N0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXN1bHRzU3RvcmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlc3VsdHNTdG9yZSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7fSk7XG4gICAgX3RoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe30pO1xuXG4gICAgX3F1YW50aXR5RGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIF90aGlzLl91cGRhdGVRdWFudGl0eUNsYXNzKGxpc3RlbmVyKTtcblxuICAgICAgX3RoaXMudXBkYXRlUmVzdWx0cygpO1xuICAgIH0pO1xuXG4gICAgX2Rpc3RhbmNlRGlzcGF0Y2hlcjIuZGVmYXVsdC5yZWdpc3RlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIF90aGlzLl91cGRhdGVEaXN0YW5jZUNsYXNzKGxpc3RlbmVyKTtcblxuICAgICAgX3RoaXMudXBkYXRlUmVzdWx0cygpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXN1bHRzU3RvcmUsIFt7XG4gICAga2V5OiAnX3VwZGF0ZVF1YW50aXR5Q2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlUXVhbnRpdHlDbGFzcyhsaXN0ZW5lcikge1xuICAgICAgc3dpdGNoIChsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgIGNhc2UgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5WQUxVRV9DSEFOR0VEOlxuICAgICAgICAgIHRoaXMucXVhbnRpdHkgPSBuZXcgX3F1YW50aXR5Q2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdW5pdDogdGhpcy5xdWFudGl0eS51bml0LFxuICAgICAgICAgICAgdmFsdWU6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3F1YW50aXR5QWN0aW9uczIuZGVmYXVsdC5VTklUX0NIQU5HRUQ6XG4gICAgICAgICAgdGhpcy5xdWFudGl0eSA9IG5ldyBfcXVhbnRpdHlDbGFzczIuZGVmYXVsdCh7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5xdWFudGl0eS52YWx1ZSxcbiAgICAgICAgICAgIHVuaXQ6IGxpc3RlbmVyLmRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoYW5nZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ191cGRhdGVEaXN0YW5jZUNsYXNzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZURpc3RhbmNlQ2xhc3MobGlzdGVuZXIpIHtcbiAgICAgIHN3aXRjaCAobGlzdGVuZXIudHlwZSkge1xuICAgICAgICBjYXNlIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuVkFMVUVfQ0hBTkdFRDpcbiAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gbmV3IF9kaXN0YW5jZUNsYXNzMi5kZWZhdWx0KHtcbiAgICAgICAgICAgIHVuaXQ6IHRoaXMuZGlzdGFuY2UudW5pdCxcbiAgICAgICAgICAgIHZhbHVlOiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9kaXN0YW5jZUFjdGlvbnMyLmRlZmF1bHQuVU5JVF9DSEFOR0VEOlxuICAgICAgICAgIHRoaXMuZGlzdGFuY2UgPSBuZXcgX2Rpc3RhbmNlQ2xhc3MyLmRlZmF1bHQoe1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuZGlzdGFuY2UudmFsdWUsXG4gICAgICAgICAgICB1bml0OiBsaXN0ZW5lci5kYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFuZ2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVSZXN1bHRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUmVzdWx0cygpIHtcbiAgICAgIF9yZXN1bHRzQWN0aW9uczIuZGVmYXVsdC5jaGFuZ2VSZXN1bHQoe1xuICAgICAgICBxdWFudGl0eTogdGhpcy5xdWFudGl0eSxcbiAgICAgICAgZGlzdGFuY2U6IHRoaXMuZGlzdGFuY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXN1bHRzU3RvcmU7XG59KShfc3RvcmUyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZXN1bHRzU3RvcmU7XG5cbn0se1wiLi4vZGlzdGFuY2UvZGlzdGFuY2UuYWN0aW9ucy5qc1wiOjgsXCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5jbGFzcy5qc1wiOjksXCIuLi9kaXN0YW5jZS9kaXN0YW5jZS5kaXNwYXRjaGVyLmpzXCI6MTAsXCIuLi9xdWFudGl0eS9xdWFudGl0eS5hY3Rpb25zLmpzXCI6MTYsXCIuLi9xdWFudGl0eS9xdWFudGl0eS5jbGFzcy5qc1wiOjE3LFwiLi4vcXVhbnRpdHkvcXVhbnRpdHkuZGlzcGF0Y2hlci5qc1wiOjE4LFwiLi4vdG9vbHMvc3RvcmUuanNcIjoyOSxcIi4vcmVzdWx0cy5hY3Rpb25zLmpzXCI6MjV9XSwyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRGlzcGF0Y2hlciA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpc3BhdGNoZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpc3BhdGNoZXIpO1xuXG4gICAgdGhpcy5fbGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERpc3BhdGNoZXIsIFt7XG4gICAga2V5OiBcImRpc3BhdGNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoKG9iaikge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcihvYmopO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlZ2lzdGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBTeW1ib2woKTtcblxuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNldChsaXN0ZW5lciwgY2FsbGJhY2spO1xuXG4gICAgICByZXR1cm4gbGlzdGVuZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVucmVnaXN0ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlcihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaXNwYXRjaGVyO1xufSkoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGlzcGF0Y2hlcjtcblxufSx7fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFN0b3JlID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0b3JlKTtcblxuICAgIHRoaXMuX2xpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdG9yZSwgW3tcbiAgICBrZXk6IFwiY2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZSgpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gbGlzdGVuZXIoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkNoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZShjYWxsYmFjaykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gU3ltYm9sKCk7XG5cbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zZXQobGlzdGVuZXIsIGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnJlZ2lzdGVyQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJDaGFuZ2UobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RvcmU7XG59KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTdG9yZTtcblxufSx7fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmluZUNvbnN0UHJvcGVydHkgPSBkZWZpbmVDb25zdFByb3BlcnR5O1xuZnVuY3Rpb24gZGVmaW5lQ29uc3RQcm9wZXJ0eShvYmosIHByb3AsIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxufSx7fV19LHt9LFsxNF0pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaRzl0TG1wekwyUnBjM1F2WkdwekwyUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaRzl0TG1wekwyUnBjM1F2WkdwekwyUnFjMlo1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJSdmJTNXFjeTlrYVhOMEwyUnFjeTltYVc1a0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyUnZiUzVxY3k5a2FYTjBMMlJxY3k5dFlXNXBjSFZzWVhScGIyNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaRzl0TG1wekwyUnBjM1F2WkdwekwzTjBlV3hsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5a2IyMHVhbk12WkdsemRDOXBibVJsZUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5a2IyMHVhbk12WkdsemRDOTFkR2xzTDJoMGJXd3Vhbk1pTENKd2RXSnNhV012YzNKakwyUnBjM1JoYm1ObEwyUnBjM1JoYm1ObExtRmpkR2x2Ym5NdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDJScGMzUmhibU5sTDJScGMzUmhibU5sTG1Oc1lYTnpMbXB6SWl3aWNIVmliR2xqTDNOeVl5OWthWE4wWVc1alpTOWthWE4wWVc1alpTNWthWE53WVhSamFHVnlMbXB6SWl3aWNIVmliR2xqTDNOeVl5OWthWE4wWVc1alpTOWthWE4wWVc1alpTNXFjeUlzSW5CMVlteHBZeTl6Y21NdlpHbHpkR0Z1WTJVdlpHbHpkR0Z1WTJVdWMzUnZjbVV1YW5NaUxDSndkV0pzYVdNdmMzSmpMMmhsWVdSbGNpOW9aV0ZrWlhJdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDJsdVpHVjRMbXB6SWl3aWNIVmliR2xqTDNOeVl5OXBibkIxZEhNdmFXNXdkWFJ6TFdOdmJuUmhhVzVsY2k1cWN5SXNJbkIxWW14cFl5OXpjbU12Y1hWaGJuUnBkSGt2Y1hWaGJuUnBkSGt1WVdOMGFXOXVjeTVxY3lJc0luQjFZbXhwWXk5emNtTXZjWFZoYm5ScGRIa3ZjWFZoYm5ScGRIa3VZMnhoYzNNdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNGMVlXNTBhWFI1TDNGMVlXNTBhWFI1TG1ScGMzQmhkR05vWlhJdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNGMVlXNTBhWFI1TDNGMVlXNTBhWFI1TG1weklpd2ljSFZpYkdsakwzTnlZeTl4ZFdGdWRHbDBlUzl4ZFdGdWRHbDBlUzV6ZEc5eVpTNXFjeUlzSW5CMVlteHBZeTl6Y21NdmNtVnpkV3gwY3k5bWRXVnNMV052Ym5OMWJYQjBhVzl1TDJaMVpXd3RZMjl1YzNWdGNIUnBiMjR1WTJ4aGMzTXVhbk1pTENKd2RXSnNhV012YzNKakwzSmxjM1ZzZEhNdlpuVmxiQzFqYjI1emRXMXdkR2x2Ymk5bWRXVnNMV052Ym5OMWJYQjBhVzl1TG1weklpd2ljSFZpYkdsakwzTnlZeTl5WlhOMWJIUnpMMloxWld3dFkyOXVjM1Z0Y0hScGIyNHZablZsYkMxamIyNXpkVzF3ZEdsdmJpNXpkRzl5WlM1cWN5SXNJbkIxWW14cFl5OXpjbU12Y21WemRXeDBjeTl5WlhOMWJIUnpMV052Ym5SaGFXNWxjaTVxY3lJc0luQjFZbXhwWXk5emNtTXZjbVZ6ZFd4MGN5OXlaWE4xYkhSekxtRmpkR2x2Ym5NdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNKbGMzVnNkSE12Y21WemRXeDBjeTVrYVhOd1lYUmphR1Z5TG1weklpd2ljSFZpYkdsakwzTnlZeTl5WlhOMWJIUnpMM0psYzNWc2RITXVjM1J2Y21VdWFuTWlMQ0p3ZFdKc2FXTXZjM0pqTDNSdmIyeHpMMlJwYzNCaGRHTm9aWEl1YW5NaUxDSndkV0pzYVdNdmMzSmpMM1J2YjJ4ekwzTjBiM0psTG1weklpd2ljSFZpYkdsakwzTnlZeTkwYjI5c2N5OTFkR2xzY3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNMVEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjJSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRlRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkRkRTFCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVNMVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN096czdPenRKUTI1RGNVSXNaVUZCWlR0WFFVRm1MR1ZCUVdVN01FSkJRV1lzWlVGQlpUczdPMlZCUVdZc1pVRkJaVHM3WjBOQlEyWXNTMEZCU3l4RlFVRkZPMEZCUTNoQ0xHMURRVUZ0UWl4UlFVRlJMRU5CUVVNN1FVRkRNVUlzV1VGQlNTeEZRVUZGTEdWQlFXVXNRMEZCUXl4aFFVRmhPMEZCUTI1RExGbEJRVWtzUlVGQlJTeExRVUZMTzA5QlExb3NRMEZCUXl4RFFVRkRPMHRCUTBvN096c3JRa0ZGYVVJc1NVRkJTU3hGUVVGRk8wRkJRM1JDTEcxRFFVRnRRaXhSUVVGUkxFTkJRVU03UVVGRE1VSXNXVUZCU1N4RlFVRkZMR1ZCUVdVc1EwRkJReXhaUVVGWk8wRkJRMnhETEZsQlFVa3NSVUZCUlN4SlFVRkpPMDlCUTFnc1EwRkJReXhEUVVGRE8wdEJRMG83T3p0VFFXSnJRaXhsUVVGbE96czdhMEpCUVdZc1pVRkJaVHM3UVVGblFuQkRMRmRCYkVKUkxHMUNRVUZ0UWl4RlFXdENVQ3hsUVVGbExFVkJRVVVzWlVGQlpTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRhRVVzVjBGdVFsRXNiVUpCUVcxQ0xFVkJiVUpRTEdWQlFXVXNSVUZCUlN4alFVRmpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdPenM3T3pzN096czdPenRKUTNCQ01VTXNVVUZCVVR0QlFVTXpRaXhYUVVSdFFpeFJRVUZSTEU5QlEwODdlVUpCUVhKQ0xFbEJRVWs3VVVGQlNpeEpRVUZKTERaQ1FVRkRMRWxCUVVrN01FSkJRVVVzUzBGQlN6dFJRVUZNTEV0QlFVc3NPRUpCUVVNc1EwRkJRenM3TUVKQlJGb3NVVUZCVVRzN1FVRkZla0lzVVVGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRha0lzVVVGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1IwRkRjRUk3TzJWQlNtdENMRkZCUVZFN096WkNRVTFzUWl4TFFVRkxMRVZCUVVVN1FVRkRaQ3hWUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVNNVFqczdPMU5CVW10Q0xGRkJRVkU3T3p0clFrRkJVaXhSUVVGUk96czdPenM3T3pzN096czdPenM3YTBKRFJXUXNNRUpCUVdkQ096czdPenM3T3pzN08xRkRjVUptTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096czdPenM3T3pzN096czdRVUZzUWpGQ0xFbEJRVWtzVTBGQlV5eEhRVUZITzBGQlEyUXNUVUZCU1N4eFEwRkxTRHREUVVOR0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4VlFVRlZMRWRCUVVjN1FVRkRaaXhaUVVGVkxFVkJRVVVzU1VGQlNUdEJRVU5vUWl4WFFVRlRMRVZCUVVVc1NVRkJTVHRCUVVObUxGRkJRVTBzUlVGQlJTeEpRVUZKTzBGQlExb3NUMEZCU3l4RlFVRkZMRWxCUVVrN1EwRkRXaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NZVUZCWVN4WlFVRkJMRU5CUVVNN08wRkJSVmdzVTBGQlV5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTNKRExGbEJRVlVzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEZWtRc1pVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlF6RkNMRzlDUVVGclFpeEZRVUZGTEVOQlFVTTdPMEZCUlhKQ0xHVkJRV0VzUjBGQlJ5dzJRa0ZCYlVJc1EwRkJRenRCUVVOd1F5eGxRVUZoTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZjN1FVRkRhRU1zWlVGQlZ5eERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE1VTXNRMEZCUXl4RFFVRkRPenRCUVVWSUxEUkNRVUZuUWl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGFrTXNaVUZCWVN4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTTdRMEZEY0VNN08wRkJSVVFzVTBGQlV5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNwQ0xGbEJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJRenREUVVOdVF6czdRVUZGUkN4VFFVRlRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGFrTXNXVUZCVlN4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRGJrTXNXVUZCVlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzBGQlEzSkZMRmxCUVZVc1EwRkJReXhMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0RFFVTndSVHM3UVVGRlJDeFRRVUZUTEd0Q1FVRnJRaXhIUVVGSE8wRkJRelZDTEZsQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZNc1MwRkJTeXhGUVVGRk8wRkJRekZFTERoQ1FVRm5RaXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRIUVVOcVJDeERRVUZETEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VNM1EyOUNMR0ZCUVdFN1dVRkJZaXhoUVVGaE96dEJRVU5vUXl4WFFVUnRRaXhoUVVGaExFZEJRMnhDT3pCQ1FVUkxMR0ZCUVdFN08zVkZRVUZpTEdGQlFXRTdPMEZCU1RsQ0xGVkJRVXNzVVVGQlVTeEhRVUZITERSQ1FVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVZxUXl4VlFVRkxMRkZCUVZFc1IwRkJSeXcyUWtGQmJVSXNVVUZCVVN4RFFVRkRMRlZCUVVNc1VVRkJVU3hGUVVGTE8wRkJRM2hFTEdOQlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrN1FVRkRjRUlzWVVGQlN5d3dRa0ZCWjBJc1lVRkJZVHRCUVVOb1F5eG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNaMEpCUVVrc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eEpRVUZKTzBGQlEzaENMR2xDUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY2tJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PenRCUVVGQkxFRkJSVklzWVVGQlN5d3dRa0ZCWjBJc1dVRkJXVHRCUVVNdlFpeG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNhVUpCUVVzc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eExRVUZMTzBGQlF6RkNMR2RDUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY0VJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PMEZCUVVFc1QwRkRVRHM3UVVGRlJDeFpRVUZMTEUxQlFVMHNSVUZCUlN4RFFVRkRPMHRCUTJZc1EwRkJReXhEUVVGRE96dEhRVU5LT3p0bFFUTkNhMElzWVVGQllUczdlVU5CTmtKWU8wRkJRMjVDTEcxRFFVRnRRaXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUXpsRE96czdVMEV2UW10Q0xHRkJRV0U3T3p0clFrRkJZaXhoUVVGaE96czdPenM3T3pzN08xRkRTV3hDTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096czdPMEZCVWpGQ0xFbEJRVWtzVTBGQlV5eEhRVUZITzBGQlEyUXNUVUZCU1N4eFEwRkpTRHREUVVOR0xFTkJRVU03TzBGQlJVc3NVMEZCVXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRM0pETEZsQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBOQlEyNURPenM3T3pzN096czdPenRKUTFaWExFMUJRVTA3T3pzN1NVRkRUaXhsUVVGbE96czdPMGxCUTJZc1owSkJRV2RDT3p0SlFVbG9RaXhQUVVGUE96czdPMGxCUmxBc1VVRkJVVHM3T3p0SlFVTlNMRkZCUVZFN096czdPenRCUVVkd1FpeEpRVUZKTEdkQ1FVRm5RaXhIUVVGSExHMUNRVUZKTEdWQlFXVXNRMEZCUXl4RFFVRkRPMEZCUXpWRExFbEJRVWtzWjBKQlFXZENMRWRCUVVjc2JVSkJRVWtzZVVKQlFYbENMRU5CUVVNc1EwRkJRenRCUVVOMFJDeEpRVUZKTEdsQ1FVRnBRaXhIUVVGSExHMUNRVUZKTERCQ1FVRXdRaXhEUVVGRExFTkJRVU03TzBGQlJYaEVMRWxCUVVrc1lVRkJZU3hIUVVGSExFVkJRVU1zU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUXl4RFFVRkRPMEZCUTJoRExFbEJRVWtzWVVGQllTeEhRVUZITEVWQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJReXhEUVVGRE96dEJRVVZxUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRMlFzVFVGQlNTeEZRVUZGTEVkQlFVYzdRVUZEVkN4VFFVRlBMRVZCUVVVc2FVSkJRVk1zUzBGQlN5eEZRVUZGTzBGQlEzWkNMR2xDUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEzUkNMRmRCUVU4c1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0QlFVTTNRaXhqUVVGUkxFVkJRVVVzWVVGQllUdEJRVU4yUWl4alFVRlJMRVZCUVVVc1lVRkJZVHRMUVVONFFpeERRVUZETEVOQlFVTTdSMEZEU2p0RFFVTkdMRU5CUVVNc1EwRkJRenM3UVVGRlNDeFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTJRc1RVRkJTU3hGUVVGRkxFbEJRVWs3UVVGRFZpeFRRVUZQTEVWQlFVVXNhVUpCUVZNc1MwRkJTeXhGUVVGRk8wRkJRM1pDTEdsQ1FVRmhMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRM1JDTEZkQlFVOHNRMEZCUXl4elFrRkJjMElzUTBGQlF6dEJRVU0zUWl4alFVRlJMRVZCUVVVc1lVRkJZVHRCUVVOMlFpeGpRVUZSTEVWQlFVVXNZVUZCWVR0TFFVTjRRaXhEUVVGRExFTkJRVU03UjBGRFNqdERRVU5HTEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03UVVGRGNFTXNaVUZCWlN4RFFVRkRMRlZCUVZVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMEZCUXpkRExHZENRVUZuUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPenRCUVVVdlF5eFBRVUZQTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU03UVVGRE4wSXNWVUZCVVN4RlFVRkZMR0ZCUVdFN1FVRkRka0lzVlVGQlVTeEZRVUZGTEdGQlFXRTdRMEZEZUVJc1EwRkJReXhEUVVGRE96czdPenM3T3pzN08xRkRla0poTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096dEpRWEJDWkN4UlFVRlJPenM3TzBsQlExSXNVVUZCVVRzN096czdPenM3UVVGRmNFSXNTVUZCU1N4VFFVRlRMRWRCUVVjN1FVRkRaQ3hOUVVGSkxIRkRRVTFJTzBOQlEwWXNRMEZCUXpzN1FVRkZSaXhKUVVGSkxGVkJRVlVzUjBGQlJ6dEJRVU5tTEZsQlFWVXNSVUZCUlN4SlFVRkpPMEZCUTJoQ0xHbENRVUZsTEVWQlFVVXNTVUZCU1R0QlFVTnlRaXhuUWtGQll5eEZRVUZGTEVsQlFVazdRVUZEY0VJc1owSkJRV01zUlVGQlJTeEpRVUZKTzBOQlEzSkNMRU5CUVVNN08wRkJSVXNzVTBGQlV5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTNKRExGbEJRVlVzUTBGQlF5eGxRVUZsTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlM5RUxHVkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1FVRkZNVUlzVlVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03UVVGREwwTXNWVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdRMEZEYUVRN08wRkJSVVFzVTBGQlV5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTJwRExGbEJRVlVzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUTI1RExGbEJRVlVzUTBGQlF5eGpRVUZqTEVkQlFVY3NWVUZCVlN4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRCUVVNdlJTeFpRVUZWTEVOQlFVTXNZMEZCWXl4SFFVRkhMRlZCUVZVc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03UTBGRGFFWTdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUXk5Q2IwSXNaVUZCWlR0WFFVRm1MR1ZCUVdVN01FSkJRV1lzWlVGQlpUczdPMlZCUVdZc1pVRkJaVHM3WjBOQlEyWXNTMEZCU3l4RlFVRkZPMEZCUTNoQ0xHMURRVUZ0UWl4UlFVRlJMRU5CUVVNN1FVRkRNVUlzV1VGQlNTeEZRVUZGTEdWQlFXVXNRMEZCUXl4aFFVRmhPMEZCUTI1RExGbEJRVWtzUlVGQlJTeExRVUZMTzA5QlExb3NRMEZCUXl4RFFVRkRPMHRCUTBvN096c3JRa0ZGYVVJc1NVRkJTU3hGUVVGRk8wRkJRM1JDTEcxRFFVRnRRaXhSUVVGUkxFTkJRVU03UVVGRE1VSXNXVUZCU1N4RlFVRkZMR1ZCUVdVc1EwRkJReXhaUVVGWk8wRkJRMnhETEZsQlFVa3NSVUZCUlN4SlFVRkpPMDlCUTFnc1EwRkJReXhEUVVGRE8wdEJRMG83T3p0VFFXSnJRaXhsUVVGbE96czdhMEpCUVdZc1pVRkJaVHM3UVVGblFuQkRMRmRCYkVKUkxHMUNRVUZ0UWl4RlFXdENVQ3hsUVVGbExFVkJRVVVzWlVGQlpTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRhRVVzVjBGdVFsRXNiVUpCUVcxQ0xFVkJiVUpRTEdWQlFXVXNSVUZCUlN4alFVRmpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdPenM3T3pzN096czdPenRKUTNCQ01VTXNVVUZCVVR0QlFVTXpRaXhYUVVSdFFpeFJRVUZSTEU5QlEwMDdlVUpCUVhCQ0xFbEJRVWs3VVVGQlNpeEpRVUZKTERaQ1FVRkRMRWRCUVVjN01FSkJRVVVzUzBGQlN6dFJRVUZNTEV0QlFVc3NPRUpCUVVNc1EwRkJRenM3TUVKQlJGZ3NVVUZCVVRzN1FVRkZla0lzVVVGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRha0lzVVVGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1IwRkRjRUk3TzJWQlNtdENMRkZCUVZFN096WkNRVTFzUWl4TFFVRkxMRVZCUVVVN1FVRkRaQ3hWUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVNNVFqczdPMU5CVW10Q0xGRkJRVkU3T3p0clFrRkJVaXhSUVVGUk96czdPenM3T3pzN096czdPenM3YTBKRFJXUXNNRUpCUVdkQ096czdPenM3T3pzN08xRkRjVUptTEZWQlFWVXNSMEZCVml4VlFVRlZPenM3T3pzN096czdPenM3T3pzN096czdRVUZzUWpGQ0xFbEJRVWtzVTBGQlV5eEhRVUZITzBGQlEyUXNUVUZCU1N4eFEwRkxTRHREUVVOR0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4VlFVRlZMRWRCUVVjN1FVRkRaaXhaUVVGVkxFVkJRVVVzU1VGQlNUdEJRVU5vUWl4WFFVRlRMRVZCUVVVc1NVRkJTVHRCUVVObUxGRkJRVTBzUlVGQlJTeEpRVUZKTzBGQlExb3NUMEZCU3l4RlFVRkZMRWxCUVVrN1EwRkRXaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NZVUZCWVN4WlFVRkJMRU5CUVVNN08wRkJSVmdzVTBGQlV5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTNKRExGbEJRVlVzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEZWtRc1pVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlF6RkNMRzlDUVVGclFpeEZRVUZGTEVOQlFVTTdPMEZCUlhKQ0xHVkJRV0VzUjBGQlJ5dzJRa0ZCYlVJc1EwRkJRenRCUVVOd1F5eGxRVUZoTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZjN1FVRkRhRU1zWlVGQlZ5eERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE1VTXNRMEZCUXl4RFFVRkRPenRCUVVWSUxEUkNRVUZuUWl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFFTXNaVUZCWVN4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTTdRMEZEY0VNN08wRkJSVVFzVTBGQlV5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNwQ0xGbEJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJRenREUVVOdVF6czdRVUZGUkN4VFFVRlRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGFrTXNXVUZCVlN4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRGJrTXNXVUZCVlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzBGQlEzSkZMRmxCUVZVc1EwRkJReXhMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0RFFVTndSVHM3UVVGRlJDeFRRVUZUTEd0Q1FVRnJRaXhIUVVGSE8wRkJRelZDTEZsQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZNc1MwRkJTeXhGUVVGRk8wRkJRekZFTERoQ1FVRm5RaXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRIUVVOcVJDeERRVUZETEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VNM1EyOUNMR0ZCUVdFN1dVRkJZaXhoUVVGaE96dEJRVU5vUXl4WFFVUnRRaXhoUVVGaExFZEJRMnhDT3pCQ1FVUkxMR0ZCUVdFN08zVkZRVUZpTEdGQlFXRTdPMEZCU1RsQ0xGVkJRVXNzVVVGQlVTeEhRVUZITERSQ1FVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVZxUXl4VlFVRkxMRkZCUVZFc1IwRkJSeXcyUWtGQmJVSXNVVUZCVVN4RFFVRkRMRlZCUVVNc1VVRkJVU3hGUVVGTE8wRkJRM2hFTEdOQlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrN1FVRkRjRUlzWVVGQlN5d3dRa0ZCWjBJc1lVRkJZVHRCUVVOb1F5eG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNaMEpCUVVrc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eEpRVUZKTzBGQlEzaENMR2xDUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY2tJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PenRCUVVGQkxFRkJSVklzWVVGQlN5d3dRa0ZCWjBJc1dVRkJXVHRCUVVNdlFpeG5Ra0ZCU3l4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNhVUpCUVVzc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eExRVUZMTzBGQlF6RkNMR2RDUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY0VJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PMEZCUVVFc1QwRkRVRHM3UVVGRlJDeFpRVUZMTEUxQlFVMHNSVUZCUlN4RFFVRkRPMHRCUTJZc1EwRkJReXhEUVVGRE96dEhRVU5LT3p0bFFUTkNhMElzWVVGQllUczdlVU5CTmtKWU8wRkJRMjVDTEcxRFFVRnRRaXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUXpsRE96czdVMEV2UW10Q0xHRkJRV0U3T3p0clFrRkJZaXhoUVVGaE96czdPenM3T3pzN096czdPMGxEVG1Jc1owSkJRV2RDTzFkQlFXaENMR2RDUVVGblFqc3dRa0ZCYUVJc1owSkJRV2RDT3pzN1pVRkJhRUlzWjBKQlFXZENPenNyUWtGRFN6c3JRa0ZCTTBJc1VVRkJVVHRWUVVGU0xGRkJRVkVzYVVOQlFVTXNSVUZCUlRzclFrRkJSU3hSUVVGUk8xVkJRVklzVVVGQlVTeHBRMEZCUXl4RlFVRkZPenRCUVVOdVF5eFZRVUZKTEUxQlFVMHNSMEZCUnp0QlFVTllMR0ZCUVVzc1JVRkJSU3hEUVVGRE8wRkJRMUlzV1VGQlNTeEZRVUZMTEZGQlFWRXNRMEZCUXl4SlFVRkpMRk5CUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzUVVGQlJUdFBRVU14UXl4RFFVRkRPenRCUVVWR0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU4wUXl4bFFVRlBMRTFCUVUwc1EwRkJRenRQUVVObU96dEJRVVZFTEZsQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRPenRCUVVVdlF5eFpRVUZOTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU40UkN4aFFVRlBMRTFCUVUwc1EwRkJRenRMUVVObU96czdVMEZtYTBJc1owSkJRV2RDT3pzN2EwSkJRV2hDTEdkQ1FVRm5RanM3T3pzN096czdPenRSUTNGQ2NrSXNWVUZCVlN4SFFVRldMRlZCUVZVN096czdPenM3T3pzN096czdPMEZCYWtJeFFpeEpRVUZKTEZOQlFWTXNSMEZCUnp0QlFVTmtMRTFCUVVrc2NVTkJTVWc3UTBGRFJpeERRVUZET3p0QlFVVkdMRWxCUVVrc1ZVRkJWU3hIUVVGSE8wRkJRMllzV1VGQlZTeEZRVUZGTEVsQlFVazdRVUZEYUVJc2EwSkJRV2RDTEVWQlFVVXNTVUZCU1R0QlFVTjBRaXhYUVVGVExFVkJRVVVzU1VGQlNUdEJRVU5tTEZsQlFWVXNSVUZCUlN4SlFVRkpPME5CUTJwQ0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4dlFrRkJiMElzV1VGQlFTeERRVUZET3p0QlFVVnNRaXhUUVVGVExGVkJRVlVzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEY2tNc1dVRkJWU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJoRkxHVkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1FVRkZNVUlzYzBKQlFXOUNMRWRCUVVjc2IwTkJRVEJDTEVOQlFVTTdPMEZCUld4RUxITkNRVUZ2UWl4RFFVRkRMRkZCUVZFc1EwRkJReXhaUVVGWE8wRkJRM1pETERCQ1FVRnpRaXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wZEJRM1JFTEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3h6UWtGQmIwSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenREUVVNdlFqczdRVUZGUkN4VFFVRlRMSE5DUVVGelFpeERRVUZETEU5QlFVOHNSVUZCUlR0QlFVTjJReXhaUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRemxETEZsQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTTdRMEZEYWtRN08wRkJSVVFzVTBGQlV5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTJwRExGbEJRVlVzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUTI1RExGbEJRVlVzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOd1JTeFpRVUZWTEVOQlFVTXNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03UTBGRE1VVTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlEzQkRiMElzYjBKQlFXOUNPMWxCUVhCQ0xHOUNRVUZ2UWpzN1FVRkRka01zVjBGRWJVSXNiMEpCUVc5Q0xFZEJRM3BDT3pCQ1FVUkxMRzlDUVVGdlFqczdkVVZCUVhCQ0xHOUNRVUZ2UWpzN1FVRkpja01zVlVGQlN5eFBRVUZQTEVkQlFVY3NLMEpCUVdsQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXpzN1FVRkZla01zWjBOQlFXbENMRkZCUVZFc1EwRkJReXhWUVVGRExGRkJRVkVzUlVGQlN6dEJRVU4wUXl4alFVRlBMRkZCUVZFc1EwRkJReXhKUVVGSk8wRkJRM0JDTEdGQlFVc3NlVUpCUVRKQ0xHTkJRV003UVVGRE5VTXNaMEpCUVVzc1QwRkJUeXhIUVVGSExDdENRVUZwUWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzQkVMR2RDUVVGTExFMUJRVTBzUTBGQlF5eE5RVUZMTEU5QlFVOHNRMEZCUXl4RFFVRkRPenRCUVVVeFFpeG5Ra0ZCVFR0QlFVRkJMRTlCUTFBN1MwRkRSaXhEUVVGRExFTkJRVU03TzBkQlEwbzdPMU5CWm10Q0xHOUNRVUZ2UWpzN08ydENRVUZ3UWl4dlFrRkJiMEk3T3pzN096czdPenM3VVVOaGVrSXNWVUZCVlN4SFFVRldMRlZCUVZVN096czdPenM3TzBsQmJrSmtMR05CUVdNN096czdPenM3T3pzN096dEJRVWN4UWl4SlFVRkpMRmxCUVZrc1dVRkJRU3hEUVVGRE96dEJRVVZxUWl4SlFVRkpMRk5CUVZNc1IwRkJSenRCUVVOa0xFMUJRVWtzY1VOQlNVZzdRMEZEUml4RFFVRkRPenRCUVVWR0xFbEJRVWtzVlVGQlZTeEhRVUZITzBGQlEyWXNXVUZCVlN4RlFVRkZMRWxCUVVrN1FVRkRhRUlzYlVKQlFXbENMRVZCUVVVc1NVRkJTVHRCUVVOMlFpeHBRa0ZCWlN4RlFVRkZMRWxCUVVrN1EwRkRkRUlzUTBGQlF6czdRVUZGU3l4VFFVRlRMRlZCUVZVc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGNrTXNXVUZCVlN4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEycEZMR1ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZGTVVJc1kwRkJXU3hIUVVGSExEUkNRVUZyUWl4RFFVRkRPenRCUVVWc1F5eG5Ra0ZCWXl4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdPMEZCUlhSRUxHTkJRVmtzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0RFFVTTVRanM3UVVGRlJDeFRRVUZUTEdGQlFXRXNRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRha01zV1VGQlZTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkRia01zV1VGQlZTeERRVUZETEdWQlFXVXNSMEZCUnl4VlFVRlZMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVOQlFVTTdRMEZETTBZN096czdPenM3T3pzN096czdPenM3T3pzN096dEpReTlDYjBJc1kwRkJZenRYUVVGa0xHTkJRV003TUVKQlFXUXNZMEZCWXpzN08yVkJRV1FzWTBGQll6czdhVU5CUTJJc1MwRkJTeXhGUVVGRk8wRkJRM3BDTEd0RFFVRnJRaXhSUVVGUkxFTkJRVU03UVVGRGVrSXNXVUZCU1N4RlFVRkZMR05CUVdNc1EwRkJReXhqUVVGak8wRkJRMjVETEZsQlFVa3NSVUZCUlN4TFFVRkxPMDlCUTFvc1EwRkJReXhEUVVGRE8wdEJRMG83T3p0VFFVNXJRaXhqUVVGak96czdhMEpCUVdRc1kwRkJZenM3UVVGVGJrTXNWMEZZVVN4dFFrRkJiVUlzUlVGWFVDeGpRVUZqTEVWQlFVVXNaMEpCUVdkQ0xFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXpzN096czdPenM3T3pzN096czdPMnRDUTFacVJDd3dRa0ZCWjBJN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUTFWV0xGbEJRVms3V1VGQldpeFpRVUZaT3p0QlFVTXZRaXhYUVVSdFFpeFpRVUZaTEVkQlEycENPekJDUVVSTExGbEJRVms3TzNWRlFVRmFMRmxCUVZrN08wRkJTVGRDTEZWQlFVc3NVVUZCVVN4SFFVRkhMRFJDUVVGaExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEycERMRlZCUVVzc1VVRkJVU3hIUVVGSExEUkNRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVWcVF5eHBRMEZCYlVJc1VVRkJVU3hEUVVGRExGVkJRVU1zVVVGQlVTeEZRVUZMTzBGQlEzaERMRmxCUVVzc2IwSkJRVzlDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN08wRkJSWEJETEZsQlFVc3NZVUZCWVN4RlFVRkZMRU5CUVVNN1MwRkRkRUlzUTBGQlF5eERRVUZET3p0QlFVVklMR2xEUVVGdFFpeFJRVUZSTEVOQlFVTXNWVUZCUXl4UlFVRlJMRVZCUVVzN1FVRkRlRU1zV1VGQlN5eHZRa0ZCYjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6czdRVUZGY0VNc1dVRkJTeXhoUVVGaExFVkJRVVVzUTBGQlF6dExRVU4wUWl4RFFVRkRMRU5CUVVNN08wZEJRMG83TzJWQmJFSnJRaXhaUVVGWk96dDVRMEZ2UWxZc1VVRkJVU3hGUVVGRk8wRkJRemRDTEdOQlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrN1FVRkRjRUlzWVVGQlN5d3dRa0ZCWjBJc1lVRkJZVHRCUVVOb1F5eGpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRFJDUVVGaE8wRkJRek5DTEdkQ1FVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTzBGQlEzaENMR2xDUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY2tJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PenRCUVVGQkxFRkJSVklzWVVGQlN5d3dRa0ZCWjBJc1dVRkJXVHRCUVVNdlFpeGpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRFJDUVVGaE8wRkJRek5DTEdsQ1FVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTzBGQlF6RkNMR2RDUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVazdWMEZEY0VJc1EwRkJReXhEUVVGRE96dEJRVVZJTEdkQ1FVRk5PMEZCUVVFc1QwRkRVRHM3UVVGRlJDeFZRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1MwRkRaanM3TzNsRFFVVnZRaXhSUVVGUkxFVkJRVVU3UVVGRE4wSXNZMEZCVHl4UlFVRlJMRU5CUVVNc1NVRkJTVHRCUVVOd1FpeGhRVUZMTERCQ1FVRm5RaXhoUVVGaE8wRkJRMmhETEdOQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNaMEpCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVazdRVUZEZUVJc2FVSkJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1R0WFFVTnlRaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NaMEpCUVUwN08wRkJRVUVzUVVGRlVpeGhRVUZMTERCQ1FVRm5RaXhaUVVGWk8wRkJReTlDTEdOQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc05FSkJRV0U3UVVGRE0wSXNhVUpCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVczdRVUZETVVJc1owSkJRVWtzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1R0WFFVTndRaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NaMEpCUVUwN1FVRkJRU3hQUVVOUU96dEJRVVZFTEZWQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRMUVVObU96czdiME5CUldVN1FVRkRaQ3dyUWtGQlpTeFpRVUZaTEVOQlFVTTdRVUZETVVJc1owSkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVR0QlFVTjJRaXhuUWtGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJPMDlCUTNoQ0xFTkJRVU1zUTBGQlF6dExRVU5LT3pzN1UwRnlSV3RDTEZsQlFWazdPenRyUWtGQldpeFpRVUZaT3pzN096czdPenM3T3pzN08wbERXbG9zVlVGQlZUdEJRVU0zUWl4WFFVUnRRaXhWUVVGVkxFZEJRMlk3TUVKQlJFc3NWVUZCVlRzN1FVRkZNMElzVVVGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8wZEJRemRDT3p0bFFVaHJRaXhWUVVGVk96czJRa0ZMY0VJc1IwRkJSeXhGUVVGRk8wRkJRMW9zVlVGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJReXhSUVVGUk8yVkJRVXNzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXp0UFFVRkJMRU5CUVVNc1EwRkJRenRMUVVOMFJEczdPelpDUVVWUkxGRkJRVkVzUlVGQlJUdEJRVU5xUWl4VlFVRkpMRkZCUVZFc1IwRkJSeXhOUVVGTkxFVkJRVVVzUTBGQlF6czdRVUZGZUVJc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE96dEJRVVY0UXl4aFFVRlBMRkZCUVZFc1EwRkJRenRMUVVOcVFqczdPeXRDUVVWVkxGRkJRVkVzUlVGQlJUdEJRVU51UWl4aFFVRlBMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUTNwRE96czdVMEZ1UW10Q0xGVkJRVlU3T3p0clFrRkJWaXhWUVVGVk96czdPenM3T3pzN096czdPMGxEUVZZc1MwRkJTenRCUVVONFFpeFhRVVJ0UWl4TFFVRkxMRWRCUTFZN01FSkJSRXNzUzBGQlN6czdRVUZGZEVJc1VVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGRCUXpkQ096dGxRVWhyUWl4TFFVRkxPenMyUWtGTFpqdEJRVU5RTEZWQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVU1zVVVGQlVUdGxRVUZMTEZGQlFWRXNSVUZCUlR0UFFVRkJMRU5CUVVNc1EwRkJRenRMUVVOdVJEczdPelpDUVVWUkxGRkJRVkVzUlVGQlJUdEJRVU5xUWl4VlFVRkpMRkZCUVZFc1IwRkJSeXhOUVVGTkxFVkJRVVVzUTBGQlF6czdRVUZGZUVJc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE96dEJRVVY0UXl4aFFVRlBMRkZCUVZFc1EwRkJRenRMUVVOcVFqczdPM0ZEUVVWblFpeFJRVUZSTEVWQlFVVTdRVUZEZWtJc1lVRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRMUVVONlF6czdPMU5CYmtKclFpeExRVUZMT3pzN2EwSkJRVXdzUzBGQlN6czdPenM3T3pzN1VVTkJWaXh0UWtGQmJVSXNSMEZCYmtJc2JVSkJRVzFDTzBGQlFUVkNMRk5CUVZNc2JVSkJRVzFDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVU3UVVGRGNFUXNVVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlF5OUNMR05CUVZVc1JVRkJSU3hKUVVGSk8wRkJRMmhDTEZsQlFWRXNSVUZCUlN4TFFVRkxPMEZCUTJZc1owSkJRVmtzUlVGQlJTeExRVUZMTzBGQlEyNUNMRk5CUVVzc1JVRkJSU3hMUVVGTE8wZEJRMklzUTBGQlF5eERRVUZETzBOQlEwb2lMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCbEtIUXNiaXh5S1h0bWRXNWpkR2x2YmlCektHOHNkU2w3YVdZb0lXNWJiMTBwZTJsbUtDRjBXMjlkS1h0MllYSWdZVDEwZVhCbGIyWWdjbVZ4ZFdseVpUMDlYQ0ptZFc1amRHbHZibHdpSmlaeVpYRjFhWEpsTzJsbUtDRjFKaVpoS1hKbGRIVnliaUJoS0c4c0lUQXBPMmxtS0drcGNtVjBkWEp1SUdrb2J5d2hNQ2s3ZG1GeUlHWTlibVYzSUVWeWNtOXlLRndpUTJGdWJtOTBJR1pwYm1RZ2JXOWtkV3hsSUNkY0lpdHZLMXdpSjF3aUtUdDBhSEp2ZHlCbUxtTnZaR1U5WENKTlQwUlZURVZmVGs5VVgwWlBWVTVFWENJc1puMTJZWElnYkQxdVcyOWRQWHRsZUhCdmNuUnpPbnQ5ZlR0MFcyOWRXekJkTG1OaGJHd29iQzVsZUhCdmNuUnpMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnVQWFJiYjExYk1WMWJaVjA3Y21WMGRYSnVJSE1vYmo5dU9tVXBmU3hzTEd3dVpYaHdiM0owY3l4bExIUXNiaXh5S1gxeVpYUjFjbTRnYmx0dlhTNWxlSEJ2Y25SemZYWmhjaUJwUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN1ptOXlLSFpoY2lCdlBUQTdienh5TG14bGJtZDBhRHR2S3lzcGN5aHlXMjlkS1R0eVpYUjFjbTRnYzMwcElpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVhHNTJZWElnWDJoMGJXd2dQU0J5WlhGMWFYSmxLQ2N1TGk5MWRHbHNMMmgwYld3dWFuTW5LVHRjYmx4dWRtRnlJRjlvZEcxc01pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyaDBiV3dwTzF4dVhHNTJZWElnWDIxaGJtbHdkV3hoZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR2YldGdWFYQjFiR0YwYVc5dUxtcHpKeWs3WEc1Y2JuWmhjaUJmWm1sdVpDQTlJSEpsY1hWcGNtVW9KeTR2Wm1sdVpDNXFjeWNwTzF4dVhHNTJZWElnWDNOMGVXeGxjeUE5SUhKbGNYVnBjbVVvSnk0dmMzUjViR1Z6TG1wekp5azdYRzVjYm5aaGNpQnpkSGxzWlhNZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WWGFXeGtZMkZ5WkNoZmMzUjViR1Z6S1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFYybHNaR05oY21Rb2IySnFLU0I3SUdsbUlDaHZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VwSUhzZ2NtVjBkWEp1SUc5aWFqc2dmU0JsYkhObElIc2dkbUZ5SUc1bGQwOWlhaUE5SUh0OU95QnBaaUFvYjJKcUlDRTlJRzUxYkd3cElIc2dabTl5SUNoMllYSWdhMlY1SUdsdUlHOWlhaWtnZXlCcFppQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzlpYWl3Z2EyVjVLU2tnYm1WM1QySnFXMnRsZVYwZ1BTQnZZbXBiYTJWNVhUc2dmU0I5SUc1bGQwOWlhaTVrWldaaGRXeDBJRDBnYjJKcU95QnlaWFIxY200Z2JtVjNUMkpxT3lCOUlIMWNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wm5WdVkzUnBiMjRnWkdwektIUmxiWEJzWVhSbEtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2RHVnRjR3hoZEdVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZ3dMQ0JmWm1sdVpDNW1hVzVrS1NoMFpXMXdiR0YwWlNrN1hHNGdJSDBnWld4elpTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDBaVzF3YkdGMFpTa3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQmZiR1Z1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUN3Z2MzVmljM1J6SUQwZ1FYSnlZWGtvWDJ4bGJpQStJREVnUHlCZmJHVnVJQzBnTVNBNklEQXBMQ0JmYTJWNUlEMGdNVHNnWDJ0bGVTQThJRjlzWlc0N0lGOXJaWGtyS3lrZ2UxeHVJQ0FnSUNBZ2MzVmljM1J6VzE5clpYa2dMU0F4WFNBOUlHRnlaM1Z0Wlc1MGMxdGZhMlY1WFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdYMmgwYld3eUxtUmxabUYxYkhRdVlYQndiSGtvZFc1a1pXWnBibVZrTENCYmRHVnRjR3hoZEdWZExtTnZibU5oZENoemRXSnpkSE1wS1R0Y2JpQWdmVnh1ZlZ4dVhHNWthbk11WTNKbFlYUmxJRDBnWDIxaGJtbHdkV3hoZEdsdmJpNWpjbVZoZEdVN1hHNWthbk11WTNOeklEMGdjM1I1YkdWekxtTnpjenRjYm1ScWN5NWhaR1JEYkdGemN5QTlJSE4wZVd4bGN5NWhaR1JEYkdGemN6dGNibVJxY3k1eVpXMXZkbVZEYkdGemN5QTlJSE4wZVd4bGN5NXlaVzF2ZG1WRGJHRnpjenRjYm1ScWN5NTBiMmRuYkdWRGJHRnpjeUE5SUhOMGVXeGxjeTUwYjJkbmJHVkRiR0Z6Y3p0Y2JtUnFjeTVqYjI1MFlXbHVjME5zWVhOeklEMGdjM1I1YkdWekxtTnZiblJoYVc1elEyeGhjM003WEc1a2FuTXVabWx1WkNBOUlGOW1hVzVrTG1acGJtUTdYRzVrYW5NdVptbHVaRUZzYkNBOUlGOW1hVzVrTG1acGJtUkJiR3c3WEc1a2FuTXVjbVZ0YjNabElEMGdYMjFoYm1sd2RXeGhkR2x2Ymk1eVpXMXZkbVU3WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHUnFjenNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JrYW5ObWVUdGNibHh1ZG1GeUlGOWtJRDBnY21WeGRXbHlaU2duTGk5a0xtcHpKeWs3WEc1Y2JuWmhjaUJmWkRJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5a0tUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wm5WdVkzUnBiMjRnWkdwelpua29ibTlrWlNrZ2UxeHVJQ0JwWmlBb0lXNXZaR1VwSUhKbGRIVnliaUJ1ZFd4c08xeHVYRzRnSUc1dlpHVXVabWx1WkNBOUlHWjFibU4wYVc5dUlDaHpkSEpwYm1jcElIdGNiaUFnSUNCeVpYUjFjbTRnWDJReUxtUmxabUYxYkhRdVptbHVaQ2h6ZEhKcGJtY3NJRzV2WkdVcE8xeHVJQ0I5TzF4dUlDQnViMlJsTG1acGJtUkJiR3dnUFNCbWRXNWpkR2x2YmlBb2MzUnlhVzVuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTG1acGJtUkJiR3dvYzNSeWFXNW5MQ0J1YjJSbEtUdGNiaUFnZlR0Y2JpQWdibTlrWlM1amNtVmhkR1VnUFNCbWRXNWpkR2x2YmlBb2MzUnlhVzVuS1NCN1hHNGdJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQmZaREl1WkdWbVlYVnNkQzVqY21WaGRHVW9jM1J5YVc1bktUdGNibHh1SUNBZ0lHNXZaR1V1WVhCd1pXNWtRMmhwYkdRb1pXeGxiV1Z1ZENrN1hHNWNiaUFnSUNCeVpYUjFjbTRnWld4bGJXVnVkRHRjYmlBZ2ZUdGNibHh1SUNCdWIyUmxMbU56Y3lBOUlHWjFibU4wYVc5dUlDaGpjM05UZEhsc1pYTXBJSHRjYmlBZ0lDQnlaWFIxY200Z1gyUXlMbVJsWm1GMWJIUXVZM056S0c1dlpHVXNJR056YzFOMGVXeGxjeWs3WEc0Z0lIMDdYRzRnSUc1dlpHVXVZV1JrUTJ4aGMzTWdQU0JtZFc1amRHbHZiaUFvWTJ4aGMzTk1hWE4wS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTG1Ga1pFTnNZWE56S0c1dlpHVXNJR05zWVhOelRHbHpkQ2s3WEc0Z0lIMDdYRzRnSUc1dlpHVXVjbVZ0YjNabFEyeGhjM01nUFNCbWRXNWpkR2x2YmlBb1kyeGhjM05VYjFKbGJXOTJaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmZaREl1WkdWbVlYVnNkQzV5WlcxdmRtVkRiR0Z6Y3lodWIyUmxMQ0JqYkdGemMxUnZVbVZ0YjNabEtUdGNiaUFnZlR0Y2JpQWdibTlrWlM1MGIyZG5iR1ZEYkdGemN5QTlJR1oxYm1OMGFXOXVJQ2hqYkdGemMwNWhiV1VzSUdadmNtTmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOWtNaTVrWldaaGRXeDBMblJ2WjJkc1pVTnNZWE56S0c1dlpHVXNJR05zWVhOelRtRnRaU3dnWm05eVkyVXBPMXh1SUNCOU8xeHVJQ0J1YjJSbExtTnZiblJoYVc1elEyeGhjM01nUFNCbWRXNWpkR2x2YmlBb1kyeGhjM05PWVcxbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUY5a01pNWtaV1poZFd4MExtTnZiblJoYVc1elEyeGhjM01vYm05a1pTd2dZMnhoYzNOT1lXMWxLVHRjYmlBZ2ZUdGNiaUFnYm05a1pTNXlaVzF2ZG1VZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUc1dlpHVlViMUpsYlc5MlpTQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQRDBnTUNCOGZDQmhjbWQxYldWdWRITmJNRjBnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JRzV2WkdVZ09pQmhjbWQxYldWdWRITmJNRjA3WEc1Y2JpQWdJQ0IyWVhJZ2IyeGtUbTlrWlNBOUlGOWtNaTVrWldaaGRXeDBMbkpsYlc5MlpTaHViMlJsVkc5U1pXMXZkbVVwTzF4dUlDQWdJRzV2WkdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnY21WMGRYSnVJRzlzWkU1dlpHVTdYRzRnSUgwN1hHNWNiaUFnY21WMGRYSnVJRzV2WkdVN1hHNTlJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NW1hVzVrSUQwZ1ptbHVaRHRjYm1WNGNHOXlkSE11Wm1sdVpFRnNiQ0E5SUdacGJtUkJiR3c3WEc1Y2JuWmhjaUJmWkdwelpua2dQU0J5WlhGMWFYSmxLQ2N1TDJScWMyWjVKeWs3WEc1Y2JuWmhjaUJmWkdwelpua3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZaR3B6Wm5rcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVtZFc1amRHbHZiaUJtYVc1a0tITjBjbWx1WnlrZ2UxeHVJQ0IyWVhJZ2NtOXZkRVZzWlcxbGJuUWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHc5SURFZ2ZId2dZWEpuZFcxbGJuUnpXekZkSUQwOVBTQjFibVJsWm1sdVpXUWdQeUJrYjJOMWJXVnVkQ0E2SUdGeVozVnRaVzUwYzFzeFhUdGNibHh1SUNCeVpYUjFjbTRnS0RBc0lGOWthbk5tZVRJdVpHVm1ZWFZzZENrb2NtOXZkRVZzWlcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loemRISnBibWNwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWm1sdVpFRnNiQ2h6ZEhKcGJtY3BJSHRjYmlBZ2RtRnlJSEp2YjNSRmJHVnRaVzUwSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBOFBTQXhJSHg4SUdGeVozVnRaVzUwYzFzeFhTQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z1pHOWpkVzFsYm5RZ09pQmhjbWQxYldWdWRITmJNVjA3WEc1Y2JpQWdjbVYwZFhKdUlISnZiM1JGYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29jM1J5YVc1bktUdGNibjBpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVsZUhCdmNuUnpMbU55WldGMFpTQTlJR055WldGMFpUdGNibVY0Y0c5eWRITXVjbVZ0YjNabElEMGdjbVZ0YjNabE8xeHVYRzUyWVhJZ1gyUnFjMlo1SUQwZ2NtVnhkV2x5WlNnbkxpOWthbk5tZVM1cWN5Y3BPMXh1WEc1MllYSWdYMlJxYzJaNU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyUnFjMlo1S1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVablZ1WTNScGIyNGdZM0psWVhSbEtITjBjbWx1WnlrZ2UxeHVJQ0IyWVhJZ1puSmhaMjFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRWIyTjFiV1Z1ZEVaeVlXZHRaVzUwS0NrN1hHNGdJSFpoY2lCbGJHVnRaVzUwSUQwZ1puSmhaMjFsYm5RdVlYQndaVzVrUTJocGJHUW9aRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWtwTzF4dVhHNGdJR1ZzWlcxbGJuUXVhVzV1WlhKSVZFMU1JRDBnYzNSeWFXNW5MblJ5YVcwb0tUdGNibHh1SUNCcFppQW9aV3hsYldWdWRDNWphR2xzWkU1dlpHVnpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUdWc1pXMWxiblFnUFNCbGJHVnRaVzUwTG14aGMzUkRhR2xzWkR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlBb01Dd2dYMlJxYzJaNU1pNWtaV1poZFd4MEtTaGxiR1Z0Wlc1MExtTnNiMjVsVG05a1pTaDBjblZsS1NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJXOTJaU2h1YjJSbEtTQjdYRzRnSUdsbUlDaHViMlJsTG5CaGNtVnVkRTV2WkdVcElIdGNiaUFnSUNCeVpYUjFjbTRnYm05a1pTNXdZWEpsYm5ST2IyUmxMbkpsYlc5MlpVTm9hV3hrS0c1dlpHVXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzUxYkd3N1hHNTlJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWpjM01nUFNCamMzTTdYRzVsZUhCdmNuUnpMbUZrWkVOc1lYTnpJRDBnWVdSa1EyeGhjM003WEc1bGVIQnZjblJ6TG1OdmJuUmhhVzV6UTJ4aGMzTWdQU0JqYjI1MFlXbHVjME5zWVhOek8xeHVaWGh3YjNKMGN5NXlaVzF2ZG1WRGJHRnpjeUE5SUhKbGJXOTJaVU5zWVhOek8xeHVaWGh3YjNKMGN5NTBiMmRuYkdWRGJHRnpjeUE5SUhSdloyZHNaVU5zWVhOek8xeHVYRzUyWVhJZ1gyUnFjMlo1SUQwZ2NtVnhkV2x5WlNnbkxpOWthbk5tZVNjcE8xeHVYRzUyWVhJZ1gyUnFjMlo1TWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJScWMyWjVLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dUx5OGdSV1JuWlNBdklFbEZYRzUyWVhJZ1RWTWdQU0FuYlhNbk8xeHVMeThnUTJoeWIyMWxJQzhnVTJGbVlYSnBYRzUyWVhJZ1YwVkNTMGxVSUQwZ0ozZGxZbXRwZENjN1hHNHZMeUJHYVhKbFptOTRYRzUyWVhJZ1RVOWFJRDBnSjIxdmVpYzdYRzR2THlCUGNHVnlZVnh1ZG1GeUlFOGdQU0FuYnljN1hHNTJZWElnV0ZZZ1BTQW5lSFluTzF4dUx5OGdTMFJGWEc1MllYSWdTMGhVVFV3Z1BTQW5hMmgwYld3bk8xeHVYRzUyWVhJZ1VGSkZSa2xZU1VWVElEMGdXMDFUTENCWFJVSkxTVlFzSUUxUFdpd2dUeXdnV0ZZc0lFdElWRTFNWFR0Y2JseHVkbUZ5SUVOVFUxOVFVa1ZHU1ZoRlJDQTlJSHRjYmlBZ1pteHZZWFE2SUNkamMzTkdiRzloZENkY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUdOemN5aHViMlJsTENCamMzTlRkSGxzWlhNcElIdGNiaUFnYVdZZ0tDRnViMlJsSUh4OElHNXZaR1V1Ym05a1pWUjVjR1VnUFQwOUlEZ2dmSHdnYm05a1pTNXViMlJsVkhsd1pTQTlQVDBnTXlCOGZDQWhibTlrWlM1emRIbHNaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdOemMxTjBlV3hsY3lrZ2UxeHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaGpjM05UZEhsc1pYTXNJR3RsZVNrcElIdGNiaUFnSUNBZ0lIWmhjaUJyWlhsUWNtVm1hWGhsWkNBOUlHZGxkRk4wZVd4bFYybDBhRkJ5WldacGVFdGxlU2g3WEc0Z0lDQWdJQ0FnSUhOMGVXeGxUR2x6ZERvZ2JtOWtaUzV6ZEhsc1pTeGNiaUFnSUNBZ0lDQWdjM1I1YkdWVWIwTm9aV05yT2lCclpYbGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2EyVjVVSEpsWm1sNFpXUXBJSHRjYmlBZ0lDQWdJQ0FnYm05a1pTNXpkSGxzWlZ0clpYbFFjbVZtYVhobFpGMGdQU0JqYzNOVGRIbHNaWE5iYTJWNVhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z0tEQXNJRjlrYW5ObWVUSXVaR1ZtWVhWc2RDa29ibTlrWlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdGa1pFTnNZWE56S0c1dlpHVXNJR05zWVhOelRHbHpkQ2tnZTF4dUlDQjJZWElnWTNWeWNtVnVkRU5zWVhOelRHbHpkQ0E5SUc1dlpHVXVaMlYwUVhSMGNtbGlkWFJsS0NkamJHRnpjeWNwSUh4OElDY25PMXh1WEc0Z0lHTnNZWE56VEdsemRDQTlJSEJoY25ObFFYSnlZWGtvWTJ4aGMzTk1hWE4wS1NCOGZDQmJYVHRjYmx4dUlDQnBaaUFvWTJ4aGMzTk1hWE4wSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diR1Z1WjNSb0lEMGdZMnhoYzNOTWFYTjBMbXhsYm1kMGFEc2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnBaaUFvSVdOc1lYTnpUR2x6ZEZ0cFhTNTBjbWx0S0NrcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRk41Ym5SaGVFVnljbTl5S0Nka2FuTXVZV1JrUTJ4aGMzTW9LVG9nUlcxd2RIa2djM1J5YVc1bmN5QmhjbVVnYm05MElIWmhiR2xrSUdOc1lYTnpJRzVoYldVbktUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0NGamIyNTBZV2x1YzBOc1lYTnpTVzUwYjB4cGMzUW9ZM1Z5Y21WdWRFTnNZWE56VEdsemRDd2dZMnhoYzNOTWFYTjBXMmxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFEyeGhjM05NYVhOMElDczlJQ2NnSnlBcklHTnNZWE56VEdsemRGdHBYUzUwY21sdEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5d2dZM1Z5Y21WdWRFTnNZWE56VEdsemRDNTBjbWx0S0NrcE8xeHVYRzRnSUhKbGRIVnliaUFvTUN3Z1gyUnFjMlo1TWk1a1pXWmhkV3gwS1NodWIyUmxLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZMjl1ZEdGcGJuTkRiR0Z6Y3lodWIyUmxMQ0JqYkdGemMwNWhiV1VwSUh0Y2JpQWdhV1lnS0NGdWIyUmxLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFVhR1VnWld4bGJXVnVkQ0J0ZFhOMElHSmxJRzV2ZENCbGJYQjBlUzRuS1R0Y2JpQWdmVnh1WEc0Z0lHRnpjMlZ5ZEVOc1lYTnpUbUZ0WlNoamJHRnpjMDVoYldVcE8xeHVYRzRnSUhKbGRIVnliaUJqYjI1MFlXbHVjME5zWVhOelNXNTBiMHhwYzNRb2JtOWtaUzVuWlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56Snlrc0lHTnNZWE56VG1GdFpTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxiVzkyWlVOc1lYTnpLRzV2WkdVc0lHTnNZWE56Vkc5U1pXMXZkbVVwSUh0Y2JpQWdkbUZ5SUdOMWNuSmxiblJEYkdGemMweHBjM1FnUFNCblpYUkRkWEp5Wlc1MFEyeGhjM05NYVhOMEtHNXZaR1VwTzF4dVhHNGdJR05zWVhOelZHOVNaVzF2ZG1VZ1BTQndZWEp6WlVGeWNtRjVLR05zWVhOelZHOVNaVzF2ZG1VcElIeDhJRnRkTzF4dVhHNGdJR2xtSUNnaFkzVnljbVZ1ZEVOc1lYTnpUR2x6ZEM1c1pXNW5kR2dnZkh3Z0lXTnNZWE56Vkc5U1pXMXZkbVV1YkdWdVozUm9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZ3dMQ0JmWkdwelpua3lMbVJsWm1GMWJIUXBLRzV2WkdVcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0dOc1lYTnpWRzlTWlcxdmRtVWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTa2dlMXh1SUNBZ0lHTnNZWE56Vkc5U1pXMXZkbVZKYm5SbGNtRmpkR2x2YmpvZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd4bGJtZDBhQ0E5SUdOc1lYTnpWRzlTWlcxdmRtVXViR1Z1WjNSb095QnBJRHdnYkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJqYkdGemMwNWhiV1VnUFNCamJHRnpjMVJ2VW1WdGIzWmxXMmxkTzF4dUlDQWdJQ0FnWVhOelpYSjBRMnhoYzNOT1lXMWxLR05zWVhOelRtRnRaU2s3WEc1Y2JpQWdJQ0FnSUdOMWNuSmxiblJEYkdGemMweHBjM1JKYm5SbGNtRmpkR2x2YmpvZ1ptOXlJQ2gyWVhJZ2VTQTlJREFzSUY5c1pXNW5kR2dnUFNCamRYSnlaVzUwUTJ4aGMzTk1hWE4wTG14bGJtZDBhRHNnZVNBOElGOXNaVzVuZEdnN0lIa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMnhoYzNOT1lXMWxJRDA5UFNCamRYSnlaVzUwUTJ4aGMzTk1hWE4wVzNsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRU5zWVhOelRHbHpkQzV6Y0d4cFkyVW9lU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVWdZMnhoYzNOVWIxSmxiVzkyWlVsdWRHVnlZV04wYVc5dU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5d2dZM1Z5Y21WdWRFTnNZWE56VEdsemRDNXFiMmx1S0NjZ0p5a3BPMXh1WEc0Z0lISmxkSFZ5YmlBb01Dd2dYMlJxYzJaNU1pNWtaV1poZFd4MEtTaHViMlJsS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZEc5bloyeGxRMnhoYzNNb2JtOWtaU3dnWTJ4aGMzTk9ZVzFsTENCbWIzSmpaU2tnZTF4dUlDQnBaaUFvSVc1dlpHVXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JsYkdWdFpXNTBJRzExYzNRZ1ltVWdibTkwSUdWdGNIUjVMaWNwTzF4dUlDQjlYRzVjYmlBZ1lYTnpaWEowUTJ4aGMzTk9ZVzFsS0dOc1lYTnpUbUZ0WlNrN1hHNWNiaUFnZG1GeUlHTjFjbkpsYm5SRGJHRnpjMHhwYzNRZ1BTQm5aWFJEZFhKeVpXNTBRMnhoYzNOTWFYTjBLRzV2WkdVcE8xeHVYRzRnSUdsbUlDaGpiMjUwWVdsdWMwTnNZWE56U1c1MGIweHBjM1FvWTNWeWNtVnVkRU5zWVhOelRHbHpkQ3dnWTJ4aGMzTk9ZVzFsS1NrZ2UxeHVJQ0FnSUdsbUlDZ2habTl5WTJVcElIdGNiaUFnSUNBZ0lISmxiVzkyWlVOc1lYTnpLRzV2WkdVc0lHTnNZWE56VG1GdFpTazdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHbG1JQ2htYjNKalpTQWhQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJR0ZrWkVOc1lYTnpLRzV2WkdVc0lHTnNZWE56VG1GdFpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlDZ3dMQ0JmWkdwelpua3lMbVJsWm1GMWJIUXBLRzV2WkdVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkRkWEp5Wlc1MFEyeGhjM05NYVhOMEtHNXZaR1VwSUh0Y2JpQWdjbVYwZFhKdUlIQmhjbk5sUVhKeVlYa29ibTlrWlM1blpYUkJkSFJ5YVdKMWRHVW9KMk5zWVhOekp5a3BJSHg4SUZ0ZE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaGMzTmxjblJEYkdGemMwNWhiV1VvWTJ4aGMzTk9ZVzFsS1NCN1hHNGdJR2xtSUNnaFkyeGhjM05PWVcxbEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdZMnhoYzNOT1lXMWxJSEJ5YjNacFpHVmtJQ2hjWENjbklDc2dZMnhoYzNOT1lXMWxJQ3NnSjF4Y0p5a2diWFZ6ZENCaVpTQnViM1FnWlcxd2RIa3VKeWs3WEc0Z0lIMWNibHh1SUNCcFppQW9ZMjl1ZEdGcGJuTlhhR2wwWlhOd1lXTmxjeWhqYkdGemMwNWhiV1VwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RVYUdVZ1kyeGhjM05PWVcxbElIQnliM1pwWkdWa0lDaGNYQ2NuSUNzZ1kyeGhjM05PWVcxbElDc2dKMXhjSnlrZ1kyOXVkR0ZwYm5NZ1NGUk5UQ0J6Y0dGalpTQmphR0Z5WVdOMFpYSnpMQ0IzYUdsamFDQmhjbVVnYm05MElIWmhiR2xrTGljcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR052Ym5SaGFXNXpWMmhwZEdWemNHRmpaWE1vYzNSeWFXNW5LU0I3WEc0Z0lISmxkSFZ5YmlCemRISnBibWN1YldGMFkyZ29MMXhjY3k4cE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamIyNTBZV2x1YzBOc1lYTnpTVzUwYjB4cGMzUW9ZMnhoYzNOTWFYTjBMQ0JqYkdGemMxUnZRMmhsWTJzcElIdGNiaUFnWTJ4aGMzTk1hWE4wSUQwZ2NHRnljMlZCY25KaGVTaGpiR0Z6YzB4cGMzUXBJSHg4SUZ0ZE8xeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzWlc1bmRHZ2dQU0JqYkdGemMweHBjM1F1YkdWdVozUm9PeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvWTJ4aGMzTk1hWE4wVzJsZExuUnlhVzBvS1NBOVBUMGdZMnhoYzNOVWIwTm9aV05yTG5SeWFXMG9LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndZWEp6WlVGeWNtRjVLR05zWVhOelRHbHpkQ2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR05zWVhOelRHbHpkQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCamJHRnpjMHhwYzNRZ1BTQmpiR0Z6YzB4cGMzUXVjM0JzYVhRb0p5QW5LVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJqYkdGemMweHBjM1E3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEZOMGVXeGxWMmwwYUZCeVpXWnBlRXRsZVNoZmNtVm1LU0I3WEc0Z0lIWmhjaUJ6ZEhsc1pVeHBjM1FnUFNCZmNtVm1Mbk4wZVd4bFRHbHpkRHRjYmlBZ2RtRnlJSE4wZVd4bFZHOURhR1ZqYXlBOUlGOXlaV1l1YzNSNWJHVlViME5vWldOck8xeHVYRzRnSUdsbUlDaHpkSGxzWlZSdlEyaGxZMnNnYVc0Z2MzUjViR1ZNYVhOMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMGVXeGxWRzlEYUdWamF6dGNiaUFnZlZ4dVhHNGdJR2xtSUNoemRIbHNaVlJ2UTJobFkyc2dhVzRnUTFOVFgxQlNSVVpKV0VWRUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUVOVFUxOVFVa1ZHU1ZoRlJGdHpkSGxzWlZSdlEyaGxZMnRkTzF4dUlDQjlYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd4bGJtZDBhQ0E5SUZCU1JVWkpXRWxGVXk1c1pXNW5kR2c3SUdrZ1BDQnNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCemRIbHNaVmRwZEdoUWNtVm1hWGdnUFNBbkp5QXJJRkJTUlVaSldFbEZVMXRwWFNBcklITjBlV3hsVkc5RGFHVmphMXN3WFM1MGIxVndjR1Z5UTJGelpTZ3BJQ3NnYzNSNWJHVlViME5vWldOckxuTjFZbk4wY21sdVp5Z3hLVHRjYmx4dUlDQWdJR2xtSUNoemRIbHNaVmRwZEdoUWNtVm1hWGdnYVc0Z2MzUjViR1ZNYVhOMEtTQjdYRzRnSUNBZ0lDQkRVMU5mVUZKRlJrbFlSVVJiYzNSNWJHVlViME5vWldOclhTQTlJSE4wZVd4bFYybDBhRkJ5WldacGVEdGNiaUFnSUNBZ0lISmxkSFZ5YmlCRFUxTmZVRkpGUmtsWVJVUmJjM1I1YkdWVWIwTm9aV05yWFR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdYMlFnUFNCeVpYRjFhWEpsS0NjdUwyUnFjeTlrTG1wekp5azdYRzVjYm5aaGNpQmZaRElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjlrS1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVhV1lnS0hSNWNHVnZaaUJsZUhCdmNuUnpJRDA5UFNBbmIySnFaV04wSnlBbUppQjBlWEJsYjJZZ2JXOWtkV3hsSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWtNaTVrWldaaGRXeDBPMXh1ZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwSUh0Y2JpQWdaR1ZtYVc1bEtGdGRMQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjlrTWk1a1pXWmhkV3gwTzF4dUlDQjlLVHRjYm4xY2JseHVkbUZ5SUY5bmJHOWlZV3dnUFNCMWJtUmxabWx1WldRN1hHNWNibWxtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNCZloyeHZZbUZzSUQwZ2QybHVaRzkzTzF4dWZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1oyeHZZbUZzSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQmZaMnh2WW1Gc0lEMGdaMnh2WW1Gc08xeHVmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdjMlZzWmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdYMmRzYjJKaGJDQTlJSE5sYkdZN1hHNTlJR1ZzYzJVZ2UxeHVJQ0JmWjJ4dlltRnNJRDBnZFc1a1pXWnBibVZrTzF4dWZWeHVYRzVmWjJ4dlltRnNMbVJxY3lBOUlGOWtNaTVrWldaaGRXeDBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR2gwYld4VGRISnBibWRHY205dFZHVnRjR3hoZEdWVGRISnBibWM3WEc1bWRXNWpkR2x2YmlCb2RHMXNVM1J5YVc1blJuSnZiVlJsYlhCc1lYUmxVM1J5YVc1bktIUmxiWEJzWVhSbFQySnFaV04wS1NCN1hHNGdJSFpoY2lCeVlYY2dQU0IwWlcxd2JHRjBaVTlpYW1WamRDNXlZWGM3WEc1Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0JtYjNJZ0tIWmhjaUJmYkdWdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDd2djM1ZpYzNSeklEMGdRWEp5WVhrb1gyeGxiaUErSURFZ1B5QmZiR1Z1SUMwZ01TQTZJREFwTENCZmEyVjVJRDBnTVRzZ1gydGxlU0E4SUY5c1pXNDdJRjlyWlhrckt5a2dlMXh1SUNBZ0lITjFZbk4wYzF0ZmEyVjVJQzBnTVYwZ1BTQmhjbWQxYldWdWRITmJYMnRsZVYwN1hHNGdJSDFjYmx4dUlDQnlaWE4xYkhRZ1BTQnpkV0p6ZEhNdWNtVmtkV05sS0daMWJtTjBhVzl1SUNoeVpYTjFiSFFzSUhOMVluTjBMQ0JwS1NCN1hHNGdJQ0FnZG1GeUlHeHBkQ0E5SUhKaGQxdHBYVHRjYmx4dUlDQWdJSE4xWW5OMElEMGdRWEp5WVhrdWFYTkJjbkpoZVNoemRXSnpkQ2tnUHlCemRXSnpkQzVxYjJsdUtDY25LU0E2SUhOMVluTjBJQ3NnSnljN1hHNWNiaUFnSUNCcFppQW9iR2wwVzJ4cGRDNXNaVzVuZEdnZ0xTQXhYU0E5UFQwZ0p5UW5LU0I3WEc0Z0lDQWdJQ0J6ZFdKemRDQTlJR2gwYld4RmMyTmhjR1VvYzNWaWMzUXBPMXh1SUNBZ0lDQWdiR2wwSUQwZ2JHbDBMbk5zYVdObEtEQXNJQzB4S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhOMWJIUWdLejBnYkdsME8xeHVJQ0FnSUhKbGMzVnNkQ0FyUFNCemRXSnpkRHRjYmx4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDBzSUNjbktUdGNibHh1SUNCeVpYTjFiSFFnS3owZ2NtRjNXM0poZHk1c1pXNW5kR2dnTFNBeFhUdGNibHh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9kRzFzUlhOallYQmxLSE4wY2lrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5TG5KbGNHeGhZMlVvTHlZdlp5d2dKeVpoYlhBN0p5a3VjbVZ3YkdGalpTZ3ZQaTluTENBbkptZDBPeWNwTG5KbGNHeGhZMlVvTHp3dlp5d2dKeVpzZERzbktTNXlaWEJzWVdObEtDOWNJaTluTENBbkpuRjFiM1JsT3ljcExuSmxjR3hoWTJVb0x5Y3ZaeXdnSnlZak16azdKeWt1Y21Wd2JHRmpaU2d2WUM5bkxDQW5KaU01TmpzbktUdGNibjBpTENKcGJYQnZjblFnWkdsemRHRnVZMlZFYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR2WkdsemRHRnVZMlV1WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVwYlhCdmNuUWdlMlJsWm1sdVpVTnZibk4wVUhKdmNHVnlkSGw5SUdaeWIyMGdKeTR1TDNSdmIyeHpMM1YwYVd4ekxtcHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSR2x6ZEdGdVkyVkJZM1JwYjI1eklIdGNiaUFnYzNSaGRHbGpJR05vWVc1blpWWmhiSFZsS0haaGJIVmxLU0I3WEc0Z0lDQWdaR2x6ZEdGdVkyVkVhWE53WVhSamFHVnlMbVJwYzNCaGRHTm9LSHRjYmlBZ0lDQWdJSFI1Y0dVNklFUnBjM1JoYm1ObFFXTjBhVzl1Y3k1V1FVeFZSVjlEU0VGT1IwVkVMRnh1SUNBZ0lDQWdaR0YwWVRvZ2RtRnNkV1ZjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJqYUdGdVoyVlZibWwwS0hWdWFYUXBJSHRjYmlBZ0lDQmthWE4wWVc1alpVUnBjM0JoZEdOb1pYSXVaR2x6Y0dGMFkyZ29lMXh1SUNBZ0lDQWdkSGx3WlRvZ1JHbHpkR0Z1WTJWQlkzUnBiMjV6TGxWT1NWUmZRMGhCVGtkRlJDeGNiaUFnSUNBZ0lHUmhkR0U2SUhWdWFYUmNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVYRzVrWldacGJtVkRiMjV6ZEZCeWIzQmxjblI1S0VScGMzUmhibU5sUVdOMGFXOXVjeXdnSjFaQlRGVkZYME5JUVU1SFJVUW5MQ0JUZVcxaWIyd29LU2s3WEc1a1pXWnBibVZEYjI1emRGQnliM0JsY25SNUtFUnBjM1JoYm1ObFFXTjBhVzl1Y3l3Z0oxVk9TVlJmUTBoQlRrZEZSQ2NzSUZONWJXSnZiQ2dwS1R0Y2JseHVJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1JHbHpkR0Z1WTJVZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loN2RXNXBkRDBuUzIwbkxDQjJZV3gxWlQwd2ZTa2dlMXh1SUNBZ0lIUm9hWE11ZFc1cGRDQTlJSFZ1YVhRN1hHNGdJQ0FnZEdocGN5NTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQjlYRzVjYmlBZ2MyVjBWbUZzZFdVb2RtRnNkV1VwSUh0Y2JpQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2NHRnljMlZKYm5Rb2RtRnNkV1VwTzF4dUlDQjlYRzU5SWl3aWFXMXdiM0owSUVScGMzQmhkR05vWlhJZ1puSnZiU0FuTGk0dmRHOXZiSE12WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRzVsZHlCRWFYTndZWFJqYUdWeUtDazdJaXdpYVcxd2IzSjBJR1JxY3lCbWNtOXRJQ2RrYjIwdWFuTW5PMXh1WEc1cGJYQnZjblFnUkdsemRHRnVZMlZCWTNScGIyNXpJR1p5YjIwZ0p5NHZaR2x6ZEdGdVkyVXVZV04wYVc5dWN5NXFjeWM3WEc1cGJYQnZjblFnUkdsemRHRnVZMlZUZEc5eVpTQm1jbTl0SUNjdUwyUnBjM1JoYm1ObExuTjBiM0psTG1wekp6dGNibHh1YkdWMElHTnZibVpwWjAxaGNDQTlJSHRjYmlBZ2FIUnRiRG9nWkdwellGeHVJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSm1aUzFrYVhOMFlXNWpaVndpUGx4dUlDQWdJQ0FnUEdsdWNIVjBJR05zWVhOelBWd2labVV0YVc1d2RYUnpYMTlwYm5CMWRDQm1aUzFrYVhOMFlXNWpaVjlmYVc1d2RYUmNJaUIwZVhCbFBWd2lkR1Y0ZEZ3aVBseHVJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0ptWlMxMWJtbDBJR1psTFdScGMzUmhibU5sWDE5MWJtbDBYQ0krZXlRa2RXNXBkSDA4TDNOd1lXNCtYRzRnSUNBZ1BDOWthWFkrWEc0Z0lHQmNibjA3WEc1Y2JteGxkQ0JsYkdWdFpXNTBUV0Z3SUQwZ2UxeHVJQ0FrWTI5dWRHRnBibVZ5T2lCdWRXeHNMRnh1SUNBa1pHbHpkR0Z1WTJVNklHNTFiR3dzWEc0Z0lDUnBibkIxZERvZ2JuVnNiQ3hjYmlBZ0pIVnVhWFE2SUc1MWJHeGNibjA3WEc1Y2JteGxkQ0JrYVhOMFlXNWpaVk4wYjNKbE8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzVwZEUxdlpIVnNaU2drWTI5dWRHRnBibVZ5S1NCN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdScGMzUmhibU5sSUQwZ0pHTnZiblJoYVc1bGNpNWpjbVZoZEdVb1kyOXVabWxuVFdGd0xtaDBiV3dwTzF4dUlDQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcE8xeHVJQ0J6WlhSRmJHVnRaVzUwU0dGdVpHeGxjbk1vS1R0Y2JseHVJQ0JrYVhOMFlXNWpaVk4wYjNKbElEMGdibVYzSUVScGMzUmhibU5sVTNSdmNtVW9LVHRjYmlBZ1pHbHpkR0Z1WTJWVGRHOXlaUzV2YmtOb1lXNW5aU2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WldaeVpYTm9WVzVwZENoa2FYTjBZVzVqWlZOMGIzSmxMbVJwYzNSaGJtTmxMblZ1YVhRcE8xeHVJQ0I5S1R0Y2JseHVJQ0JFYVhOMFlXNWpaVUZqZEdsdmJuTXVZMmhoYm1kbFZXNXBkQ2duUzIwbktUdGNiaUFnWkdsemRHRnVZMlZUZEc5eVpTNTFibkpsWjJsemRHVnlUR2x6ZEdWdVpYSW9LVHRjYm4xY2JseHVablZ1WTNScGIyNGdjbVZtY21WemFGVnVhWFFvZFc1cGRDa2dlMXh1SUNCbGJHVnRaVzUwVFdGd0xpUjFibWwwTG1sdWJtVnlTRlJOVENBOUlIVnVhWFE3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE5sZEVWc1pXMWxiblJOWVhBb0pHTnZiblJoYVc1bGNpa2dlMXh1SUNCbGJHVnRaVzUwVFdGd0xpUmpiMjUwWVdsdVpYSWdQU0FrWTI5dWRHRnBibVZ5TzF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJwYm5CMWRDQTlJR1ZzWlcxbGJuUk5ZWEF1SkdScGMzUmhibU5sTG1acGJtUW9KeTVtWlMxa2FYTjBZVzVqWlY5ZmFXNXdkWFFuS1R0Y2JpQWdaV3hsYldWdWRFMWhjQzRrZFc1cGRDQTlJR1ZzWlcxbGJuUk5ZWEF1SkdScGMzUmhibU5sTG1acGJtUW9KeTVtWlMxa2FYTjBZVzVqWlY5ZmRXNXBkQ2NwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhSRmJHVnRaVzUwU0dGdVpHeGxjbk1vS1NCN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdsdWNIVjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMmx1Y0hWMEp5d2dablZ1WTNScGIyNG9aWFpsYm5RcElIdGNiaUFnSUNCRWFYTjBZVzVqWlVGamRHbHZibk11WTJoaGJtZGxWbUZzZFdVb1pYWmxiblF1ZEdGeVoyVjBMblpoYkhWbEtUc2dJQ0FnWEc0Z0lIMHBPMXh1ZlZ4dUlpd2lhVzF3YjNKMElGTjBiM0psSUdaeWIyMGdKeTR1TDNSdmIyeHpMM04wYjNKbExtcHpKenRjYmx4dWFXMXdiM0owSUVScGMzUmhibU5sSUdaeWIyMGdKeTR2WkdsemRHRnVZMlV1WTJ4aGMzTXVhbk1uTzF4dWFXMXdiM0owSUVScGMzUmhibU5sUVdOMGFXOXVjeUJtY205dElDY3VMMlJwYzNSaGJtTmxMbUZqZEdsdmJuTXVhbk1uTzF4dWFXMXdiM0owSUdScGMzUmhibU5sUkdsemNHRjBZMmhsY2lCbWNtOXRJQ2N1TDJScGMzUmhibU5sTG1ScGMzQmhkR05vWlhJdWFuTW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkVhWE4wWVc1alpWTjBiM0psSUdWNGRHVnVaSE1nVTNSdmNtVjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNWNiaUFnSUNCMGFHbHpMbVJwYzNSaGJtTmxJRDBnYm1WM0lFUnBjM1JoYm1ObEtIdDlLVHRjYmx4dUlDQWdJSFJvYVhNdWJHbHpkR1Z1WlhJZ1BTQmthWE4wWVc1alpVUnBjM0JoZEdOb1pYSXVjbVZuYVhOMFpYSW9LR3hwYzNSbGJtVnlLU0E5UGlCN1hHNGdJQ0FnSUNCemQybDBZMmdvYkdsemRHVnVaWEl1ZEhsd1pTa2dlMXh1SUNBZ0lDQWdZMkZ6WlNCRWFYTjBZVzVqWlVGamRHbHZibk11VmtGTVZVVmZRMGhCVGtkRlJEcGNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTjBZVzVqWlNBOUlHNWxkeUJFYVhOMFlXNWpaU2g3WEc0Z0lDQWdJQ0FnSUNBZ2RXNXBkRG9nZEdocGN5NWthWE4wWVc1alpTNTFibWwwTENCY2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JHbHpkR1Z1WlhJdVpHRjBZVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ1kyRnpaU0JFYVhOMFlXNWpaVUZqZEdsdmJuTXVWVTVKVkY5RFNFRk9SMFZFT2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVJwYzNSaGJtTmxJRDBnYm1WM0lFUnBjM1JoYm1ObEtIdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dkR2hwY3k1a2FYTjBZVzVqWlM1MllXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNCMWJtbDBPaUJzYVhOMFpXNWxjaTVrWVhSaFhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxtTm9ZVzVuWlNncE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdkVzV5WldkcGMzUmxja3hwYzNSbGJtVnlLQ2tnZTF4dUlDQWdJR1JwYzNSaGJtTmxSR2x6Y0dGMFkyaGxjaTUxYm5KbFoybHpkR1Z5S0hSb2FYTXViR2x6ZEdWdVpYSXBPMXh1SUNCOVhHNTlJaXdpYVcxd2IzSjBJR1JxY3lCbWNtOXRJQ2RrYjIwdWFuTW5PMXh1WEc1c1pYUWdZMjl1Wm1sblRXRndJRDBnZTF4dUlDQm9kRzFzT2lCa2FuTmdYRzRnSUNBZ1BHaGxZV1JsY2lCamJHRnpjejFjSW1abExXaGxZV1JsY2x3aVBseHVJQ0FnSUNBZ1BHZ3hQa1oxWld3Z1JXTnZibTl0ZVR3dmFERStYRzRnSUNBZ1BDOW9aV0ZrWlhJK1hHNGdJR0JjYm4wN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBibWwwVFc5a2RXeGxLQ1JqYjI1MFlXbHVaWElwSUh0Y2JpQWdKR052Ym5SaGFXNWxjaTVqY21WaGRHVW9ZMjl1Wm1sblRXRndMbWgwYld3cE8xeHVmVnh1SWl3aWFXMXdiM0owSUdScWN5Qm1jbTl0SUNka2IyMHVhbk1uTzF4dVhHNXBiWEJ2Y25RZ0tpQmhjeUJvWldGa1pYSWdabkp2YlNBbkxpOW9aV0ZrWlhJdmFHVmhaR1Z5TG1wekp6dGNibWx0Y0c5eWRDQXFJR0Z6SUdsdWNIVjBjME52Ym5SaGFXNWxjaUJtY205dElDY3VMMmx1Y0hWMGN5OXBibkIxZEhNdFkyOXVkR0ZwYm1WeUxtcHpKenRjYm1sdGNHOXlkQ0FxSUdGeklISmxjM1ZzZEhORGIyNTBZV2x1WlhJZ1puSnZiU0FuTGk5eVpYTjFiSFJ6TDNKbGMzVnNkSE10WTI5dWRHRnBibVZ5TG1wekp6dGNibHh1YVcxd2IzSjBJQ29nWVhNZ2NYVmhiblJwZEhrZ1puSnZiU0FuTGk5eGRXRnVkR2wwZVM5eGRXRnVkR2wwZVM1cWN5YzdYRzVwYlhCdmNuUWdLaUJoY3lCa2FYTjBZVzVqWlNCbWNtOXRJQ2N1TDJScGMzUmhibU5sTDJScGMzUmhibU5sTG1wekp6dGNibWx0Y0c5eWRDQXFJR0Z6SUhKbGMzVnNkSE1nWm5KdmJTQW5MaTl5WlhOMWJIUnpMM0psYzNWc2RITXRZMjl1ZEdGcGJtVnlMbXB6Snp0Y2JseHViR1YwSUNSb1pXRmtaWEpEYjI1MFlXbHVaWElnUFNCa2FuTW9KeTVtWlMxcWN5MW9aV0ZrWlhJbktUdGNibXhsZENBa2FXNXdkWFJ6UTI5dWRHRnBibVZ5SUQwZ1pHcHpLQ2N1Wm1VdGFuTXRhVzV3ZFhSekxXTnZiblJoYVc1bGNpY3BPMXh1YkdWMElDUnlaWE4xYkhSelEyOXVkR0ZwYm1WeUlEMGdaR3B6S0NjdVptVXRhbk10Y21WemRXeDBjeTFqYjI1MFlXbHVaWEluS1R0Y2JseHViR1YwSUhGMVlXNTBhWFI1VFc5a1pXd2dQU0I3ZFc1cGREb2dKMHduZlR0Y2JteGxkQ0JrYVhOMFlXNWpaVTF2WkdWc0lEMGdlM1Z1YVhRNklDZExiU2Q5TzF4dVhHNXhkV0Z1ZEdsMGVTNWpiMjVtYVdjb2UxeHVJQ0IxYm1sME9pQW5UQ2NzWEc0Z0lHOXVTVzV3ZFhRNklHWjFibU4wYVc5dUtHMXZaR1ZzS1NCN1hHNGdJQ0FnY1hWaGJuUnBkSGxOYjJSbGJDQTlJRzF2WkdWc08xeHVJQ0FnSUhKbGMzVnNkSE11Y21WbWNtVnphRVoxWld4RGIyNXpkVzF3ZEdsdmJpaDdYRzRnSUNBZ0lDQmthWE4wWVc1alpUb2daR2x6ZEdGdVkyVk5iMlJsYkN4Y2JpQWdJQ0FnSUhGMVlXNTBhWFI1T2lCeGRXRnVkR2wwZVUxdlpHVnNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMHBPMXh1WEc1a2FYTjBZVzVqWlM1amIyNW1hV2NvZTF4dUlDQjFibWwwT2lBblMyMG5MRnh1SUNCdmJrbHVjSFYwT2lCbWRXNWpkR2x2YmlodGIyUmxiQ2tnZTF4dUlDQWdJR1JwYzNSaGJtTmxUVzlrWld3Z1BTQnRiMlJsYkR0Y2JpQWdJQ0J5WlhOMWJIUnpMbkpsWm5KbGMyaEdkV1ZzUTI5dWMzVnRjSFJwYjI0b2UxeHVJQ0FnSUNBZ1pHbHpkR0Z1WTJVNklHUnBjM1JoYm1ObFRXOWtaV3dzWEc0Z0lDQWdJQ0J4ZFdGdWRHbDBlVG9nY1hWaGJuUnBkSGxOYjJSbGJGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OUtUdGNibHh1YUdWaFpHVnlMbWx1YVhSTmIyUjFiR1VvSkdobFlXUmxja052Ym5SaGFXNWxjaWs3WEc1cGJuQjFkSE5EYjI1MFlXbHVaWEl1YVc1cGRFMXZaSFZzWlNna2FXNXdkWFJ6UTI5dWRHRnBibVZ5S1R0Y2JuSmxjM1ZzZEhORGIyNTBZV2x1WlhJdWFXNXBkRTF2WkhWc1pTZ2tjbVZ6ZFd4MGMwTnZiblJoYVc1bGNpazdYRzVjYm5KbGMzVnNkSE11Y21WbWNtVnphRVoxWld4RGIyNXpkVzF3ZEdsdmJpaDdYRzRnSUdScGMzUmhibU5sT2lCa2FYTjBZVzVqWlUxdlpHVnNMRnh1SUNCeGRXRnVkR2wwZVRvZ2NYVmhiblJwZEhsTmIyUmxiRnh1ZlNrN1hHNGlMQ0pwYlhCdmNuUWdaR3B6SUdaeWIyMGdKMlJ2YlM1cWN5YzdYRzVwYlhCdmNuUWdLaUJoY3lCeGRXRnVkR2wwZVNCbWNtOXRJQ2N1TGk5eGRXRnVkR2wwZVM5eGRXRnVkR2wwZVM1cWN5YzdYRzVwYlhCdmNuUWdLaUJoY3lCa2FYTjBZVzVqWlNCbWNtOXRJQ2N1TGk5a2FYTjBZVzVqWlM5a2FYTjBZVzVqWlM1cWN5YzdYRzVjYm14bGRDQmpiMjVtYVdkTllYQWdQU0I3WEc0Z0lHaDBiV3c2SUdScWN5QmdYRzRnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbVpsTFdsdWNIVjBjeTFqYjI1MFlXbHVaWEpjSWo1Y2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSm1aUzFwYm5CMWRITWdabVV0YW5NdGNYVmhiblJwZEhsY0lqNDhMMlJwZGo1Y2JseHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbVpsTFdsdWNIVjBjeUJtWlMxcWN5MWthWE4wWVc1alpWd2lQand2WkdsMlBseHVJQ0FnSUR3dlpHbDJQbHh1SUNCZ1hHNTlPMXh1WEc1c1pYUWdaV3hsYldWdWRFMWhjQ0E5SUh0Y2JpQWdKR052Ym5SaGFXNWxjam9nYm5Wc2JDeGNiaUFnSkdsdWNIVjBRMjl1ZEdGcGJtVnlPaUJ1ZFd4c0xGeHVJQ0FrYVc1d2RYUlJkV0Z1ZEdsMGVUb2diblZzYkN4Y2JpQWdKR2x1Y0hWMFJHbHpkR0Z1WTJVNklHNTFiR3hjYm4wN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBibWwwVFc5a2RXeGxLQ1JqYjI1MFlXbHVaWElwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrYVc1d2RYUkRiMjUwWVdsdVpYSWdQU0FrWTI5dWRHRnBibVZ5TG1OeVpXRjBaU2hqYjI1bWFXZE5ZWEF1YUhSdGJDazdYRzVjYmlBZ2MyVjBSV3hsYldWdWRFMWhjQ2drWTI5dWRHRnBibVZ5S1R0Y2JseHVJQ0J4ZFdGdWRHbDBlUzVwYm1sMFRXOWtkV3hsS0dWc1pXMWxiblJOWVhBdUpHbHVjSFYwVVhWaGJuUnBkSGtwTzF4dUlDQmthWE4wWVc1alpTNXBibWwwVFc5a2RXeGxLR1ZzWlcxbGJuUk5ZWEF1SkdsdWNIVjBSR2x6ZEdGdVkyVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a1kyOXVkR0ZwYm1WeUlEMGdKR052Ym5SaGFXNWxjanRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGthVzV3ZFhSUmRXRnVkR2wwZVNBOUlHVnNaVzFsYm5STllYQXVKR2x1Y0hWMFEyOXVkR0ZwYm1WeUxtWnBibVFvSnk1bVpTMXFjeTF4ZFdGdWRHbDBlU2NwTzF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJwYm5CMWRFUnBjM1JoYm1ObElEMGdaV3hsYldWdWRFMWhjQzRrYVc1d2RYUkRiMjUwWVdsdVpYSXVabWx1WkNnbkxtWmxMV3B6TFdScGMzUmhibU5sSnlrN1hHNTlYRzRpTENKcGJYQnZjblFnY1hWaGJuUnBkSGxFYVhOd1lYUmphR1Z5SUdaeWIyMGdKeTR2Y1hWaGJuUnBkSGt1WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVwYlhCdmNuUWdlMlJsWm1sdVpVTnZibk4wVUhKdmNHVnlkSGw5SUdaeWIyMGdKeTR1TDNSdmIyeHpMM1YwYVd4ekxtcHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVWFZoYm5ScGRIbEJZM1JwYjI1eklIdGNiaUFnYzNSaGRHbGpJR05vWVc1blpWWmhiSFZsS0haaGJIVmxLU0I3WEc0Z0lDQWdjWFZoYm5ScGRIbEVhWE53WVhSamFHVnlMbVJwYzNCaGRHTm9LSHRjYmlBZ0lDQWdJSFI1Y0dVNklGRjFZVzUwYVhSNVFXTjBhVzl1Y3k1V1FVeFZSVjlEU0VGT1IwVkVMRnh1SUNBZ0lDQWdaR0YwWVRvZ2RtRnNkV1ZjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJqYUdGdVoyVlZibWwwS0hWdWFYUXBJSHRjYmlBZ0lDQnhkV0Z1ZEdsMGVVUnBjM0JoZEdOb1pYSXVaR2x6Y0dGMFkyZ29lMXh1SUNBZ0lDQWdkSGx3WlRvZ1VYVmhiblJwZEhsQlkzUnBiMjV6TGxWT1NWUmZRMGhCVGtkRlJDeGNiaUFnSUNBZ0lHUmhkR0U2SUhWdWFYUmNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVYRzVrWldacGJtVkRiMjV6ZEZCeWIzQmxjblI1S0ZGMVlXNTBhWFI1UVdOMGFXOXVjeXdnSjFaQlRGVkZYME5JUVU1SFJVUW5MQ0JUZVcxaWIyd29LU2s3WEc1a1pXWnBibVZEYjI1emRGQnliM0JsY25SNUtGRjFZVzUwYVhSNVFXTjBhVzl1Y3l3Z0oxVk9TVlJmUTBoQlRrZEZSQ2NzSUZONWJXSnZiQ2dwS1R0Y2JseHVJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VYVmhiblJwZEhrZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loN2RXNXBkRDBuVENjc0lIWmhiSFZsUFRCOUtTQjdYRzRnSUNBZ2RHaHBjeTUxYm1sMElEMGdkVzVwZER0Y2JpQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibHh1SUNCelpYUldZV3gxWlNoMllXeDFaU2tnZTF4dUlDQWdJSFJvYVhNdWRtRnNkV1VnUFNCd1lYSnpaVWx1ZENoMllXeDFaU2s3WEc0Z0lIMWNibjBpTENKcGJYQnZjblFnUkdsemNHRjBZMmhsY2lCbWNtOXRJQ2N1TGk5MGIyOXNjeTlrYVhOd1lYUmphR1Z5TG1wekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdibVYzSUVScGMzQmhkR05vWlhJb0tUc2lMQ0pwYlhCdmNuUWdaR3B6SUdaeWIyMGdKMlJ2YlM1cWN5YzdYRzVjYm1sdGNHOXlkQ0JSZFdGdWRHbDBlVUZqZEdsdmJuTWdabkp2YlNBbkxpOXhkV0Z1ZEdsMGVTNWhZM1JwYjI1ekxtcHpKenRjYm1sdGNHOXlkQ0JSZFdGdWRHbDBlVk4wYjNKbElHWnliMjBnSnk0dmNYVmhiblJwZEhrdWMzUnZjbVV1YW5Nbk8xeHVYRzVzWlhRZ1kyOXVabWxuVFdGd0lEMGdlMXh1SUNCb2RHMXNPaUJrYW5OZ1hHNGdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltWmxMWEYxWVc1MGFYUjVYQ0krWEc0Z0lDQWdJQ0E4YVc1d2RYUWdZMnhoYzNNOVhDSm1aUzFwYm5CMWRITmZYMmx1Y0hWMElHWmxMWEYxWVc1MGFYUjVYMTlwYm5CMWRGd2lJSFI1Y0dVOVhDSjBaWGgwWENJK1hHNGdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJbVpsTFhWdWFYUWdabVV0Y1hWaGJuUnBkSGxmWDNWdWFYUmNJajU3SkNSMWJtbDBmVHd2YzNCaGJqNWNiaUFnSUNBOEwyUnBkajVjYmlBZ1lGeHVmVHRjYmx4dWJHVjBJR1ZzWlcxbGJuUk5ZWEFnUFNCN1hHNGdJQ1JqYjI1MFlXbHVaWEk2SUc1MWJHd3NYRzRnSUNSeGRXRnVkR2wwZVRvZ2JuVnNiQ3hjYmlBZ0pHbHVjSFYwT2lCdWRXeHNMRnh1SUNBa2RXNXBkRG9nYm5Wc2JGeHVmVHRjYmx4dWJHVjBJSEYxWVc1MGFYUjVVM1J2Y21VN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBibWwwVFc5a2RXeGxLQ1JqYjI1MFlXbHVaWElwSUh0Y2JpQWdaV3hsYldWdWRFMWhjQzRrY1hWaGJuUnBkSGtnUFNBa1kyOXVkR0ZwYm1WeUxtTnlaV0YwWlNoamIyNW1hV2ROWVhBdWFIUnRiQ2s3WEc0Z0lITmxkRVZzWlcxbGJuUk5ZWEFvSkdOdmJuUmhhVzVsY2lrN1hHNGdJSE5sZEVWc1pXMWxiblJJWVc1a2JHVnljeWdwTzF4dVhHNGdJSEYxWVc1MGFYUjVVM1J2Y21VZ1BTQnVaWGNnVVhWaGJuUnBkSGxUZEc5eVpTZ3BPMXh1SUNCeGRXRnVkR2wwZVZOMGIzSmxMbTl1UTJoaGJtZGxLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsWm5KbGMyaFZibWwwS0hGMVlXNTBhWFI1VTNSdmNtVXVjWFZoYm5ScGRIa3VkVzVwZENrN1hHNGdJSDBwTzF4dVhHNGdJRkYxWVc1MGFYUjVRV04wYVc5dWN5NWphR0Z1WjJWVmJtbDBLQ2RNSnlrN1hHNGdJSEYxWVc1MGFYUjVVM1J2Y21VdWRXNXlaV2RwYzNSbGNreHBjM1JsYm1WeUtDazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxabkpsYzJoVmJtbDBLSFZ1YVhRcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a2RXNXBkQzVwYm01bGNraFVUVXdnUFNCMWJtbDBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a1kyOXVkR0ZwYm1WeUlEMGdKR052Ym5SaGFXNWxjanRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGthVzV3ZFhRZ1BTQmxiR1Z0Wlc1MFRXRndMaVJ4ZFdGdWRHbDBlUzVtYVc1a0tDY3VabVV0Y1hWaGJuUnBkSGxmWDJsdWNIVjBKeWs3WEc0Z0lHVnNaVzFsYm5STllYQXVKSFZ1YVhRZ1BTQmxiR1Z0Wlc1MFRXRndMaVJ4ZFdGdWRHbDBlUzVtYVc1a0tDY3VabVV0Y1hWaGJuUnBkSGxmWDNWdWFYUW5LVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwUld4bGJXVnVkRWhoYm1Sc1pYSnpLQ2tnZTF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJwYm5CMWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHBibkIxZENjc0lHWjFibU4wYVc5dUtHVjJaVzUwS1NCN1hHNGdJQ0FnVVhWaGJuUnBkSGxCWTNScGIyNXpMbU5vWVc1blpWWmhiSFZsS0dWMlpXNTBMblJoY21kbGRDNTJZV3gxWlNrN0lDQWdJRnh1SUNCOUtUdGNibjBpTENKcGJYQnZjblFnVTNSdmNtVWdabkp2YlNBbkxpNHZkRzl2YkhNdmMzUnZjbVV1YW5Nbk8xeHVYRzVwYlhCdmNuUWdVWFZoYm5ScGRIa2dabkp2YlNBbkxpOXhkV0Z1ZEdsMGVTNWpiR0Z6Y3k1cWN5YzdYRzVwYlhCdmNuUWdVWFZoYm5ScGRIbEJZM1JwYjI1eklHWnliMjBnSnk0dmNYVmhiblJwZEhrdVlXTjBhVzl1Y3k1cWN5YzdYRzVwYlhCdmNuUWdjWFZoYm5ScGRIbEVhWE53WVhSamFHVnlJR1p5YjIwZ0p5NHZjWFZoYm5ScGRIa3VaR2x6Y0dGMFkyaGxjaTVxY3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZGMVlXNTBhWFI1VTNSdmNtVWdaWGgwWlc1a2N5QlRkRzl5WlNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxuRjFZVzUwYVhSNUlEMGdibVYzSUZGMVlXNTBhWFI1S0h0OUtUdGNibHh1SUNBZ0lIUm9hWE11YkdsemRHVnVaWElnUFNCeGRXRnVkR2wwZVVScGMzQmhkR05vWlhJdWNtVm5hWE4wWlhJb0tHeHBjM1JsYm1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0J6ZDJsMFkyZ29iR2x6ZEdWdVpYSXVkSGx3WlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0JSZFdGdWRHbDBlVUZqZEdsdmJuTXVWa0ZNVlVWZlEwaEJUa2RGUkRwY2JpQWdJQ0FnSUNBZ2RHaHBjeTV4ZFdGdWRHbDBlU0E5SUc1bGR5QlJkV0Z1ZEdsMGVTaDdYRzRnSUNBZ0lDQWdJQ0FnZFc1cGREb2dkR2hwY3k1eGRXRnVkR2wwZVM1MWJtbDBMQ0JjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYkdsemRHVnVaWEl1WkdGMFlWeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnWTJGelpTQlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NdVZVNUpWRjlEU0VGT1IwVkVPbHh1SUNBZ0lDQWdJQ0IwYUdsekxuRjFZVzUwYVhSNUlEMGdibVYzSUZGMVlXNTBhWFI1S0h0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2RHaHBjeTV4ZFdGdWRHbDBlUzUyWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0IxYm1sME9pQnNhWE4wWlc1bGNpNWtZWFJoWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TG1Ob1lXNW5aU2dwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ2RXNXlaV2RwYzNSbGNreHBjM1JsYm1WeUtDa2dlMXh1SUNBZ0lIRjFZVzUwYVhSNVJHbHpjR0YwWTJobGNpNTFibkpsWjJsemRHVnlLSFJvYVhNdWJHbHpkR1Z1WlhJcE8xeHVJQ0I5WEc1OUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUm5WbGJFTnZibk4xYlhCMGFXOXVjeUI3WEc0Z0lITjBZWFJwWXlCallXeGpLSHR4ZFdGdWRHbDBlVDE3ZlN3Z1pHbHpkR0Z1WTJVOWUzMTlLU0I3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUh0Y2JpQWdJQ0FnSUhaaGJIVmxPaUF3TEZ4dUlDQWdJQ0FnZFc1cGREb2dZQ1I3WkdsemRHRnVZMlV1ZFc1cGRIMHZKSHR4ZFdGdWRHbDBlUzUxYm1sMGZXQmNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FXWWdLQ0Z4ZFdGdWRHbDBlUzUyWVd4MVpTQjhmQ0FoWkdsemRHRnVZMlV1ZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WemRXeDBMblpoYkhWbElEMGdaR2x6ZEdGdVkyVXVkbUZzZFdVZ0x5QnhkV0Z1ZEdsMGVTNTJZV3gxWlR0Y2JseHVJQ0FnSUhKbGMzVnNkQzUyWVd4MVpTQTlJSEpsYzNWc2RDNTJZV3gxWlM1MGIxTjBjbWx1WnlncExuTjFZbk4wY21sdVp5Z3dMQ0F4TUNrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dWZTSXNJbWx0Y0c5eWRDQmthbk1nWm5KdmJTQW5aRzl0TG1wekp6dGNibHh1YVcxd2IzSjBJRVoxWld4RGIyNXpkVzF3ZEdsdmJsTjBiM0psSUdaeWIyMGdKeTR2Wm5WbGJDMWpiMjV6ZFcxd2RHbHZiaTV6ZEc5eVpTNXFjeWM3WEc1Y2JteGxkQ0JqYjI1bWFXZE5ZWEFnUFNCN1hHNGdJR2gwYld3NklHUnFjMkJjYmlBZ0lDQThaR2wySUdOc1lYTnpQVndpWm1VdFpuVmxiQzFqYjI1emRXMXdkR2x2Ymx3aVBseHVJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0ptWlMxcWN5MTJZV3gxWlZ3aVBqZzRQQzl6Y0dGdVBpQThjM0JoYmlCamJHRnpjejFjSW1abExYVnVhWFJjSWo1TGJTOU1QQzl6Y0dGdVBseHVJQ0FnSUR3dlpHbDJQbHh1SUNCZ1hHNTlPMXh1WEc1c1pYUWdaV3hsYldWdWRFMWhjQ0E5SUh0Y2JpQWdKR052Ym5SaGFXNWxjam9nYm5Wc2JDeGNiaUFnSkdaMVpXeERiMjV6ZFcxd2RHbHZiam9nYm5Wc2JDeGNiaUFnSkdaMVpXeFZibWwwT2lCdWRXeHNMRnh1SUNBa1puVmxiRlpoYkhWbE9pQnVkV3hzWEc1OU8xeHVYRzVzWlhRZ1puVmxiRU52Ym5OMWJYQjBhVzl1VTNSdmNtVTdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYm1sMFRXOWtkV3hsS0NSamIyNTBZV2x1WlhJcElIdGNiaUFnWld4bGJXVnVkRTFoY0M0a1puVmxiRU52Ym5OMWJYQjBhVzl1SUQwZ0pHTnZiblJoYVc1bGNpNWpjbVZoZEdVb1kyOXVabWxuVFdGd0xtaDBiV3dwTzF4dUlDQnpaWFJGYkdWdFpXNTBUV0Z3S0NSamIyNTBZV2x1WlhJcE8xeHVYRzRnSUdaMVpXeERiMjV6ZFcxd2RHbHZibE4wYjNKbElEMGdibVYzSUVaMVpXeERiMjV6ZFcxd2RHbHZibE4wYjNKbEtDazdYRzVjYmlBZ1puVmxiRU52Ym5OMWJYQjBhVzl1VTNSdmNtVXViMjVEYUdGdVoyVW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVZtY21WemFFWjFaV3hEYjI1emRXMXdkR2x2YmlobWRXVnNRMjl1YzNWdGNIUnBiMjVUZEc5eVpTNXlaWE4xYkhSektUdGNiaUFnZlNrN1hHNWNiaUFnWm5WbGJFTnZibk4xYlhCMGFXOXVVM1J2Y21VdVkyaGhibWRsS0NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbFpuSmxjMmhHZFdWc1EyOXVjM1Z0Y0hScGIyNG9jbVZ6ZFd4MGN5a2dlMXh1SUNCbGJHVnRaVzUwVFdGd0xpUm1kV1ZzVlc1cGRDNXBibTVsY2toVVRVd2dQU0J5WlhOMWJIUnpMblZ1YVhRN1hHNGdJR1ZzWlcxbGJuUk5ZWEF1SkdaMVpXeFdZV3gxWlM1cGJtNWxja2hVVFV3Z1BTQnlaWE4xYkhSekxuWmhiSFZsTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhSRmJHVnRaVzUwVFdGd0tDUmpiMjUwWVdsdVpYSXBJSHRjYmlBZ1pXeGxiV1Z1ZEUxaGNDNGtZMjl1ZEdGcGJtVnlJRDBnSkdOdmJuUmhhVzVsY2p0Y2JpQWdaV3hsYldWdWRFMWhjQzRrWm5WbGJGVnVhWFFnUFNCbGJHVnRaVzUwVFdGd0xpUm1kV1ZzUTI5dWMzVnRjSFJwYjI0dVptbHVaQ2duTG1abExYVnVhWFFuS1R0Y2JpQWdaV3hsYldWdWRFMWhjQzRrWm5WbGJGWmhiSFZsSUQwZ1pXeGxiV1Z1ZEUxaGNDNGtablZsYkVOdmJuTjFiWEIwYVc5dUxtWnBibVFvSnk1bVpTMXFjeTEyWVd4MVpTY3BPMXh1ZlNJc0ltbHRjRzl5ZENCVGRHOXlaU0JtY205dElDY3VMaTh1TGk5MGIyOXNjeTl6ZEc5eVpTNXFjeWM3WEc1Y2JtbHRjRzl5ZENCU1pYTjFiSFJ6UTI5dWMzVnRjSFJwYjI1elFXTjBhVzl1Y3lCbWNtOXRJQ2N1TGk5eVpYTjFiSFJ6TG1GamRHbHZibk11YW5Nbk8xeHVhVzF3YjNKMElISmxjM1ZzZEVScGMzQmhkR05vWlhJZ1puSnZiU0FuTGk0dmNtVnpkV3gwY3k1a2FYTndZWFJqYUdWeUxtcHpKenRjYmx4dWFXMXdiM0owSUVaMVpXeERiMjV6ZFcxd2RHbHZibk1nWm5KdmJTQW5MaTltZFdWc0xXTnZibk4xYlhCMGFXOXVMbU5zWVhOekxtcHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSblZsYkVOdmJuTjFiWEIwYVc5dVUzUnZjbVVnWlhoMFpXNWtjeUJUZEc5eVpTQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNWNiaUFnSUNCMGFHbHpMbkpsYzNWc2RITWdQU0JHZFdWc1EyOXVjM1Z0Y0hScGIyNXpMbU5oYkdNb2UzMHBPMXh1WEc0Z0lDQWdjbVZ6ZFd4MFJHbHpjR0YwWTJobGNpNXlaV2RwYzNSbGNpZ29iR2x6ZEdWdVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUhOM2FYUmphQ2hzYVhOMFpXNWxjaTUwZVhCbEtTQjdYRzRnSUNBZ0lDQmpZWE5sSUZKbGMzVnNkSE5EYjI1emRXMXdkR2x2Ym5OQlkzUnBiMjV6TGxKRlUxVk1WRjlEU0VGT1IwVkVPbHh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjM1ZzZEhNZ1BTQkdkV1ZzUTI5dWMzVnRjSFJwYjI1ekxtTmhiR01vYkdsemRHVnVaWEl1WkdGMFlTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyaGhibWRsS0hSb2FYTXVjbVZ6ZFd4MGN5azdYRzVjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMGlMQ0pwYlhCdmNuUWdaR3B6SUdaeWIyMGdKMlJ2YlM1cWN5YzdYRzVwYlhCdmNuUWdLaUJoY3lCbWRXVnNRMjl0YzNWd2RHbHZiaUJtY205dElDY3VMMloxWld3dFkyOXVjM1Z0Y0hScGIyNHZablZsYkMxamIyNXpkVzF3ZEdsdmJpNXFjeWM3WEc1cGJYQnZjblFnVW1WemRXeDBjMU4wYjNKbElHWnliMjBnSnk0dmNtVnpkV3gwY3k1emRHOXlaUzVxY3ljN1hHNWNibXhsZENCeVpYTjFiSFJ6VTNSdmNtVTdYRzVjYm14bGRDQmpiMjVtYVdkTllYQWdQU0I3WEc0Z0lHaDBiV3c2SUdScWMyQmNiaUFnSUNBOFpHbDJJR05zWVhOelBWd2labVV0Y21WemRXeDBjeTFqYjI1MFlXbHVaWEpjSWo1Y2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSm1aUzFxY3kxbWRXVnNMV052Ym5OMWJYQjBhVzl1WENJZ2MzUjViR1U5WENKb1pXbG5hSFE2TVRBd0pWd2lQand2WkdsMlBseHVJQ0FnSUR3dlpHbDJQbHh1SUNCZ1hHNTlPMXh1WEc1c1pYUWdaV3hsYldWdWRFMWhjQ0E5SUh0Y2JpQWdKR052Ym5SaGFXNWxjam9nYm5Wc2JDeGNiaUFnSkhKbGMzVnNkSE5EYjI1MFlXbHVaWEk2SUc1MWJHd3NYRzRnSUNSbWRXVnNRMjl0YzNWd2RHbHZiam9nYm5Wc2JGeHVmVHRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdsdWFYUk5iMlIxYkdVb0pHTnZiblJoYVc1bGNpa2dlMXh1SUNCbGJHVnRaVzUwVFdGd0xpUnlaWE4xYkhSelEyOXVkR0ZwYm1WeUlEMGdKR052Ym5SaGFXNWxjaTVqY21WaGRHVW9ZMjl1Wm1sblRXRndMbWgwYld3cE8xeHVJQ0J6WlhSRmJHVnRaVzUwVFdGd0tDUmpiMjUwWVdsdVpYSXBPMXh1WEc0Z0lISmxjM1ZzZEhOVGRHOXlaU0E5SUc1bGR5QlNaWE4xYkhSelUzUnZjbVVvS1R0Y2JpQWdYRzRnSUdaMVpXeERiMjF6ZFhCMGFXOXVMbWx1YVhSTmIyUjFiR1VvWld4bGJXVnVkRTFoY0M0a1puVmxiRU52YlhOMWNIUnBiMjRwTzF4dVhHNGdJSEpsYzNWc2RITlRkRzl5WlM1MWNHUmhkR1ZTWlhOMWJIUnpLQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE5sZEVWc1pXMWxiblJOWVhBb0pHTnZiblJoYVc1bGNpa2dlMXh1SUNCbGJHVnRaVzUwVFdGd0xpUmpiMjUwWVdsdVpYSWdQU0FrWTI5dWRHRnBibVZ5TzF4dUlDQmxiR1Z0Wlc1MFRXRndMaVJtZFdWc1EyOXRjM1Z3ZEdsdmJpQTlJR1ZzWlcxbGJuUk5ZWEF1SkhKbGMzVnNkSE5EYjI1MFlXbHVaWEl1Wm1sdVpDZ25MbVpsTFdwekxXWjFaV3d0WTI5dWMzVnRjSFJwYjI0bktUdGNibjBpTENKcGJYQnZjblFnY21WemRXeDBjMFJwYzNCaGRHTm9aWElnWm5KdmJTQW5MaTl5WlhOMWJIUnpMbVJwYzNCaGRHTm9aWEl1YW5Nbk8xeHVhVzF3YjNKMElIdGtaV1pwYm1WRGIyNXpkRkJ5YjNCbGNuUjVmU0JtY205dElDY3VMaTkwYjI5c2N5OTFkR2xzY3k1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGSmxjM1ZzZEhOQlkzUnBiMjV6SUh0Y2JpQWdjM1JoZEdsaklHTm9ZVzVuWlZKbGMzVnNkQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxjM1ZzZEhORWFYTndZWFJqYUdWeUxtUnBjM0JoZEdOb0tIdGNiaUFnSUNBZ0lIUjVjR1U2SUZKbGMzVnNkSE5CWTNScGIyNXpMbEpGVTFWTVZGOURTRUZPUjBWRUxGeHVJQ0FnSUNBZ1pHRjBZVG9nZG1Gc2RXVmNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVYRzVrWldacGJtVkRiMjV6ZEZCeWIzQmxjblI1S0ZKbGMzVnNkSE5CWTNScGIyNXpMQ0FuVWtWVFZVeFVYME5JUVU1SFJVUW5MQ0JUZVcxaWIyd29LU2s3WEc0aUxDSnBiWEJ2Y25RZ1JHbHpjR0YwWTJobGNpQm1jbTl0SUNjdUxpOTBiMjlzY3k5a2FYTndZWFJqYUdWeUxtcHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnYm1WM0lFUnBjM0JoZEdOb1pYSW9LVHNpTENKcGJYQnZjblFnVTNSdmNtVWdabkp2YlNBbkxpNHZkRzl2YkhNdmMzUnZjbVV1YW5Nbk8xeHVYRzVwYlhCdmNuUWdVWFZoYm5ScGRIa2dabkp2YlNBbkxpNHZjWFZoYm5ScGRIa3ZjWFZoYm5ScGRIa3VZMnhoYzNNdWFuTW5PMXh1YVcxd2IzSjBJRkYxWVc1MGFYUjVRV04wYVc5dWN5Qm1jbTl0SUNjdUxpOXhkV0Z1ZEdsMGVTOXhkV0Z1ZEdsMGVTNWhZM1JwYjI1ekxtcHpKenRjYm1sdGNHOXlkQ0J4ZFdGdWRHbDBlVVJwYzNCaGRHTm9aWElnWm5KdmJTQW5MaTR2Y1hWaGJuUnBkSGt2Y1hWaGJuUnBkSGt1WkdsemNHRjBZMmhsY2k1cWN5YzdYRzVjYm1sdGNHOXlkQ0JFYVhOMFlXNWpaU0JtY205dElDY3VMaTlrYVhOMFlXNWpaUzlrYVhOMFlXNWpaUzVqYkdGemN5NXFjeWM3WEc1cGJYQnZjblFnUkdsemRHRnVZMlZCWTNScGIyNXpJR1p5YjIwZ0p5NHVMMlJwYzNSaGJtTmxMMlJwYzNSaGJtTmxMbUZqZEdsdmJuTXVhbk1uTzF4dWFXMXdiM0owSUdScGMzUmhibU5sUkdsemNHRjBZMmhsY2lCbWNtOXRJQ2N1TGk5a2FYTjBZVzVqWlM5a2FYTjBZVzVqWlM1a2FYTndZWFJqYUdWeUxtcHpKenRjYmx4dWFXMXdiM0owSUZKbGMzVnNkSE5CWTNScGIyNXpJR1p5YjIwZ0p5NHZjbVZ6ZFd4MGN5NWhZM1JwYjI1ekxtcHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVbVZ6ZFd4MGMxTjBiM0psSUdWNGRHVnVaSE1nVTNSdmNtVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVYRzRnSUNBZ2RHaHBjeTV4ZFdGdWRHbDBlU0E5SUc1bGR5QlJkV0Z1ZEdsMGVTaDdmU2s3WEc0Z0lDQWdkR2hwY3k1a2FYTjBZVzVqWlNBOUlHNWxkeUJFYVhOMFlXNWpaU2g3ZlNrN1hHNWNiaUFnSUNCeGRXRnVkR2wwZVVScGMzQmhkR05vWlhJdWNtVm5hWE4wWlhJb0tHeHBjM1JsYm1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWUmRXRnVkR2wwZVVOc1lYTnpLR3hwYzNSbGJtVnlLVHRjYmx4dUlDQWdJQ0FnZEdocGN5NTFjR1JoZEdWU1pYTjFiSFJ6S0NrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCa2FYTjBZVzVqWlVScGMzQmhkR05vWlhJdWNtVm5hWE4wWlhJb0tHeHBjM1JsYm1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWRWFYTjBZVzVqWlVOc1lYTnpLR3hwYzNSbGJtVnlLVHRjYmx4dUlDQWdJQ0FnZEdocGN5NTFjR1JoZEdWU1pYTjFiSFJ6S0NrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZkWEJrWVhSbFVYVmhiblJwZEhsRGJHRnpjeWhzYVhOMFpXNWxjaWtnZTF4dUlDQWdJSE4zYVhSamFDaHNhWE4wWlc1bGNpNTBlWEJsS1NCN1hHNGdJQ0FnWTJGelpTQlJkV0Z1ZEdsMGVVRmpkR2x2Ym5NdVZrRk1WVVZmUTBoQlRrZEZSRHBjYmlBZ0lDQWdJSFJvYVhNdWNYVmhiblJwZEhrZ1BTQnVaWGNnVVhWaGJuUnBkSGtvZTF4dUlDQWdJQ0FnSUNCMWJtbDBPaUIwYUdsekxuRjFZVzUwYVhSNUxuVnVhWFFzSUZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nYkdsemRHVnVaWEl1WkdGMFlWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ1kyRnpaU0JSZFdGdWRHbDBlVUZqZEdsdmJuTXVWVTVKVkY5RFNFRk9SMFZFT2x4dUlDQWdJQ0FnZEdocGN5NXhkV0Z1ZEdsMGVTQTlJRzVsZHlCUmRXRnVkR2wwZVNoN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lCMGFHbHpMbkYxWVc1MGFYUjVMblpoYkhWbExGeHVJQ0FnSUNBZ0lDQjFibWwwT2lCc2FYTjBaVzVsY2k1a1lYUmhYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVqYUdGdVoyVW9LVHRjYmlBZ2ZWeHVYRzRnSUY5MWNHUmhkR1ZFYVhOMFlXNWpaVU5zWVhOektHeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ2MzZHBkR05vS0d4cGMzUmxibVZ5TG5SNWNHVXBJSHRjYmlBZ0lDQmpZWE5sSUVScGMzUmhibU5sUVdOMGFXOXVjeTVXUVV4VlJWOURTRUZPUjBWRU9seHVJQ0FnSUNBZ2RHaHBjeTVrYVhOMFlXNWpaU0E5SUc1bGR5QkVhWE4wWVc1alpTaDdYRzRnSUNBZ0lDQWdJSFZ1YVhRNklIUm9hWE11WkdsemRHRnVZMlV1ZFc1cGRDd2dYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQnNhWE4wWlc1bGNpNWtZWFJoWEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0JqWVhObElFUnBjM1JoYm1ObFFXTjBhVzl1Y3k1VlRrbFVYME5JUVU1SFJVUTZYRzRnSUNBZ0lDQjBhR2x6TG1ScGMzUmhibU5sSUQwZ2JtVjNJRVJwYzNSaGJtTmxLSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJSFJvYVhNdVpHbHpkR0Z1WTJVdWRtRnNkV1VzWEc0Z0lDQWdJQ0FnSUhWdWFYUTZJR3hwYzNSbGJtVnlMbVJoZEdGY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtTm9ZVzVuWlNncE8xeHVJQ0I5WEc1Y2JpQWdkWEJrWVhSbFVtVnpkV3gwY3lncElIdGNiaUFnSUNCU1pYTjFiSFJ6UVdOMGFXOXVjeTVqYUdGdVoyVlNaWE4xYkhRb2UxeHVJQ0FnSUNBZ2NYVmhiblJwZEhrNklIUm9hWE11Y1hWaGJuUnBkSGtzWEc0Z0lDQWdJQ0JrYVhOMFlXNWpaVG9nZEdocGN5NWthWE4wWVc1alpWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUkdsemNHRjBZMmhsY2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMnhwYzNSbGJtVnljeUE5SUc1bGR5Qk5ZWEFvS1R0Y2JpQWdmVnh1WEc0Z0lHUnBjM0JoZEdOb0tHOWlhaWtnZTF4dUlDQWdJSFJvYVhNdVgyeHBjM1JsYm1WeWN5NW1iM0pGWVdOb0tDaHNhWE4wWlc1bGNpa2dQVDRnYkdsemRHVnVaWElvYjJKcUtTazdYRzRnSUgxY2JseHVJQ0J5WldkcGMzUmxjaWhqWVd4c1ltRmpheWtnZTF4dUlDQWdJR3hsZENCc2FYTjBaVzVsY2lBOUlGTjViV0p2YkNncE8xeHVYRzRnSUNBZ2RHaHBjeTVmYkdsemRHVnVaWEp6TG5ObGRDaHNhWE4wWlc1bGNpd2dZMkZzYkdKaFkyc3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHeHBjM1JsYm1WeU8xeHVJQ0I5WEc1Y2JpQWdkVzV5WldkcGMzUmxjaWhzYVhOMFpXNWxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5c2FYTjBaVzVsY25NdVpHVnNaWFJsS0d4cGMzUmxibVZ5S1R0Y2JpQWdmVnh1ZlNJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRk4wYjNKbElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2RHaHBjeTVmYkdsemRHVnVaWEp6SUQwZ2JtVjNJRTFoY0NncE8xeHVJQ0I5WEc1Y2JpQWdZMmhoYm1kbEtDa2dlMXh1SUNBZ0lIUm9hWE11WDJ4cGMzUmxibVZ5Y3k1bWIzSkZZV05vS0Noc2FYTjBaVzVsY2lrZ1BUNGdiR2x6ZEdWdVpYSW9LU2s3WEc0Z0lIMWNibHh1SUNCdmJrTm9ZVzVuWlNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUd4bGRDQnNhWE4wWlc1bGNpQTlJRk41YldKdmJDZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZmJHbHpkR1Z1WlhKekxuTmxkQ2hzYVhOMFpXNWxjaXdnWTJGc2JHSmhZMnNwTzF4dVhHNGdJQ0FnY21WMGRYSnVJR3hwYzNSbGJtVnlPMXh1SUNCOVhHNWNiaUFnZFc1eVpXZHBjM1JsY2tOb1lXNW5aU2hzYVhOMFpXNWxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5c2FYTjBaVzVsY25NdVpHVnNaWFJsS0d4cGMzUmxibVZ5S1R0Y2JpQWdmVnh1ZlNJc0ltVjRjRzl5ZENCbWRXNWpkR2x2YmlCa1pXWnBibVZEYjI1emRGQnliM0JsY25SNUtHOWlhaXdnY0hKdmNDd2dkbUZzZFdVcElIdGNiaUFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHOWlhaXdnY0hKdmNDd2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnZDNKcGRHRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ2RtRnNkV1U2SUhaaGJIVmxYRzRnSUgwcE8xeHVmU0pkZlE9PVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
