!function e(n,t,u){function i(a,s){if(!t[a]){if(!n[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(r)return r(a,!0);var o=new Error("Cannot find module '"+a+"'");throw o.code="MODULE_NOT_FOUND",o}var f=t[a]={exports:{}};n[a][0].call(f.exports,function(e){var t=n[a][1][e];return i(t?t:e)},f,f.exports,e,n,t,u)}return t[a].exports}for(var r="function"==typeof require&&require,a=0;a<u.length;a++)i(u[a]);return i}({1:[function(e,n,t){"use strict";function u(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n["default"]=e,n}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e){if("string"==typeof e)return(0,o.find)(e);if(Array.isArray(e)){for(var n=arguments.length,t=Array(n>1?n-1:0),u=1;n>u;u++)t[u-1]=arguments[u];return s["default"].apply(void 0,[e].concat(t))}}Object.defineProperty(t,"__esModule",{value:!0});var a=e("../util/html.js"),s=i(a),l=e("./manipulation.js"),o=e("./find.js"),f=e("./styles.js"),c=u(f);r.create=l.create,r.css=c.css,r.addClass=c.addClass,r.removeClass=c.removeClass,r.toggleClass=c.toggleClass,r.containsClass=c.containsClass,r.find=o.find,r.findAll=o.findAll,r.remove=l.remove,t["default"]=r},{"../util/html.js":7,"./find.js":3,"./manipulation.js":4,"./styles.js":5}],2:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return e?(e.find=function(n){return a["default"].find(n,e)},e.findAll=function(n){return a["default"].findAll(n,e)},e.create=function(n){var t=a["default"].create(n);return e.appendChild(t),t},e.css=function(n){return a["default"].css(e,n)},e.addClass=function(n){return a["default"].addClass(e,n)},e.removeClass=function(n){return a["default"].removeClass(e,n)},e.toggleClass=function(n,t){return a["default"].toggleClass(e,n,t)},e.containsClass=function(n){return a["default"].containsClass(e,n)},e.remove=function(){var n=arguments.length<=0||void 0===arguments[0]?e:arguments[0],t=a["default"].remove(n);return e=null,t},e):null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=e("./d.js"),a=u(r)},{"./d.js":1}],3:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var n=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return(0,s["default"])(n.querySelector(e))}function r(e){var n=arguments.length<=1||void 0===arguments[1]?document:arguments[1];return n.querySelectorAll(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.find=i,t.findAll=r;var a=e("./djsfy"),s=u(a)},{"./djsfy":2}],4:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){var n=document.createDocumentFragment(),t=n.appendChild(document.createElement("div"));return t.innerHTML=e.trim(),1===t.childNodes.length&&(t=t.lastChild),(0,s["default"])(t.cloneNode(!0))}function r(e){return e.parentNode?e.parentNode.removeChild(e):null}Object.defineProperty(t,"__esModule",{value:!0}),t.create=i,t.remove=r;var a=e("./djsfy.js"),s=u(a)},{"./djsfy.js":2}],5:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,n){if(!e||8===e.nodeType||3===e.nodeType||!e.style)return null;for(var t in n)if(Object.hasOwnProperty.call(n,t)){var u=v({styleList:e.style,styleToCheck:t});u&&(e.style[u]=n[t])}return(0,y["default"])(e)}function r(e,n){var t=e.getAttribute("class")||"";if(n=p(n)||[],n instanceof Array)for(var u=0,i=n.length;i>u;u++){if(!n[u].trim())throw new SyntaxError("djs.addClass(): Empty strings are not valid class name");d(t,n[u])||(t+=" "+n[u].trim())}return e.setAttribute("class",t.trim()),(0,y["default"])(e)}function a(e,n){if(!e)throw new Error("The element must be not empty.");return f(n),d(e.getAttribute("class"),n)}function s(e,n){var t=o(e);if(n=p(n)||[],!t.length||!n.length)return(0,y["default"])(e);if(n instanceof Array)e:for(var u=0,i=n.length;i>u;u++){var r=n[u];f(r);for(var a=0,s=t.length;s>a;a++)if(r===t[a]){t.splice(a,1);continue e}}return e.setAttribute("class",t.join(" ")),(0,y["default"])(e)}function l(e,n,t){if(!e)throw new Error("The element must be not empty.");f(n);var u=o(e);return d(u,n)?t||s(e,n):t!==!1&&r(e,n),(0,y["default"])(e)}function o(e){return p(e.getAttribute("class"))||[]}function f(e){if(!e)throw new Error("The className provided ('"+e+"') must be not empty.");if(c(e))throw new Error("The className provided ('"+e+"') contains HTML space characters, which are not valid.")}function c(e){return e.match(/\s/)}function d(e,n){e=p(e)||[];for(var t=0,u=e.length;u>t;t++)if(e[t].trim()===n.trim())return!0;return!1}function p(e){return"string"==typeof e&&(e=e.split(" ")),e}function v(e){var n=e.styleList,t=e.styleToCheck;if(t in n)return t;if(t in M)return M[t];for(var u=0,i=C.length;i>u;u++){var r=""+C[u]+t[0].toUpperCase()+t.substring(1);if(r in n)return M[t]=r,M[t]}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.css=i,t.addClass=r,t.containsClass=a,t.removeClass=s,t.toggleClass=l;var m=e("./djsfy"),y=u(m),j="ms",h="webkit",_="moz",g="o",b="xv",$="khtml",C=[j,h,_,g,b,$],M={"float":"cssFloat"}},{"./djsfy":2}],6:[function(e,n,t){(function(u){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("./djs/d.js"),a=i(r);"object"==typeof t&&"undefined"!=typeof n?n.exports=a["default"]:"function"==typeof define&&define.amd&&define([],function(){return a["default"]});var s=void 0;s="undefined"!=typeof window?window:"undefined"!=typeof u?u:"undefined"!=typeof self?self:void 0,s.djs=a["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./djs/d.js":1}],7:[function(e,n,t){"use strict";function u(e){for(var n=e.raw,t=void 0,u=arguments.length,r=Array(u>1?u-1:0),a=1;u>a;a++)r[a-1]=arguments[a];return t=r.reduce(function(e,t,u){var r=n[u];return t=Array.isArray(t)?t.join(""):t+"","$"===r[r.length-1]&&(t=i(t),r=r.slice(0,-1)),e+=r,e+=t},""),t+=n[n.length-1]}function i(e){return e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quote;").replace(/'/g,"&#39;").replace(/`/g,"&#96;")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},{}],8:[function(e,n,t){"use strict";function u(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var u=n[t];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(n,t,u){return t&&e(n.prototype,t),u&&e(n,u),n}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(n){var t=n.unit,i=void 0===t?"Km":t,r=n.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();t["default"]=r},{}],9:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function r(e){v.$distance=e.create(p.html),s(e)}function a(e){var n=e.unit,t=e.onInput;y=new d["default"]({unit:n}),m.onInput=t,p.html=p.html.replace("{$$unit}",y.unit)}function s(e){v.$container=e,v.$input=v.$distance.find(".fe-distance__input"),v.$unit=v.$distance.find(".fe-distance__unit"),v.$input.addEventListener("input",function(e){y.setValue(e.target.value),m.onInput&&m.onInput(y)})}var l=i(['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="text">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-distance">\n      <input class="fe-inputs__input fe-distance__input" type="text">\n      <span class="fe-unit fe-distance__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(t,"__esModule",{value:!0}),t.initModule=r,t.config=a;var o=e("dom.js"),f=u(o),c=e("./distance.class.js"),d=u(c),p={html:(0,f["default"])(l)},v={$container:null,$distance:null,$input:null,$unit:null},m={onInput:null},y=null},{"./distance.class.js":8,"dom.js":6}],10:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function r(e){e.create(o.html)}var a=i(['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  '],['\n    <header class="fe-header">\n      <h1>Fuel Economy</h1>\n    </header>\n  ']);Object.defineProperty(t,"__esModule",{value:!0}),t.initModule=r;var s=e("dom.js"),l=u(s),o={html:(0,l["default"])(a)}},{"dom.js":6}],11:[function(e,n,t){"use strict";function u(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n["default"]=e,n}function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("dom.js"),a=i(r),s=e("./header/header.js"),l=u(s),o=e("./inputs/inputs-container.js"),f=u(o),c=e("./results/results-container.js"),d=u(c),p=(0,a["default"])(".fe-js-header"),v=(0,a["default"])(".fe-js-inputs-container"),m=(0,a["default"])(".fe-js-results-container");l.initModule(p),f.initModule(v),d.initModule(m)},{"./header/header.js":10,"./inputs/inputs-container.js":12,"./results/results-container.js":17,"dom.js":6}],12:[function(e,n,t){"use strict";function u(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n["default"]=e,n}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function a(e){h.$inputContainer=e.create(j.html),s(e),d.config({unit:"L",onInput:function(e){_=e,y.refreshFuelConsumption({distance:g,quantity:_})}}),d.initModule(h.$inputQuantity),v.config({unit:"Km",onInput:function(e){g=e,y.refreshFuelConsumption({distance:g,quantity:_})}}),v.initModule(h.$inputDistance)}function s(e){h.$container=e,h.$inputQuantity=h.$inputContainer.find(".fe-js-quantity"),h.$inputDistance=h.$inputContainer.find(".fe-js-distance")}var l=r(['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  '],['\n    <div class="fe-inputs-container">\n      <div class="fe-inputs fe-js-quantity"></div>\n\n      <div class="fe-inputs fe-js-distance"></div>\n    </div>\n  ']);Object.defineProperty(t,"__esModule",{value:!0}),t.initModule=a;var o=e("dom.js"),f=i(o),c=e("../quantity/quantity.js"),d=u(c),p=e("../distance/distance.js"),v=u(p),m=e("../results/results-container.js"),y=u(m),j={html:(0,f["default"])(l)},h={$container:null,$inputContainer:null,$inputQuantity:null,$inputDistance:null},_=void 0,g=void 0},{"../distance/distance.js":9,"../quantity/quantity.js":14,"../results/results-container.js":17,"dom.js":6}],13:[function(e,n,t){"use strict";function u(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var u=n[t];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(n,t,u){return t&&e(n.prototype,t),u&&e(n,u),n}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(n){var t=n.unit,i=void 0===t?"L":t,r=n.value,a=void 0===r?0:r;u(this,e),this.unit=i,this.value=a}return i(e,[{key:"setValue",value:function(e){this.value=parseInt(e)}}]),e}();t["default"]=r},{}],14:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function r(e){v.$quantity=e.create(p.html),s(e)}function a(e){var n=e.unit,t=e.onInput;y=new d["default"]({unit:n}),m.onInput=t,p.html=p.html.replace("{$$unit}",y.unit)}function s(e){v.$container=e,v.$input=v.$quantity.find(".fe-quantity__input"),v.$unit=v.$quantity.find(".fe-quantity__unit"),v.$input.addEventListener("input",function(e){y.setValue(e.target.value),m.onInput&&m.onInput(y)})}var l=i(['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="text">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  '],['\n    <div class="fe-quantity">\n      <input class="fe-inputs__input fe-quantity__input" type="text">\n      <span class="fe-unit fe-quantity__unit">{$$unit}</span>\n    </div>\n  ']);Object.defineProperty(t,"__esModule",{value:!0}),t.initModule=r,t.config=a;var o=e("dom.js"),f=u(o),c=e("./quantity.class.js"),d=u(c),p={html:(0,f["default"])(l)},v={$container:null,$quantity:null,$input:null,$unit:null},m={onInput:null},y=null},{"./quantity.class.js":13,"dom.js":6}],15:[function(e,n,t){"use strict";function u(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var u=n[t];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(e,u.key,u)}}return function(n,t,u){return t&&e(n.prototype,t),u&&e(n,u),n}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){u(this,e)}return i(e,null,[{key:"calc",value:function(e){var n=e.quantity,t=void 0===n?{}:n,u=e.distance,i=void 0===u?{}:u,r={value:0,unit:i.unit+"/"+t.unit};return t.value&&i.value?(r.value=i.value/t.value,r.value=r.value.toString().substring(0,10),r):r}}]),e}();t["default"]=r},{}],16:[function(e,n,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function r(e){v.$fuelConsumption=e.create(p.html),s(e)}function a(e){var n=e.quantity,t=e.distance,u=d["default"].calc({quantity:n,distance:t});v.$fuelUnit.innerHTML=u.unit,v.$fuelValue.innerHTML=u.value}function s(e){v.$container=e,v.$fuelUnit=v.$fuelConsumption.find(".fe-unit"),v.$fuelValue=v.$fuelConsumption.find(".fe-js-value")}var l=i(['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  '],['\n    <div class="fe-fuel-consumption">\n      <span class="fe-js-value">88</span> <span class="fe-unit">Km/L</span>\n    </div>\n  ']);Object.defineProperty(t,"__esModule",{value:!0}),t.initModule=r,t.refreshFuelConsumption=a;var o=e("dom.js"),f=u(o),c=e("./fuel-consumption.class.js"),d=u(c),p={html:(0,f["default"])(l)},v={$container:null,$fuelConsumption:null,$fuelUnit:null,$fuelValue:null}},{"./fuel-consumption.class.js":15,"dom.js":6}],17:[function(e,n,t){"use strict";function u(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n["default"]=e,n}function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function a(e){m.$resultsContainer=e.create(v.html),l(e),p.initModule(m.$fuelComsuption)}function s(e){var n=e.distance,t=e.quantity;p.refreshFuelConsumption({distance:n,quantity:t})}function l(e){m.$container=e,m.$fuelComsuption=m.$resultsContainer.find(".fe-js-fuel-consumption")}var o=r(['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  '],['\n    <div class="fe-results-container">\n      <div class="fe-js-fuel-consumption" style="height:100%"></div>\n    </div>\n  ']);Object.defineProperty(t,"__esModule",{value:!0}),t.initModule=a,t.refreshFuelConsumption=s;var f=e("dom.js"),c=i(f),d=e("./fuel-consumption/fuel-consumption.js"),p=u(d),v={html:(0,c["default"])(o)},m={$container:null,$resultsContainer:null,$fuelComsuption:null}},{"./fuel-consumption/fuel-consumption.js":16,"dom.js":6}]},{},[11]);
//# sourceMappingURL=data:application/json;base64,
